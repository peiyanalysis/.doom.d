#+TITLE: Config
#+begin_src emacs-lisp
;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Appearance
** theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src

** Fonts

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Sarasa Mono SC Nerd" :size 14)
      doom-big-font (font-spec :family "Sarasa Mono SC Nerd" :size 20)
      doom-variable-pitch-font (font-spec :family "Monaco" :size 18))
(push "Sarasa Mono SC Nerd" doom-unicode-extra-fonts)
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
#+end_src

** line-number

#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src
** cursor
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1))
#+end_src

** modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :hook
  (window-setup . doom-modeline-mode)
  :config
  ;; (use-package nyan-mode
  ;;   :hook (doom-modeline-mode . nyan-mode)
  ;;   :config
  ;;   (nyan-mode 1)
  ;;   (setq nyan-animate-nyancat t)
  ;;   (setq nyan-wavy-trail t)
  ;;   (setq mode-line-format
  ;;         (list
  ;;          '(:eval (list (nyan-create))))))
  (display-time-mode t)
  (setq doom-modeline-icon (display-graphic-p))
  (setq doom-modeline-height 40)
  (setq doom-modeline-bar-width 3)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-buffer-modification-icon t)
  (setq doom-modeline-modal-icon t)
  (setq doom-modeline-buffer-encoding nil))
(use-package posframe)
#+end_src

* Frames, Worksapces and windows
** Frame
#+begin_src emacs-lisp
(map! :leader
      :desc "Other frame"                       "o o" #'other-frame)
#+end_src

|-----------+-------------+-------------------|
| 快捷键    | 命令        | 描述              |
|-----------+-------------+-------------------|
| =Spc o o= | other-frame | 跳转到另一个 frame |
|-----------+-------------+-------------------|

** Workspace
*** Savespace
#+begin_src emacs-lisp
(use-package saveplace
  :hook (after-init . save-place-mode))
#+end_src
*** Workspace selection
#+begin_src emacs-lisp
;; keybindings
(map! :leader
      :desc "Left workspace"                    "TAB ," #'+workspace/switch-left
      :desc "Right workspace"                   "TAB ." #'+workspace/switch-right
      :desc "Switch workspace"                  "TAB w" #'+workspace/switch-to)
#+end_src

|---------+-------------------------+--------------------|
| 快捷键  | 命令                    | 描述               |
|---------+-------------------------+--------------------|
| =TAB ,= | +workspace/switch-left  | 移动到上个 workspac |
| =TAB .= | +workspace/switch-right |                    |
| =TAB w= | +workspace/switch-to    |                    |
|---------+-------------------------+--------------------|

** Windows
*** Ace-windows
#+begin_src emacs-lisp
(use-package! ace-window
  :config
  (setq aw-keys '(?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9))
  :init
  (map! :leader
        :prefix "w"
        :desc "ace-window-select" "a" #'ace-window))
#+end_src

|---------+-------------------+------|
| 快捷键  | 命令              | 描述 |
|---------+-------------------+------|
| Spc w a | ace-window-select | 测试 |
|---------+-------------------+------|

*** Winner-mode
#+begin_src emacs-lisp
(use-package winner-mode
  :hook (after-init . winner-mode))
(map! :leader
      :prefix "w"
      :desc   "winner-undo"  "u"        #'winner-undo
      :desc   "winner-redo"  "C-r"      #'winner-redo)
#+end_src

|-------------+---------------------+-------------------|
| 快捷键      | 命令                | 描述              |
|-------------+---------------------+-------------------|
| =Spc w u=   | winner-undo         | undo winodws 改变  |
| =Spc w C-r= | winner-redo         | redo windows 改变 |
|-------------+---------------------+-------------------|

* Chinese

** Emacs-rime
   emacs-china 论坛推荐使用 emacs-rime 包进行中文输入。用后感觉：UI 现代，选词快速，好用。
#+begin_src emacs-lisp
(use-package rime
  :config
  (setq rime-user-data-dir "~/.local/share/fcitx5/rime/")
  (setq rime-posframe-properties
        (list :background-color "#333333"
              :foreground-color "#dcdccc"
              :internal-border-width 10))
  (setq rime-posframe-style 'vertical)
  (setq default-input-method "rime"
        rime-show-candidate 'posframe)
  (map! "<kp-1>" "1"
        "<kp-2>" "2"
        "<kp-3>" "3"
        "<kp-4>" "4"
        "<kp-5>" "5"
        "<kp-6>" "6"
        "<kp-7>" "7"
        "<kp-8>" "8"
        "<kp-9>" "9"
        "<kp-0>" "0")
  :bind
  (:map rime-active-mode-map
  ("<tab>" . 'rime-inline-ascii)
  :map rime-mode-map
  ("C-`" . 'rime-send-keybinding)    ;; <----
  ("M-j" . 'rime-force-enable)))
#+end_src

|--------+---------------------+--------------|
| 快捷键 | 命令                | 描述         |
|--------+---------------------+--------------|
| C-\    | toggle-input-method | 切换输入法   |
| C-:    | rime-inline-ascii   | 使用英文标点 |
|--------+---------------------+--------------|

** Avy-pinyin
   利用 ace-pinyin/evil-find-char-pinyin 来快速查找字符, 快速 vim 操作.
#+begin_src emacs-lisp
;; search
(use-package! ace-pinyin
  :after evil
  :config
  ;; 允许avy跨窗口搜索
  (setq avy-all-windows t)
  ;; 全局使用ace搜索
  (ace-pinyin-global-mode t))

;; evil-find-char-pinyin
(use-package! evil-find-char-pinyin
  :after evil
  :config
  ;;  允许avy跨窗口搜索
  (setq avy-all-windows t)
  ;; 全局使用ace搜索
  (evil-find-char-pinyin-mode t))
#+end_src

* Coding
** Latex
*** forward and inverse search
    向前向后搜索能大幅增加 $\LaTeX$ 的修改速度.

    在 Emacs 中的配置:
#+begin_src emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(setq TeX-view-program-selection '((output-pdf "Okular")))
(setq TeX-source-correlate-mode t)
(setq TeX-source-correlate-start-server t)
(setq TeX-PDF-mode t)
#+end_src

    在 Okular 中的配置:
    Settings:   Editor settings
                    Editor:  Emacs client
                    Command: emacsclient -a emacs --no-wait +%l %f
    使用方法:
    | .tex -> .pdf | 使用命令 TeX-preview (C-c C-v)            |
    | .pdf -> .tex | 在 okular borwser 模式下, Shift+Left Click |

*** set engine
    设置 xetex 为基本的 $\LaTeX$ 编译器.
#+begin_src emacs-lisp
(setq TeX-engine 'xetex)
#+end_src

*** auto-activating-snippets
    设置 $\LaTeX$ 的 yasnippet
#+begin_src emacs-lisp
(use-package! latex-auto-activating-snippets)
#+end_src

#+begin_src emacs-lisp
(use-package auto-activating-snippets
  :hook (latex-mode . latex-auto-activating-snippets-mode))
#+end_src

*** cdlatex
    设置快速输入数学符号 cdlatex
#+begin_src emacs-lisp
(use-package cdlatex
  :hook ((LaTeX-mode . turn-on-cdlatex)
         (org-mode . turn-on-org-cdlatex))
  :config
  (setq cdlatex-math-modify-alist
        '(( ?s  "\\mathscr" nil t nil nil )
          ( ?b  nil         nil t nil nil )
          ( ?/  "\\slashed" nil t nil nil ))))
#+end_src

*** mathpix.el
#+begin_src emacs-lisp
(add-to-list 'load-path "/home/py06/.doom.d/packages")
(require 'mathpix)
(map! "" #'mathpix-screenshot)
(setq mathpix-app-id "yp9106_outlook_com_58f781_c2e02c"
      mathpix-app-key "b667a7350e26f378b208"
      mathpix-screenshot-method "scrot -s %s")
#+end_src

|--------+--------------------+-------------|
| 快捷键 | 命令               | 描述        |
|--------+--------------------+-------------|
| C-x m  | mathpix-screenshot | mathpix 操作 |
|--------+--------------------+-------------|
*** awesome pair
#+begin_src emacs-lisp
(require 'awesome-pair)
(dolist (hook (list
               'c-mode-common-hook
               'c-mode-hook
               'c++-mode-hook
               'java-mode-hook
               'haskell-mode-hook
               'latex-mode-hook
               'emacs-lisp-mode-hook
               'lisp-interaction-mode-hook
               'lisp-mode-hook
               'maxima-mode-hook
               'ielm-mode-hook
               'sh-mode-hook
               'makefile-gmake-mode-hook
               'php-mode-hook
               'python-mode-hook
               'js-mode-hook
               'go-mode-hook
               'qml-mode-hook
               'jade-mode-hook
               'css-mode-hook
               'ruby-mode-hook
               'coffee-mode-hook
               'rust-mode-hook
               'qmake-mode-hook
               'lua-mode-hook
               'swift-mode-hook
               'minibuffer-inactive-mode-hook
               ))
  (add-hook hook '(lambda () (awesome-pair-mode 1))))

(define-key awesome-pair-mode-map (kbd "(") 'awesome-pair-open-round)
(define-key awesome-pair-mode-map (kbd "[") 'awesome-pair-open-bracket)
(define-key awesome-pair-mode-map (kbd "{") 'awesome-pair-open-curly)
(define-key awesome-pair-mode-map (kbd ")") 'awesome-pair-close-round)
(define-key awesome-pair-mode-map (kbd "]") 'awesome-pair-close-bracket)
(define-key awesome-pair-mode-map (kbd "}") 'awesome-pair-close-curly)
(define-key awesome-pair-mode-map (kbd "%") 'awesome-pair-match-paren)
(define-key awesome-pair-mode-map (kbd "\"") 'awesome-pair-double-quote)
(define-key awesome-pair-mode-map (kbd "M-o") 'awesome-pair-backward-delete)
(define-key awesome-pair-mode-map (kbd "C-k") 'awesome-pair-kill)
(define-key awesome-pair-mode-map (kbd "M-\"") 'awesome-pair-wrap-double-quote)
(define-key awesome-pair-mode-map (kbd "M-[") 'awesome-pair-wrap-bracket)
(define-key awesome-pair-mode-map (kbd "M-{") 'awesome-pair-wrap-curly)
(define-key awesome-pair-mode-map (kbd "M-(") 'awesome-pair-wrap-round)
(define-key awesome-pair-mode-map (kbd "M-)") 'awesome-pair-unwrap)
(define-key awesome-pair-mode-map (kbd "M-p") 'awesome-pair-jump-right)
(define-key awesome-pair-mode-map (kbd "M-n") 'awesome-pair-jump-left)
(define-key awesome-pair-mode-map (kbd "M-:") 'awesome-pair-jump-out-pair-and-newline)
#+end_src
** maple-edit
#+begin_src emacs-lisp
(use-package maple-iedit
  :ensure nil
  :commands (maple-iedit-match-all maple-iedit-match-next maple-iedit-match-previous)
  :config
  (setq maple-iedit-ignore-case t)

  (defhydra maple/iedit ()
    ("n" maple-iedit-match-next "next")
    ("t" maple-iedit-skip-and-match-next "skip and next")
    ("T" maple-iedit-skip-and-match-previous "skip and previous")
    ("p" maple-iedit-match-previous "prev"))
  :bind (:map evil-visual-state-map
              ("n" . maple/iedit/body)
              ("C-n" . maple-iedit-match-next)
              ("C-p" . maple-iedit-match-previous)
              ("C-t" . maple-iedit-skip-and-match-next)))
#+end_src
** Smartparens
   修改成 leader 键
#+begin_src emacs-lisp
;; smartparens
(use-package! smartparens
  :init
  (map! :map smartparens-mode-map
        "C-M-f" #'sp-forward-sexp
        "C-M-b" #'sp-backward-sexp
        "C-M-u" #'sp-backward-up-sexp
        "C-M-d" #'sp-down-sexp
        "C-M-p" #'sp-backward-down-sexp
        "C-M-n" #'sp-up-sexp
        "C-M-s" #'sp-splice-sexp
        "C-)" #'sp-forward-slurp-sexp
        "C-}" #'sp-forward-barf-sexp
        "C-(" #'sp-backward-slurp-sexp
        "C-M-)" #'sp-backward-slurp-sexp
        "C-M-)" #'sp-backward-barf-sexp))
#+end_src


|--------+------------------------------+---------|
| 快捷键 | 命令                         | 描述    |
|--------+------------------------------+---------|
| f12    | gif-screencast-start-or-stop | 录制 gif |
|--------+------------------------------+---------|
** Poporg
   将文章里面的注释, 用 org-mode 的形式来修改.
#+begin_src emacs-lisp
(use-package! poporg
  :bind (("C-c '" . poporg-dwim)))
#+end_src

|--------+-------------+------------|
| 快捷键 | 命令        | 描述       |
|--------+-------------+------------|
| C-c '  | poporg-dwim | 开启 poporg |
|--------+-------------+------------|

** Hl-todo
#+begin_src emacs-lisp
;; hl-todo-mode
(use-package! hl-todo
  :init
  (setq hl-todo-keyword-faces
        '(("TODO"    . 'hl-todo-TODO)
          ("ADDCONT" . 'hl-todo-ADDCONT)
          ("REF"     . 'hl-todo-REF)
          ("MODCONT" . 'hl-todo-MODCONT)
          ("FIXME"   . 'hl-todo-FIXME)
          ("XXX"     . 'hl-todo-XXX)
          ("DONE"    . 'hl-todo-DONE)))
  (defface hl-todo-TODO    '((t :background "#00FF00"  :foreground "#FF0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-ADDCONT '((t :background "#00FF00"  :foreground "#FF0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-REF      '((t :background "#00FF00" :foreground "#ff0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-FIXME   '((t :background "#0000FF"  :foreground "#FF0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-MODCONT  '((t :background "#0000FF" :foreground "#FF0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-XXX      '((t :background "#000000" :foreground "#FFFFFF" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-DONE    '((t :background "#00FF00"  :foreground "#00FF00" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (map! :leader
        :prefix "c"
        :desc "show comment tags" "g" #'hl-todo-mode))
#+end_src

|---------+--------------|
| keyword |              |
|---------+--------------|
| TODO    | TODO         |
| ADDCONT | 增加表述     |
| REF     | 修改引用材料 |
| FIXME   | 修改本段代码 |
| MODCONT | 修改本段表述 |
| XXX     | 标明怪事     |
| DONE    | 完成         |
|---------+--------------|


|-----------+--------------+----------------|
| 快捷键    | 命令         | 描述           |
|-----------+--------------+----------------|
| =SPC c g= | hl-todo-mode | 开启 todo 特征 |
|-----------+--------------+----------------|


#+begin_src emacs-lisp
(map! :leader
      :desc "ivy magit todo"             "g i" #'ivy-magit-todos)
#+end_src

|------------+-----------------+----------------|
| 快捷键     | 命令            | 描述           |
|------------+-----------------+----------------|
| =SPC g i = | ivy-magit-todos | 展示每个关键词 |
|------------+-----------------+----------------|
** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (add-to-list 'yas-snippet-dirs "~/.doom.d/snippets"))
#+end_src

#+begin_src emacs-lisp
(use-package yasnippet-snippets)
#+end_src

#+begin_src emacs-lisp
(use-package ivy-yasnippet)
#+end_src
** Hungry delete
#+begin_src emacs-lisp
(use-package! hungry-delete
  :config
  (add-hook! 'after-init-hook #'global-hungry-delete-mode))
#+end_src

#+RESULTS:
: t

** Company-poseframe
#+begin_src emacs-lisp
(use-package! company-posframe
  :hook (company-mode . company-posframe-mode))
#+end_src

** So-long
#+begin_src emacs-lisp
(use-package so-long
  :config (global-so-long-mode 1))
#+end_src
** Hide-show-mode
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map  ("e" . "edit")
       (:prefix-map ("h" . "hide code")
        :desc "hide block"               "b" #'hs-hide-block
        :desc "hide level"               "l" #'hs-hide-level
        :desc "hide all"                 "a" #'hs-hide-all)
       (:prefix-map ("s" . "show code")
        :desc "show block"               "b" #'hs-show-block
        :desc "show level"               "l" #'hs-show-level
        :desc "show all"                 "a" #'hs-show-all )))
#+end_src

#+RESULTS:
: hs-show-all

** Whitespace
#+begin_src emacs-lisp
(use-package whitespace
  :hook ((prog-mode markdown-mode conf-mode latex-mode ) . whitespace-mode)
  :config
  (setq whitespace-style '(face trailing)))
#+end_src

** Buildin modes
** Autorevert
#+begin_src emacs-lisp
(use-package autorevert
  :hook (after-init . global-auto-revert-mode))
#+end_src
** Time-insert
#+begin_src emacs-lisp
;; feature-functions
(defun insert-time ()
  "Insert a timestamp according to locale's date and time format."
  (interactive)
  (insert (format-time-string "%c" (current-time))))
;; key-bindings
(map! :leader
      :desc "insert time"                "i t" #'insert-time)
#+end_src

** Commentaries
#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-\\") (quote comment-line))
#+end_src
** White-room
#+begin_src emacs-lisp
(use-package! writeroom-mode
  :hook
  (w3m-mode . writeroom-mode)
  :config
  (advice-add 'text-scale-adjust :after
              #'visual-fill-column-adjust)
  ;;https://github.com/joostkremers/writeroom-mode#fullscreen-effect
  (setq writeroom-fullscreen-effect 'maximized))
#+end_src
** grugru
#+begin_src emacs-lisp
(use-package grugru
  :config (grugru-default-setup))
#+end_src

#+RESULTS:
** undo-fu
#+begin_src emacs-lisp
(use-package! undo-fu
  :after-call doom-switch-buffer after-find-file
  :init
  (after! undo-tree
    (global-undo-tree-mode -1))
  :config
  ;; Store more undo history to prevent loss of data
  (setq undo-limit 400000
        undo-strong-limit 3000000
        undo-outer-limit 3000000)

  (define-minor-mode undo-fu-mode
    "Enables `undo-fu' for the current session."
    :keymap (let ((map (make-sparse-keymap)))
              (define-key map [remap undo] #'undo-fu-only-undo)
              (define-key map [remap redo] #'undo-fu-only-redo)
              (define-key map (kbd "C-_")     #'undo-fu-only-undo)
              (define-key map (kbd "M-_")     #'undo-fu-only-redo)
              (define-key map (kbd "C-M-_")   #'undo-fu-only-redo-all)
              (define-key map (kbd "C-x r u") #'undo-fu-session-save)
              (define-key map (kbd "C-x r U") #'undo-fu-session-recover)
              map)
    :init-value nil
    :global t)
  (undo-fu-mode +1))

(map! :leader
      (:prefix "e"
       :desc "undo-fu-only-undo"          "u"      #'undo-fu-only-undo
       :desc "undo-fu-only-redo"          "r"      #'undo-fu-only-redo
       :desc "undo-fu-only-redo-allow"    "a"      #'undo-fu-only-redo-all
       :desc "undo-fu-session-save"       "e"      #'undo-fu-session-save
       :desc "undo-fu-session-recover"    "d"      #'undo-fu-session-recover ))

(use-package! undo-fu-session
  :hook (undo-fu-mode . global-undo-fu-session-mode)
  :preface
  (setq undo-fu-session-directory (concat doom-cache-dir "undo-fu-session/")
        undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))

  ;; HACK We avoid `:config' here because `use-package's `:after' complicates
  ;;      the load order of a package's `:config' block and makes it impossible
  ;;      for the user to override its settings with merely `after!' (or
  ;;      `eval-after-load'). See jwiegley/use-package#829.
  (after! undo-fu-session
    ;; HACK Use the faster zstd to compress undo files instead of gzip
    (when (executable-find "zstd")
      (defadvice! doom--undo-fu-session-use-zstd-a (filename)
        :filter-return #'undo-fu-session--make-file-name
        (if undo-fu-session-compression
            (concat (file-name-sans-extension filename) ".zst")
          filename)))))
#+end_src

* Reader
** Nov
#+begin_src emacs-lisp
(use-package! nov)
#+end_src
** Pdf-noter
#+begin_src emacs-lisp
(use-package org-pdftools
  :hook (org-mode . org-pdftools-setup-link))

(use-package org-noter-pdftools
  :after org-noter
  :config
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src
** Pdf-tools
* Applications
** Emacs-hugo
** Easy-hugo
#+begin_src emacs-lisp
(use-package! easy-hugo
  :config
  (setq! easy-hugo-root "~/Blog/RandN/"
         easy-hugo-basedir "~/Blog/RandN/"
         easy-hugo-url "https://peiyanalysis.github.io"
         easy-hugo-previewtime "300"
         easy-hugo-default-ext ".md"
         easy-hugo-server-flags "-D"
         easy-hugo-postdir "content/post/")
  (map! :leader :desc "hugo blog" "B" #'easy-hugo)
  (map! :map easy-hugo-mode-map
      :nivm "n" 'easy-hugo-newpost
      :nivm "D" 'easy-hugo-article
      :nivm "p" 'easy-hugo-preview
      :nivm "P" 'easy-hugo-publish
      :nivm "o" 'easy-hugo-open
      :nivm "d" 'easy-hugo-delete
      :nivm "e" 'easy-hugo-open
      :nivm "c" 'easy-hugo-open-config
      :nivm "f" 'easy-hugo-open
      :nivm "N" 'easy-hugo-no-help
      :nivm "v" 'easy-hugo-view
      :nivm "r" 'easy-hugo-refresh
      :nivm "g" 'easy-hugo-refresh
      :nivm "s" 'easy-hugo-sort-time
      :nivm "S" 'easy-hugo-sort-char
      :nivm "G" 'easy-hugo-github-deploy
      :nivm "A" 'easy-hugo-amazon-s3-deploy
      :nivm "C" 'easy-hugo-google-cloud-storage-deploy
      :nivm "q" 'evil-delete-buffer
      :nivm "TAB" 'easy-hugo-open
      :nivm "RET" 'easy-hugo-preview))
 #+end_src
** Ox-hugo
#+begin_src emacs-lisp
(use-package ox-hugo
  :after ox)
#+end_src
** Baidu-translate
#+begin_src emacs-lisp
;; Baidu translate
(use-package! baidu-translate
  :init
  (global-set-key (kbd "C-c m") 'baidu-translate-zh-mark)
  (global-set-key (kbd "C-c M") 'baidu-translate-zh-whole-buffer)
  ;;设置你的百度翻译 APPID
  (setq baidu-translate-appid "20200510000447604")
  ;;设置你的秘钥
  (setq baidu-translate-security "Z5Ga8KOYLjto3H3VN8Pi")
  (map! :leader
        :desc "EN->ZH marks"            "a z" #'baidu-translate-zh-mark
        :desc "EN->ZH buffer"           "a Z" #'baidu-translate-zh-whole-buffer
        :desc "ZH->EN marks"            "a e" #'baidu-translate-en-mark
        :desc "ZH->EN buffer"           "a E" #'baidu-translate-en-whole-buffer))
#+end_src

** Elfeed

#+begin_src emacs-lisp
(setq elfeed-use-curl nil)
(setq elfeed-protocol-ttrss-maxsize 200) ;; bigger than 200 is invalid
(setq elfeed-feeds
      '(("ttrss+https://pei@rss.archpei.ink"
         :password "fee8deb91c")))
(elfeed-protocol-enable)
#+end_src


#+begin_src emacs-lisp
(use-package elfeed
  :config
  (setq elfeed-use-curl t)
  (setq elfeed-curl-max-connections 10)
  (setq elfeed-db-directory "~/.doom.d/elfeed-db/")) ; customize this ofc
#+end_src

*** elfeed-goodies
#+begin_src emacs-lisp
(use-package elfeed-goodies
  :config
  (elfeed-goodies/setup))
#+end_src

** Eaf
#+begin_src emacs-lisp
(use-package! eaf
  :config
  ;; (setq eaf-enable-debug t) ; should only be used when eaf is wigging out
  (eaf-setq eaf-browser-dark-mode "false")
  (setq eaf-browser-default-search-engine "duckduckgo")
  (eaf-setq eaf-browse-blank-page-url "https://duckduckgo.com"))
#+end_src

** Telega
#+begin_src emacs-lisp
;; telega
(setq telega-proxies
      (list
       '(:server "127.0.0.1" :port 1080 :enable t
                 :type (:@type "proxyTypeSocks5"
                               :username "" :password ""))))
(map! :leader
      (:prefix "a"
       :desc "Telega" "t" #'telega))

(require 'telega)
(map! :after telega
      :map telega-root-mode-map
      :leader
      (:prefix ("l" . "Telega")
       :desc "Open chat with" "w" #'telega-chat-with
       :desc "View folders" "f" #'telega-view-folders
       :desc "Kill telega" "K" #'telega-kill
       :desc "Browse url" "u" #'telega-browse-url))

(require 'telega)
(map! :after telega
      :map telega-chat-mode-map
      :leader
      (:prefix "l"
       :desc "Attach" "a" #'telega-chatbuf-attach
       :desc "Cancel aux" "x" #'telega-chatbuf-cancel-aux))
#+end_src
** maple-explorer
#+begin_src emacs-lisp
(use-package maple-explorer
  :commands (maple-explorer-file maple-explorer-buffer maple-explorer-imenu maple-explorer-recentf)
  :config
  (setq maple-explorer-file-display-alist '((side . left) (slot . -1))))
#+end_src

** Bibliography
*** ebib
:PROPERTIES:
:ID:       3a3c8b63-10e5-4f4a-b2bb-19e23a0802fd
:END:
 #+begin_src emacs-lisp
(use-package ebib
  :config
  (setq ebib-file-search-dirs  '("~/Dropbox/bibliography/"))
  (setq ebib-preload-bib-files '("~/Dropbox/bibliography/references.bib" )))
  (setq ebib-file-associations '(("pdf" . "PDF tools") ("djvu" . "PDF tools")))
;; map the keys
(global-set-key (kbd "<f5>") 'ebib)
 #+end_src

*** helm-bibtex
#+begin_src emacs-lisp
(use-package helm-bibtex
  :bind ("<f11>" . helm-bibtex)
  :commands (helm-bibtex)
  :init
  (add-hook 'bibtex-completion-edit-notes 'org-ref-open-bibtex-notes)
  (setq bibtex-completion-open-any 'org-ref-open-bibtex-pdf)
  :config
  (setq bibtex-completion-bibliography "~/Dropbox/bibliography/references.bib"
        bibtex-completion-library-path "~/Dropbox/bibliography/bibtex-pdfs"
        bibtex-completion-notes-path   "~/Dropbox/bibliography/helm-bibtex-notes/")
  ;(setq bibtex-completion-display-formats
  ;  '((t . "${=type=:7} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${author:30} ${title:72} ")))
  (setq bibtex-completion-additional-search-fields '(keywords))
  (setq bibtex-completion-notes-template-one-file
	(format "\n** TODO ${=key=} - ${title}\n  :PROPERTIES:\n    :Author: ${author-or-editor}\n    :Journal: ${journal}\n  :END:\n\n"))
  (setq bibtex-completion-display-formats
	'((t . "${author:20} ${year:4} ${=has-pdf=:3} ${=has-note=:1} ${=type=:7} ${title:90}")))
  (setq bibtex-completion-pdf-field "file")
  (setq bibtex-completion-pdf-symbol "PDF")
  (setq bibtex-completion-notes-symbol "N")
 )
#+end_src

*** org-ref
#+begin_src emacs-lisp
(use-package org-ref
  :after (org)
  :config
  ;;(setq reftex-default-bibliography '("~/OneDrive/2020.03.28_PunchingShearReferences/Literature.bib"))
  ;; see org-ref for use of these variables
  (setq bibtex-completion-pdf-field "file")
  (setq org-ref-bibliography-notes  "~/Dropbox/bibliography/notes.org"
      org-ref-default-bibliography  '("~/Dropbox/bibliography/references.bib")
      org-ref-pdf-directory         "~/Dropbox/bibliography/bibtex-pdfs/")
  ;;(setq bibtex-completion-bibliography "~/OneDrive/2020.03.28_PunchingShearReferences/Literature.bib"
  ;;    bibtex-completion-library-path "~/OneDrive/2020.03.28_PunchingShearReferences/PDFs"
  ;;    bibtex-completion-notes-path "~/OneDrive/2020.03.28_PunchingShearReferences/Literature-manuscript.org")
  (setq org-ref-show-broken-links nil)
  (setq bibtex-completion-pdf-open-function 'org-open-file)
  (setq org-ref-note-title-format
   "** TODO %k - %t
 :PROPERTIES:
  :CUSTOM_ID: %k
  :AUTHOR: %9a
  :JOURNAL: %j
  :DOI: %D
  :URL: %U
 :END:
")

  (setq bibtex-completion-display-formats
	'((t . "${author:20} ${year:4} ${=has-pdf=:3} ${=has-note=:1} ${=type=:7} ${title:90}")))
  (defun my/org-ref-notes-function (candidates)
    (let ((key (helm-marked-candidates)))
      (funcall org-ref-notes-function (car key))))

  (helm-delete-action-from-source "Edit notes" helm-source-bibtex)
;; Note that 7 is a magic number of the index where you want to insert the command. You may need to change yours.
  (helm-add-action-to-source "Edit notes" 'my/org-ref-notes-function helm-source-bibtex 7)
)
#+end_src

* Scratch
#+begin_src emacs-lisp
(map! :leader :desc "doom/scratch"            "X" #'doom/open-scratch-buffer)
#+end_src
用这个来编辑最基本的 doom-emacs 操作。

* Security
#+begin_src emacs-lisp
(setq user-full-name "Pei Yu"
      user-mail-address "yp9106@outlook.com")
#+END_SRC

* org-mode faces and operations
:PROPERTIES:
:ID:       c657f8f4-abbc-4d83-8198-822910968303
:END:
** heading-level-face
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.1)))))
#+end_src
** org-super-star

#+begin_src emacs-lisp
(use-package! org-superstar
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (setq org-superstar-headline-bullets-list '("☰" "☷" "☵" "☲"  "☳" "☴"  "☶"  "☱" )))
#+end_src

** ellipsis at the end of heading

#+begin_src emacs-lisp
(setq org-ellipsis " ··· ")
#+end_src
** bold/delete/emph
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src
** valign formate
#+begin_src emacs-lisp
(use-package! valign
  :init
  (require 'valign)
  :hook
  ('org-mode . #'valign-mode))
#+end_src
** org-heading and item
#+begin_src emacs-lisp
(map! :leader
      (:prefix "m"
       (:prefix-map ("m" . "modify")
        :desc "item or text"             "i" #'org-toggle-item
        :desc "heading or text"          "h" #'org-toggle-heading )))
#+end_src

* org-mode and workflow
** files

#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/.org/")
#+end_src

#+begin_src emacs-lisp
(setq py/things-dir     (concat org-directory   "things/") ;things stand for roams
      py/braindump-dir  (concat py/things-dir   "braindump/") ;second brain
      py/project-dir    (concat py/things-dir   "project/") ;projects for project files
      py/image-dir      (concat py/things-dir   "image/")   ;image stored
      py/thoughts-dir   (concat py/braindump-dir  "thoughts/") ;like roaming, but more glue
      py/arts-dir        (concat py/braindump-dir  "arts/")) ;novel, music, films, animate, comics, games, notes after reading
#+end_src

#+RESULTS:
: ~/Dropbox/.org/things/braindump/arts/

#+begin_src emacs-lisp
(setq   py/inbox                (concat org-directory   "inbox.org") ;idea records
        py/next                 (concat org-directory   "next.org")  ;one-off tasks as a todolist
        py/braindump-inbox      (concat py/braindump-dir "braindump_inbox.org")
        py/braindump-index      (concat py/braindump-dir "braindump_index.org")
        py/thoughts             (concat py/thoughts-dir "thoughts.org") ;some tempo ideas
        py/arts                 (concat py/arts-dir     "arts.org"))     ;tempo ideas of pastime
#+end_src


*** COMMENT What now

#+begin_src sh
cd ~/Dropbox/.org
ls -R
#+end_src

#+RESULTS:
| .:                                                                                                             |
| inbox.org                                                                                                      |
| inbox.org_archive                                                                                              |
| next.org                                                                                                       |
| things                                                                                                         |
|                                                                                                                |
| ./things:                                                                                                      |
| braindump                                                                                                      |
| image                                                                                                          |
| project                                                                                                        |
|                                                                                                                |
| ./things/braindump:                                                                                            |
| alphapapa_org_protocol_capture_html_capture_html_from_the_browser_selection_into_emacs_as_org_mode_content.org |
| arts                                                                                                           |
| bibliography_management.org                                                                                    |
| braindump_inbox.org                                                                                            |
| daily                                                                                                          |
| ebib.org                                                                                                       |
| elisp_学习笔记.org                                                                                             |
| Index.org                                                                                                      |
| ivy-bibtex.org                                                                                                 |
| jethro_kuan.org                                                                                                |
| org_mode_agaist_bipolar_disorder.org                                                                           |
| org-ref.org                                                                                                    |
| org_roam_bibtex.org                                                                                            |
| pdf-noter.org                                                                                                  |
| pdf_reading.org                                                                                                |
| pdf-tools.org                                                                                                  |
| redguardtoo_wucuo_fastest_solution_to_spell_check_camel_case_code_or_plain_text.org                            |
| thoughts                                                                                                       |
| webs.org                                                                                                       |
| 为什么有的人很回避与领导接触_知乎.org                                                                          |
| 互联网性别战争不可避免_但我们仍要寻找共识.org                                                                  |
| 强大的_org_mode_4_使用_capture_功能快速记录_zmonster_s_blog.org                                                |
| 您认为博士期间最重要的事情是什么_知乎.org                                                                      |
| 田园终结_资本内卷_我们需要新的道路.org                                                                         |
|                                                                                                                |
| ./things/braindump/arts:                                                                                       |
| arts.org                                                                                                       |
|                                                                                                                |
| ./things/braindump/daily:                                                                                      |
|                                                                                                                |
| ./things/braindump/thoughts:                                                                                   |
| thoughts.org                                                                                                   |
|                                                                                                                |
| ./things/image:                                                                                                |
|                                                                                                                |
| ./things/project:                                                                                              |

** task managerment
Still wanna to use a collect and conquer (C&C) method to manage my tasks.
*Capture* my random idea into the =inbox.org= file;
*Refile* the captured idea to =project= =next.org= =things= =arts= =braindump= files or directories.
*** capture
keymap

#+begin_src emacs-lisp
(after! org
  (map! :leader :desc "org-capture"           "x" #'org-capture))
#+end_src

doct
#+begin_src emacs-lisp
(use-package doct
  :ensure t
  ;;recommended: defer until calling doct
  :commands (doct))
#+end_src

tempaltes

#+begin_src emacs-lisp
(setq org-capture-templates
      (doct '(
              ;;Standard inbox inbox
              ("Inbox"
               :keys "i"
               :file py/inbox
               :template ("* %{todo-state} %?"
                          ":PROPERTIES:"
                          ":INIT:       %U"
                          ":END:")
               :todo-state "🎬 TODO"
               :create-id t)
              ;;org-protocol-capture-html
              ;; ("Web Content"
              ;;  :keys "w"
              ;;  :file ""
              ;;  :todo-state "TODO"
              ;;  :template ("* %a :website:\n\n%U %?\n\n%:initial"))
              ;;Metacognition
              ("Metacog"
               :keys "m"
               :prepend t
               :template ("* %{todo-state} %?"
                          ":PROPERTIES:"
                          ":INIT:       %U"
                          ":END:")
               :children (;; MetaNotes
                          ("MetaNotes"
                           :keys "n"
                           :type entry
                           :todo-state "🎬 TODO"
                           :function (lambda () (jethro/olp-current-buffer "Metacog" "Notes")))
                          ("MetaQuestions"
                           :keys "q"
                           :type entry
                           :todo-state "🎬 TODO"
                           :function (lambda () (jethro/olp-current-buffer "Metacog" "Questions")))
                          ("MetaTodos"
                           :keys "t"
                           :type entry
                           :todo-state "🎬 TODO"
                           :function (lambda () (jethro/olp-current-buffer "Metacog" "Todos"))))))))
#+end_src


Shameless copied functions
#+begin_src emacs-lisp
(defun jethro/find-or-create-olp (path &optional this-buffer)
  "Return a marker pointing to the entry at outline path OLP.
If anything goes wrong, throw an error, and if you need to do
something based on this error, you can catch it with
`condition-case'.
If THIS-BUFFER is set, the outline path does not contain a file,
only headings."
  (let* ((file (pop path))
         (level 1)
         (lmin 1)
         (lmax 1)
         (start (point-min))
         (end (point-max))
         found flevel)
    (unless (derived-mode-p 'org-mode)
      (error "Buffer %s needs to be in Org mode" buffer))
    (org-with-wide-buffer
     (goto-char start)
     (dolist (heading path)
       (let ((re (format org-complex-heading-regexp-format
                         (regexp-quote heading)))
             (cnt 0))
         (while (re-search-forward re end t)
           (setq level (- (match-end 1) (match-beginning 1)))
           (when (and (>= level lmin) (<= level lmax))
             (setq found (match-beginning 0) flevel level cnt (1+ cnt))))
         (when (> cnt 1)
           (error "Heading not unique on level %d: %s" lmax heading))
         (when (= cnt 0)
           ;; Create heading if it doesn't exist
           (goto-char end)
           (unless (bolp) (newline))
           (org-insert-heading nil nil t)
           (unless (= lmax 1) (org-do-demote))
           (insert heading)
           (setq end (point))
           (goto-char start)
           (while (re-search-forward re end t)
             (setq level (- (match-end 1) (match-beginning 1)))
             (when (and (>= level lmin) (<= level lmax))
               (setq found (match-beginning 0) flevel level cnt (1+ cnt))))))
       (goto-char found)
       (setq lmin (1+ flevel) lmax (+ lmin (if org-odd-levels-only 1 0)))
       (setq start found
             end (save-excursion (org-end-of-subtree t t))))
     (point-marker))))

(defun jethro/olp-current-buffer (&rest outline-path)
  "Find the OUTLINE-PATH of the current buffer."
  (let ((m (jethro/find-or-create-olp (cons (buffer-file-name) outline-path))))
    (set-buffer (marker-buffer m))
    (org-capture-put-target-region-and-position)
    (widen)
    (goto-char m)
    (set-marker m nil)))

#+end_src
*** refile
:PROPERTIES:
:ID:       dd1f4fcc-c04c-45c1-bc6c-7550ff84bba0
:END:
Inspried by [[https://emacs.stackexchange.com/questions/24976/org-mode-can-you-set-up-context-dependent-refile-targets][context-dependent org-refile]] I should imporve refile process.
**** initial
#+begin_src emacs-lisp
(setq org-refile-targets nil)
#+end_src

#+RESULTS:

**** internal
#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(nil :maxlevel . 9))
#+end_src

**** one-off
#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(py/next :maxlevel . 1))
#+end_src

**** arts
#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(py/arts :maxlevel . 1))
#+end_src
**** braindump
#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(py/braindump-inbox :maxlevel . 1))
#+end_src
**** project
#+begin_src emacs-lisp
(setq py/project-files
      (directory-files-recursively py/project-dir (rx ".org" eos)))
#+end_src

#+RESULTS:
| ~/Dropbox/.org/things/project/chemotaxis.org |

#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(py/project-files :maxlevel . 1))
#+end_src

**** thoughts
#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(py/thoughts :maxlevel . 1))
#+end_src

**** arts
#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(py/arts :maxlevel . 1))
#+end_src
** in-file structures
*** todo keyword
#+begin_src emacs-lisp
(setq org-todo-keywords
        '((sequence
           "🎬 TODO(t)"  ; A task that needs doing & is ready to do
           "🗡 INPROCESS(s)"  ; A task that is in progress
           "📌 WAITING(w)"  ; Something is holding up this task; or it is paused
           "⏰ LEAVETO(l)"  ; entry delivered to others
           "⤴ REFILE?(r)"   ;might
           "|"
           "💡 NEXT(n)"
           "☯ DONE(d)"  ; Task successfully completed
           "CANCELED(c@)") ; Task was cancelled, aborted or is no longer applicable
           )) ; Task was completed
#+end_src

*** todo keyword faces
:PROPERTIES:
:ID:       e5b8a7ba-e9f6-4f3f-99d7-1bdd289b1ae2
:INIT:     [2021-01-12 Tue 08:04]
:END:
#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      (quote (("🎬 TODO" :foreground "red" :weight bold)
              ("🗡 INPROCESS" :foreground "forest green" :weight bold)
              ("📌 WAITING" :foreground "orange" :weight bold)
              ("⏰ LEAVETO" :foreground "forest green" :weight bold)
              ("⤴ REFILE" :foreground "magenta" :weight bold)
              ("💡 NEXT" :foreground "blue" :weight bold)
              ("☯ DONE" :foreground "forest green" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              )))
#+end_src

#+RESULTS:
| 🎬 TODO     | :foreground | red          | :weight | bold |
| 🗡 INPROCESS | :foreground | forest green | :weight | bold |
| 📌 WAITING  | :foreground | orange       | :weight | bold |
| ⏰ LEAVETO  | :foreground | forest green | :weight | bold |
| ⤴ REFILE    | :foreground | magenta      | :weight | bold |
| 💡 NEXT     | :foreground | blue         | :weight | bold |
| ☯ DONE      | :foreground | forest green | :weight | bold |
| CANCELLED   | :foreground | forest green | :weight | bold |


#+caption:
| 🎬 TODO     | :foreground | red          | :weight | bold |
| 🗡 INPROCESS | :foreground | forest green | :weight | bold |
| 📌 WAITING  | :foreground | orange       | :weight | bold |
| ⏰ LEAVETO  | :foreground | forest green | :weight | bold |
| ⤴ REFILE    | :foreground | magenta      | :weight | bold |
| 💡 NEXT     | :foreground | blue         | :weight | bold |
| ☯ DONE      | :foreground | forest green | :weight | bold |
| CANCELLED   | :foreground | forest green | :weight | bold |



*** tags
keymap: =Spc m q= org-set-tag-command
#+begin_src emacs-lisp
(setq org-tag-alist
      '(("@errand" . ?e)
        ("@office" . ?o)
        ("@home" . ?h)))
#+end_src

*** properties
**** id
modify-id operation
notes-id operations
#+begin_src emacs-lisp
(map! :leader
      :prefix "n"
      (:prefix-map              ("i" . "id")
       :desc "id-create"        "C" #'org-id-get-create
       :desc "id-goto"          "g" #'org-id-goto
       :desc "id-copy"          "c" #'org-id-copy))
#+end_src

**** initial-time
***** captgure: use the templates
***** normal:
:PROPERTIES:
:ID:       e37fa0af-d194-471d-9f67-1803f1e6be44
:INIT:     [2021-01-11 Mon 23:35]
:LOCATION: dod
:END:

keymaps:
#+begin_src emacs-lisp
(map! :leader
      :desc "set initial property" "mdi" #'org-set-property-initial-time
      :desc "set initial property" "mcs" #'org-set-property-initial-time)
#+end_src

****** works
:PROPERTIES:
:LOCATION: dod
:END:
Time formate
#+begin_src emacs-lisp
(defvar org-initial-current-time-format "[%Y-%m-%d %a %H:%M]"
  "Format of date to insert with `insert-current-date-time' func
See help of `format-time-string' for possible replacements")
#+end_src

#+RESULTS:
: org-initial-current-time-format

#+begin_src emacs-lisp
(defun org-set-property-initial-time ()
  "Set the initial time property of entries in orgmode as\n
:INIT:    [YEAR-MONTH-DAY WEEKDAY HOUR:MIN]\n
when you realize it IS initalized."
  (interactive)
  (if (member "INIT" (org-entry-properties nil 'standard))
      ()
   (org-set-property "INIT" (format-time-string org-initial-current-time-format (current-time)))
    ))
#+end_src

#+RESULTS:
: org-set-property-initial-time

**** schedual/deadline
org-schedual
org-deadline
**** effort
:LOGBOOK:
CLOCK: [2021-01-11 Mon 07:13]--[2021-01-11 Mon 07:14] =>  0:01
:END:
org-set-effort

#+begin_src emacs-lisp
(map! :leader
      (:prefix "m"
       (:prefix "c"
        :desc "set effort"    "e"     #'org-set-effort)))
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-global-properties
      '("Effort_ALL". "0:05 0:15 0:30 1:00 1:30 2:00 3:00 4:00"))
#+end_src

**** clock-sum
:LOGBOOK:
CLOCK: [2021-01-11 Mon 07:14]--[2021-01-11 Mon 07:14] =>  0:00
:END:
clock-in
clock-in-last-clock
clock-out
clock-time-report
**** pomodoro
use the basic org-pomodoro
** knowledge managerment
*** notdeft -- file manager
#+begin_src emacs-lisp
(use-package! notdeft
  :config
  (setq notdeft-extension "org")
  (setq notdeft-directories '("~/Dropbox/.org/"))
  (setq notdeft-xapian-program "/home/py06/.local/share/notdeft-xapian")
  :bind (:map notdeft-mode-map
         ("C-q" . notdeft-quit)
         ("C-r" . notdeft-refresh)))
#+end_src

#+begin_src emacs-lisp
(setenv "XAPIAN_CJK_NGRAM" "1")
#+end_src

#+begin_src emacs-lisp
(map! :leader
      (:prefix "n"
       :desc "notdeft" "n" #'notdeft ))
#+end_src

#+RESULTS:
: notdeft
*** org-roam -- knowledge base
**** directories, files and other basic settings
#+begin_src emacs-lisp
(use-package! org-roam
  :commands (org-roam-insert org-roam-find-file org-roam-switch-to-buffer org-roam)
  :hook
  (after-init . org-roam-mode))
#+end_src

#+begin_src emacs-lisp
(setq   org-roam-directory              py/braindump-dir
        org-roam-index-file             py/braindump-index
        org-roam-dailies-directory      "dailies/"
        org-roam-db-gc-threshold        most-positive-fixnum
        org-roam-graph-exclude-matcher  "private"
        org-roam-tag-sources            '(prop last-directory)
        org-id-link-to-org-use-id t)
#+end_src
**** keymaps
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("r" . "roam")
       :desc "Switch to buffer"              "b" #'org-roam-switch-to-buffer
       (:prefix ("d" . "by date")
        :desc "Arbitrary date" "d" #'org-roam-dailies-find-date
        :desc "Today"          "t" #'org-roam-dailies-find-today
        :desc "Tomorrow"       "m" #'org-roam-dailies-find-tomorrow
       :desc "Yesterday"       "y" #'org-roam-dailies-find-yesterday)
       :desc "Find file"                     "f" #'org-roam-find-file
       :desc "Show graph"                    "g" #'org-roam-graph
       :desc "Insert new text"               "i" #'org-roam-insert
       :desc "Insert selected text"          "I" #'org-roam-insert-immediate
       :desc "Jump to index"                 "j" #'org-roam-jump-to-index
       :desc "Roam buffer"                   "r" #'org-roam
       :desc "Org Roam Capture"              "x" #'org-roam-capture))
#+end_src

#+RESULTS:
: org-roam-capture

**** roam-capture
***** roam-protocol
#+begin_src emacs-lisp
(use-package! org-roam-protocol
  :after org-protocol)
#+end_src

***** roam-cpature template
#+begin_src emacs-lisp
(setq org-roam-capture-templates
             ;; literally
      '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           :head "#+title: ${title}\n"
           :unnarrowed t)))
;; org-roam-capture-immediate
(setq org-roam-capture-immediate-template
             ;; default
             '("d" "default" plain (function org-roam--capture-get-point)
               "%?"
               :file-name "${slug}"
               :head "#+title: ${title}\n"
               :unnarrowed t))
#+end_src
***** roam-capture-ref-templates
#+begin_src emacs-lisp
(setq org-roam-capture-ref-templates nil)
(add-to-list 'org-roam-capture-ref-templates
             '("r" "ref" plain (function org-roam-capture--get-point)
               ""
               :file-name "${slug}"
               :head "#+title: ${title}\n#+roam_key: ${ref}\n"
               :unnarrowed t))
(add-to-list 'org-roam-capture-ref-templates
             '("a" "Annotation" plain (function org-roam-capture--get-point)
               "%U \n${body}\n"
               :file-name "${slug}"
               :head "#+title: ${title}\n#+roam_key: ${ref}\n#+roam_alias:\n"
               :immediate-finish t
               :unnarrowed t))
#+end_src

#+RESULTS:
| a | Annotation | plain | #'org-roam-capture--get-point | %U |

*****
**** roam-server
#+begin_src emacs-lisp
(use-package! org-roam-server
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 9090
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
;; kept server running
(unless (server-running-p)
  (org-roam-server-mode))
#+end_src

** agenda customization
We discuss different agendas here
*** super-agenda
#+begin_src emacs-lisp
(use-package! org-super-agenda
:config
(add-hook! 'after-init-hook 'org-super-agenda-mode)
(setq
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t
   org-agenda-include-deadlines t
   org-agenda-include-diary nil
   org-agenda-block-separator nil
   org-agenda-compact-blocks t
   org-agenda-start-with-log-mode t)
(setq org-columns-default-format
      "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")

)
#+end_src

*** 🎬 TODO agenda

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      `(("B" "BrainDump"
         ((todo "🎬 TODO|🗡 INPROCESS"
                ((org-agenda-overriding-header "To Refile")
                 (org-agenda-files '(,(expand-file-name py/braindump-inbox)))))
          (todo "🎬 TODO|🗡 INPROCESS"
                ((org-agenda-overriding-header "To Detail")
                 (org-agenda-files (directory-files-recursively py/braindump-dir (rx ".org" eos)))))
          (todo "🎬 TODO|🗡 INPROCESS"
                ((org-agenda-overriding-header "Arts, To Refile")
                 (org-agenda-files '(,(expand-file-name py/arts)))))
          (todo "🎬 TODO|🗡 INPROCESS"
                ((org-agenda-overriding-header "Arts, To Detail")
                 (org-agenda-files (directory-files-recursively py/arts-dir (rx ".org" eos)))))))
        ("A" "Pei's Agenda"
         ((agenda "" ((org-agenda-span 2)
                      (org-agenda-start-day "-1d")
                      (org-super-agenda-groups
                       '((:name "Today List"
                                :time-grid t
                                :date today
                                :todo "⚔ INPROCESS"
                                :scheduled today
                                :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                                 :priority>= "B"
                                 :order 2)
                          (:name "Important"
                                 :todo "✰ Important"
                                 :order 6)
                          (:name "Due Today"
                                 :deadline today
                                 :order 3)
                          (:name "Due Soon"
                                 :deadline future
                                 :order 8)
                          (:name "Overdue"
                                 :deadline past
                                 :order 20)
                          (:name "Issues"
                                 :tag "Issue"
                                 :order 12)
                          (:name "Projects"
                                 :tag "Project"
                                 :order 14)
                          (:name "Emacs"
                                 :tag "Emacs"
                                 :order 13)
                          (:name "Research"
                                 :tag "Research"
                                 :order 15)
                          (:name "To read"
                                 :tag ("BOOK" "READ")
                                 :order 30)
                          (:name "Waiting"
                                 :todo "⚑ WAITING"
                                 :order 18)
                          (:name "trivial"
                                 :priority<= "C"
                                 :todo ("SOMEDAY")
                                 :order 90)))))
          ))))
#+end_src

*** ☯ DONE braindump detailize
怎么排除 py/braindump 中的 的py/braindump-inbox 文件？
- part: braindump_inbox
  + file: py/braindump_inbox
  + span: 365
  + todo keywords: TODO and INPROCESS
  + time grid: nil
  + schedual: nil
  + deadline: nil
  + priority: sort by this order 1
  + order: 1
  + tags: nil
  + effort: sort by this order 2
- part: braindump/  without inbox
  + file: all files in py/braindump (without files in arts/ and py/braindump_inbox and py/daily)
  + span: 365
  + todo keywords: TODO and INPROCESS
  + time grid: nil
  + schedual: nil
  + deadline: nil
  + priority: sort by this order 1
  + order: 1
  + tags: nil
  + effort: sort by this order 2
- part: art.org
  + file: py/art
  + span: 365
  + todo keywords: TODO and INPROCESS
  + time grid: nil
  + schedual: nil
  + deadline: nil
  + priority: sort by this order 1
  + order: 1
  + tags: nil
  + effort: sort by this order 2
- part: art/ without inbox
  + name: all files in py/arts (without files in arts.org)
  + file: braindump_inbox
  + span: 365
  + todo keywords: TODO and INPROCESS
  + time grid: nil
  + schedual: nil
  + deadline: nil
  + priority: sort by this order 1
  + order: 1
  + tags: nil
  + effort: sort by this order

* Metacog
** Notes
*** 🎬 TODO captured html
:PROPERTIES:
:ID:       e37fa0af-d194-471d-9f67-1803f1e6be44
:END:
***** Question
#+begin_export html
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<!-- Created by htmlize-1.56 in css mode. -->
<html>
  <head>
    <title>*sx-question*</title>
    <style type="text/css">
    <!--
      body {
        color: #f8f8f2;
        background-color: #1E2029;
      }
      .markdown-inline-code {
        /* markdown-inline-code-face */
        color: #f1fa8c;
        background-color: #252631;
      }
      .markdown-markup {
        /* markdown-markup-face */
        color: #6272a4;
      }
      .region {
        /* region */
        background-color: #44475a;
      }
      .sx-question-mode-content {
        /* sx-question-mode-content-face */
        background-color: #090909;
      }
      .sx-question-mode-date {
        /* sx-question-mode-date */
        color: #f1fa8c;
      }
      .sx-question-mode-header {
      }
      .sx-question-mode-score {
      }
      .sx-question-mode-title {
        /* sx-question-mode-title */
        color: #f8f8f2;
        background-color: #1E2029;
        font-weight: bold;
      }
      .sx-question-mode-title-comments {
        /* sx-question-mode-title-comments */
        color: #f8f8f2;
        background-color: #1E2029;
        font-weight: bold;
      }
      .sx-tag {
        /* sx-tag */
        color: #50fa7b;
      }
      .sx-user-name {
        /* sx-user-name */
        color: #ffb86c;
      }
      .sx-user-reputation {
        /* sx-user-reputation */
        color: #6272a4;
      }
      .underline {
        /* underline */
        text-decoration: underline;
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    -->
    </style>
  </head>
  <body>
    <pre>
<span class="sx-question-mode-title"><span class="region"><span class="region">Org-mode: Can you set up context-dependent refile targets?</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region">
Author:    </span></span></span><span class="sx-user-name"><span class="region"><span class="region">wiuah</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region"> </span></span></span><span class="sx-user-reputation"><span class="region"><span class="region">31</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region">
Posted on: </span></span></span><span class="sx-question-mode-date"><span class="region"><span class="region">12:17  1 Aug 2016</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region">
Score:     </span></span></span><span class="sx-question-mode-score"><span class="region"><span class="region">3</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region">
Tags:      </span></span></span><span class="sx-tag"><span class="region"><span class="region">[org-mode]</span></span></span><span class="region"><span class="region">
</span></span><span class="sx-question-mode-header"><span class="underline"><span class="region"><span class="region">                                                                        </span></span></span></span><span class="region"><span class="region">
</span></span><span class="region"><span class="sx-question-mode-content"><span class="region">
I'm new to org-mode (and emacs in general), and have been trying to follow the
tutorials and manuals to set up a GTD-like system.

I currently have an "inbox.org" file with two first-level headings ("Inbox" and
"Processing"). I also have a "todo.org" file with a "Projects" heading.

I've set up </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-targets</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> so that any task in inbox.org can be refiled to
todo.org. When I refile something, it shows me all the headings in all my org
files to choose.

However, what I'd really like to do is have the refile targets change based on
the heading or file I'm currently in.

So, for example, for tasks under the "Inbox" heading, the only refile target
available should be "Processing".

For tasks under "Processing", the only refile targets available should be
"Projects", "Someday" (goes to a someday.org file), or "Reference" (goes to a
reference.org file).

This way, I can create sort of a directional "workflow" to enforce the GTD
decision model. Is it possible to set this up with org-mode?
</span></span></span><span class="sx-question-mode-header"><span class="underline"><span class="region"><span class="sx-question-mode-content"><span class="region">                                                                        </span></span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">
</span></span></span><span class="region"><span class="region">
</span></span><span class="sx-question-mode-title-comments"><span class="region"><span class="region"> Comments</span></span></span><span class="region"><span class="region">
</span></span><span class="sx-user-name"><span class="region"><span class="sx-question-mode-content"><span class="region">lurdan</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">: You can control refile target with </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-targets</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">. (i.e. C-h v
   org-refile-targets)
</span></span></span></pre>
  </body>
</html>
#+end_export
***** Answer 1
#+begin_export html
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<!-- Created by htmlize-1.56 in css mode. -->
<html>
  <head>
    <title>*sx-question*</title>
    <style type="text/css">
    <!--
      body {
        color: #f8f8f2;
        background-color: #1E2029;
      }
      .builtin {
        /* font-lock-builtin-face */
        color: #ffb86c;
      }
      .constant {
        /* font-lock-constant-face */
        color: #8be9fd;
      }
      .doc {
        /* font-lock-doc-face */
        color: #8995ba;
      }
      .function-name {
        /* font-lock-function-name-face */
        color: #50fa7b;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #ff79c6;
      }
      .markdown-inline-code {
        /* markdown-inline-code-face */
        color: #f1fa8c;
        background-color: #252631;
      }
      .markdown-markup {
        /* markdown-markup-face */
        color: #6272a4;
      }
      .region {
        /* region */
        background-color: #44475a;
      }
      .string {
        /* font-lock-string-face */
        color: #f1fa8c;
      }
      .sx-question-mode-content {
        /* sx-question-mode-content-face */
        background-color: #090909;
      }
      .sx-question-mode-date {
        /* sx-question-mode-date */
        color: #f1fa8c;
      }
      .sx-question-mode-header {
      }
      .sx-question-mode-score {
      }
      .sx-question-mode-title {
        /* sx-question-mode-title */
        color: #f8f8f2;
        background-color: #1E2029;
        font-weight: bold;
      }
      .sx-user-name {
        /* sx-user-name */
        color: #ffb86c;
      }
      .sx-user-reputation {
        /* sx-user-reputation */
        color: #6272a4;
      }
      .type {
        /* font-lock-type-face */
        color: #bd93f9;
      }
      .underline {
        /* underline */
        text-decoration: underline;
      }
      .variable-name {
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    -->
    </style>
  </head>
  <body>
    <pre>
<span class="sx-question-mode-title"><span class="region"><span class="region">Answer</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region">
Author:    </span></span></span><span class="sx-user-name"><span class="region"><span class="region">erikstokes</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region"> </span></span></span><span class="sx-user-reputation"><span class="region"><span class="region">11215</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region">
Posted on: </span></span></span><span class="sx-question-mode-date"><span class="region"><span class="region">00:57 12 Sep 2016 (edited 7mo ago by Chris Hunt)</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region">
Score:     </span></span></span><span class="sx-question-mode-score"><span class="region"><span class="region">4</span></span></span><span class="region"><span class="region">
</span></span><span class="sx-question-mode-header"><span class="underline"><span class="region"><span class="region">                                                                        </span></span></span></span><span class="region"><span class="region">
</span></span><span class="region"><span class="sx-question-mode-content"><span class="region">
</span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">org-mode</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> already has a feature like this for </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">org-capture</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> and </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">org-agenda</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">. We can
use that to bootstrap a similar feature for </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">:

    (</span></span></span><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">require</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> '</span></span></span><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">dash</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">)

    (</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">defvar</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> </span></span></span><span class="variable-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-contexts</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> </span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">"Contexts for `</span></span></span></span><span class="string"><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">org-capture</span></span></span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">'.

    Takes the same values as `</span></span></span></span><span class="string"><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">org-capture-templates-contexts</span></span></span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">' except
    that the first value of each entry should be a valid setting for
    `</span></span></span></span><span class="string"><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-targets</span></span></span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">'."</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">)

    (</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">defun</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> </span></span></span><span class="function-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile--get-context-targets</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> ()
      </span></span></span><span class="doc"><span class="region"><span class="sx-question-mode-content"><span class="region">"Get the refile targets for the current headline.

    Returns the first set of targets in `</span></span></span></span><span class="doc"><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-contexts</span></span></span></span></span><span class="doc"><span class="region"><span class="sx-question-mode-content"><span class="region">' that
    the current headline satisfies, or `</span></span></span></span><span class="doc"><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-targets</span></span></span></span></span><span class="doc"><span class="region"><span class="sx-question-mode-content"><span class="region">' if there
    are no such."</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">
      (</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">or</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> (</span></span></span><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">car</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> (</span></span></span><span class="function-name"><span class="region"><span class="sx-question-mode-content"><span class="region">-first</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> (</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">lambda</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> (x)
                                (</span></span></span><span class="function-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-contextualize-validate-key</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">
                                 (</span></span></span><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">car</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> x)
                                 org-refile-contexts))
                              org-refile-contexts
                     ))
          </span></span></span><span class="variable-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-targets</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">)
      )

    (</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">defun</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> </span></span></span><span class="function-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-with-context</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> (</span></span></span><span class="type"><span class="region"><span class="sx-question-mode-content"><span class="region">&amp;optional</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> arg default-buffer rfloc msg)
      </span></span></span><span class="doc"><span class="region"><span class="sx-question-mode-content"><span class="region">"Refile the headline to a location based on `</span></span></span></span><span class="doc"><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-targets</span></span></span></span></span><span class="doc"><span class="region"><span class="sx-question-mode-content"><span class="region">'.

    Changes the set of available refile targets based on `</span></span></span></span><span class="doc"><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-contexts</span></span></span></span></span><span class="doc"><span class="region"><span class="sx-question-mode-content"><span class="region">', but is otherwise identical to `</span></span></span></span><span class="doc"><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile</span></span></span></span></span><span class="doc"><span class="region"><span class="sx-question-mode-content"><span class="region">'"</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">
      (</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">interactive</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> </span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">"P"</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">)
      (</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">let</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> ((</span></span></span><span class="variable-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-targets</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> (org-refile--get-context-targets)))
        (</span></span></span><span class="function-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> arg default-buffer rfloc msg)
        )
      )

Set the contexts you want in </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-contexts</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> using the same rules as
</span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">org-capture-templates-contexts</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">: it is a list of pairs </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">(targets conditions)</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">,
where </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">targets</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> is the desired setting for </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-targets</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> and </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">conditions</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> is a
list of predicates to test the current headline against (most generally, these
can be any function taking no arguments).

For example this setting will cause anything in the "notes.org" file under the
"Inbox" heading to be refiled to "Projects"

    (</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">setq</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> org-refile-contexts
          '(((((</span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">"notes.org"</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">) . (</span></span></span><span class="builtin"><span class="region"><span class="sx-question-mode-content"><span class="region">:regexp</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> . </span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">"Projects"</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">)))
             ((</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">lambda</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> () (</span></span></span><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">string=</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> (</span></span></span><span class="function-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-find-top-headline</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">) </span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">"Inbox"</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">)))
             )
            ))

More conditions and more targets can be added to achieve almost any workflow.

Bind </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">org-capture-with-context</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> to the key normally bound to </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> and it
should replace it seamlessly:

    (</span></span></span><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">define-key</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> </span></span></span><span class="variable-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-mode-map</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> (</span></span></span><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">kbd</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> </span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">"C-c C-w"</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">) #'org-refile-with-context)
</span></span></span><span class="sx-question-mode-header"><span class="underline"><span class="region"><span class="sx-question-mode-content"><span class="region">                                                                        </span></span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">
</span></span></span></pre>
  </body>
</html>

#+end_export
***** Answer 2
#+begin_export html
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<!-- Created by htmlize-1.56 in css mode. -->
<html>
  <head>
    <title>*sx-question*</title>
    <style type="text/css">
    <!--
      body {
        color: #f8f8f2;
        background-color: #1E2029;
      }
      .button {
        /* button */
        color: #bd93f9;
        font-weight: bold;
        text-decoration: underline;
      }
      .comment {
        /* font-lock-comment-face */
        color: #6272a4;
      }
      .comment-delimiter {
        /* font-lock-comment-delimiter-face */
        color: #6272a4;
      }
      .constant {
        /* font-lock-constant-face */
        color: #8be9fd;
      }
      .doc {
        /* font-lock-doc-face */
        color: #8995ba;
      }
      .function-name {
        /* font-lock-function-name-face */
        color: #50fa7b;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #ff79c6;
      }
      .markdown-comment {
        /* markdown-comment-face */
        color: #6272a4;
      }
      .markdown-inline-code {
        /* markdown-inline-code-face */
        color: #f1fa8c;
        background-color: #252631;
      }
      .markdown-markup {
        /* markdown-markup-face */
        color: #6272a4;
      }
      .region {
        /* region */
        background-color: #44475a;
      }
      .string {
        /* font-lock-string-face */
        color: #f1fa8c;
      }
      .sx-question-mode-content {
        /* sx-question-mode-content-face */
        background-color: #090909;
      }
      .sx-question-mode-date {
        /* sx-question-mode-date */
        color: #f1fa8c;
      }
      .sx-question-mode-header {
      }
      .sx-question-mode-score {
      }
      .sx-question-mode-title {
        /* sx-question-mode-title */
        color: #f8f8f2;
        background-color: #1E2029;
        font-weight: bold;
      }
      .sx-user-name {
        /* sx-user-name */
        color: #ffb86c;
      }
      .sx-user-reputation {
        /* sx-user-reputation */
        color: #6272a4;
      }
      .type {
        /* font-lock-type-face */
        color: #bd93f9;
      }
      .underline {
        /* underline */
        text-decoration: underline;
      }
      .warning {
        /* font-lock-warning-face */
        color: #f1fa8c;
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    -->
    </style>
  </head>
  <body>
    <pre>
<span class="sx-question-mode-title"><span class="region"><span class="region">Answer</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region">
Author:    </span></span></span><span class="sx-user-name"><span class="region"><span class="region">mutbuerger</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region"> </span></span></span><span class="sx-user-reputation"><span class="region"><span class="region">3099</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region">
Posted on: </span></span></span><span class="sx-question-mode-date"><span class="region"><span class="region">16:58  1 Aug 2016 (edited 4y ago by Community)</span></span></span><span class="sx-question-mode-header"><span class="region"><span class="region">
Score:     </span></span></span><span class="sx-question-mode-score"><span class="region"><span class="region">1</span></span></span><span class="region"><span class="region">
</span></span><span class="sx-question-mode-header"><span class="underline"><span class="region"><span class="region">                                                                        </span></span></span></span><span class="region"><span class="region">
</span></span><span class="region"><span class="sx-question-mode-content"><span class="region">
</span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> uses a </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">rfloc</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> argument that, after reading the docstring,
unfortunately remains mysterious. </span></span></span><span class="button"><span class="region"><span class="sx-question-mode-content"><span class="region">This answer</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> clarifies how </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">rfloc</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> should look
like. The following function sets the </span></span></span><span class="markdown-inline-code"><span class="region"><span class="sx-question-mode-content"><span class="region">rfloc</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> based on a FILE argument, that is
the target file, a HEADING argument, specifying the target heading the current
heading should be refiled to (must be exact, meaning you have to include tags
and todo states if there are any), and a PARENT argument that describes the
top-level heading whose subitems will be refiled to that target:

</span></span></span><span class="markdown-comment"><span class="region"><span class="sx-question-mode-content"><span class="region">&lt;!-- language: lang-el --&gt;</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">

    (</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">defun</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> </span></span></span><span class="function-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile-enh</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> (file heading parent </span></span></span><span class="type"><span class="region"><span class="sx-question-mode-content"><span class="region">&amp;optional</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> arg default-buffer msg)
      </span></span></span><span class="doc"><span class="region"><span class="sx-question-mode-content"><span class="region">"Refile entries with top-level PARENT under the (exact) HEADING in FILE."</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">
      (</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">let</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> ((rfloc
             (</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">if</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> (</span></span></span><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">equal</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> parent
                  (</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">save-excursion</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">
                    (</span></span></span><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">re-search-backward</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> </span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">"^</span></span></span></span><span class="string"><span class="warning"><span class="region"><span class="sx-question-mode-content"><span class="region">\</span></span></span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">* "</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> nil 'noerror 1)
                    (</span></span></span><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">nth</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> 4 (</span></span></span><span class="function-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-heading-components</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">))))
                 `(,heading
                   ,file
                   nil
                   ,(</span></span></span><span class="keyword"><span class="region"><span class="sx-question-mode-content"><span class="region">with-current-buffer</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> (</span></span></span><span class="constant"><span class="region"><span class="sx-question-mode-content"><span class="region">find-file-noselect</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> file)
                      (</span></span></span><span class="function-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-find-exact-headline-in-buffer</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> heading))))))
        (</span></span></span><span class="function-name"><span class="region"><span class="sx-question-mode-content"><span class="region">org-refile</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> arg default-buffer rfloc msg)))

In your case, refiling subitems from "Inbox" under the "Processing" heading in
the same file would be:

</span></span></span><span class="markdown-comment"><span class="region"><span class="sx-question-mode-content"><span class="region">&lt;!-- language: lang-el --&gt;</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">

    (org-refile-enh </span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">"~/path/to/inbox.org"</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region"> </span></span></span><span class="comment-delimiter"><span class="region"><span class="sx-question-mode-content"><span class="region">;</span></span></span></span><span class="comment"><span class="region"><span class="sx-question-mode-content"><span class="region">target file
    </span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">                </span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">"Processing"</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">          </span></span></span><span class="comment-delimiter"><span class="region"><span class="sx-question-mode-content"><span class="region">;</span></span></span></span><span class="comment"><span class="region"><span class="sx-question-mode-content"><span class="region">target heading
    </span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">                </span></span></span><span class="string"><span class="region"><span class="sx-question-mode-content"><span class="region">"Inbox"</span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">               </span></span></span><span class="comment-delimiter"><span class="region"><span class="sx-question-mode-content"><span class="region">;</span></span></span></span><span class="comment"><span class="region"><span class="sx-question-mode-content"><span class="region">top-level heading of refiled item
    </span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">                )
</span></span></span><span class="sx-question-mode-header"><span class="underline"><span class="region"><span class="sx-question-mode-content"><span class="region">                                                                        </span></span></span></span></span><span class="region"><span class="sx-question-mode-content"><span class="region">
</span></span></span></pre>
  </body>
</html>

#+end_export
*** 🎬 TODO 考虑弄个 id 直接插入的函数
:PROPERTIES:
:INIT:       [2021-01-11 Mon 16:22]
:END:
** Questions
*** 🎬 TODO could I modify the valign mode make it applicable to the results in org-babal region
:PROPERTIES:
:INIT:       [2021-01-12 Tue 08:02]
:END:
*** 🎬 TODO
:PROPERTIES:
:INIT:       [2021-01-11 Mon 06:47]
:END:
