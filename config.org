#+TITLE: Config
#+begin_src emacs-lisp
;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* 🎬 TODO personal data

#+begin_src emacs-lisp
(setq user-full-name "Pei Yu"
      user-mail-address "yp9106@outlook.com")
#+END_SRC

* ☯ DONE Global variables
注意到 =doom-privae-dir= 是 doom 的个人配置文件夹，一般为 =~/.doom.d/=
** rime path
记录了 [[https://wiki.archlinux.org/index.php/Fcitx5][archlinux fcitx5]] 中 [[https://github.com/fcitx/fcitx5-rime][fcitx5-rime]] 输入法的位置
#+begin_src emacs-lisp :tangle yes
(setq rime-user-data-dir "~/.local/share/fcitx5/rime/")
#+end_src

** mathpix path
记录了 [[https://github.com/jethrokuan/mathpix.el][jethrokuan/mathpix.el]] 存储位置,

#+begin_src emacs-lisp :tangle yes
(setq mathpix-dir (concat doom-private-dir "mathpix/"))
(setq mathpix-app-id (with-temp-buffer (insert-file-contents "./secrets/mathpix-app-id") (buffer-string))
      mathpix-app-key (with-temp-buffer (insert-file-contents "./secrets/mathpix-app-key") (buffer-string)))
#+end_src
** org-mode path
记录了 org-mode 相关的路径位置.
*** org-files
记录了标准的 org-mode 相关的文件位置
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/Org/")
#+end_src
*** org-things
- 记录了
  + things: 所有记录的东西
  + braindump: [[https://www.orgroam.com/][org-roam]] 的内容存储位置
  + project: 记录工作项目
  + image: 记录喜欢的图片
  + thoughts: 记录不知道从何而来的想法
  + arts: 记录看到的图片
#+begin_src emacs-lisp
(setq py/things-dir     (concat org-directory   "things/") ;things stand for roams
      py/braindump-dir  (concat py/things-dir   "braindump/") ;second brain
      py/project-dir    (concat py/things-dir   "project/") ;projects for project files
      py/image-dir      (concat py/things-dir   "image/")   ;image stored
      py/thoughts-dir   (concat py/braindump-dir  "thoughts/") ;like roaming, but more glue
      py/arts-dir        (concat py/braindump-dir  "arts/")) ;novel, music, films, animate, comics, games, notes after reading
#+end_src
- 记录了
  + inbox: 到脑子里的想法
  + next: 待处理的想法
  + braindump-inbox: 从inbox转移到 [[https://www.orgroam.com/][org-roam]] 的想法
  + brain-index: 记录 [[https://www.orgroam.com/][org-roam]] 内的所有内容
  + thoughts: 记录想法的所有内容
  + arts: 记录所享受的所有艺术品
#+begin_src emacs-lisp
(setq   py/inbox                (concat org-directory   "inbox.org") ;idea records
        py/next                 (concat org-directory   "next.org")  ;one-off tasks as a todolist
        py/braindump-inbox      (concat py/braindump-dir "braindump_inbox.org")
        py/braindump-index      (concat py/braindump-dir "Index.org")
        py/thoughts             (concat py/thoughts-dir "thoughts.org") ;some tempo ideas
        py/arts                 (concat py/arts-dir     "arts.org"))     ;tempo ideas of pastime
#+end_src

*** bipolar
记录自己对抗双向情感障碍的表格(时常失败,但要永远昂扬), 表格来源是:


#+DOWNLOADED: file:///home/py06/.doom.d/images/bipolarform.jpg @ 2021-04-13 22:00:29
[[file:images/config/bipolarform.jpg]]
#+begin_src emacs-lisp :tangle yes
(setq   py/bipolar (concat org-directory   "logs/bipolar.org"));idea records
#+end_src



* ☯ DONE Scratch
用这个来编辑最基本的 doom-emacs 操作。(不知道有什么用)
#+begin_src emacs-lisp
(map! :leader :desc "doom/scratch"            "X" #'doom/open-scratch-buffer)
#+end_src


* ☯ DONE Appearance
** ☯ DONE theme
使用 doom-dracula 主题
#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src

** ☯ DONE Fonts
无耻地抄袭, 连抄哪儿都忘了.
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Sarasa Mono SC Nerd" :size 14)
      doom-big-font (font-spec :family "Sarasa Mono SC Nerd" :size 20)
      doom-variable-pitch-font (font-spec :family "Monaco" :size 18))
(push "Sarasa Mono SC Nerd" doom-unicode-extra-fonts)
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
#+end_src

** ☯ DONE line-number
默认显示行号
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

** ☯ DONE modeline
一些modeline显示问题, 基本是抄的
#+begin_src emacs-lisp
(use-package doom-modeline
  :config
  ;; (use-package nyan-mode
  ;;   :hook (doom-modeline-mode . nyan-mode)
  ;;   :config
  ;;   (nyan-mode 1)
  ;;   (setq nyan-animate-nyancat t)
  ;;   (setq nyan-wavy-trail t)
  ;;   (setq mode-line-format
  ;;         (list
  ;;          '(:eval (list (nyan-create))))))
  (display-time-mode t)
  :custom
  (doom-modeline-icon (display-graphic-p))
  (doom-modeline-height 40)
  (doom-modeline-bar-width 3)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-modal-icon t)
  (doom-modeline-buffer-encoding nil))
#+end_src

** ☯ DONE DONE posfroame
使用posframe解决显示问题, 例如 [[id:0d79d819-3848-4506-b2b5-5d3f55ee1721][Emacs-rime]] 中的问题
#+begin_src emacs-lisp
(use-package posframe)
#+end_src


* ☯ DONE Frames, Worksapces and windows
** ☯ DONE Frame
转移到另一个frame
#+begin_src emacs-lisp
(map! :leader
      :desc "Other frame"                       "o o" #'other-frame)
#+end_src

|-----------+-------------+-------------------|
| 快捷键    | 命令        | 描述              |
|-----------+-------------+-------------------|
| =Spc o o= | other-frame | 跳转到另一个 frame |
|-----------+-------------+-------------------|

** ☯ DONE Workspace
*** ☯ DONE Savespace
#+begin_src emacs-lisp
(use-package saveplace
  :hook (after-init . save-place-mode))
#+end_src
*** ☯ DONE Workspace selection
#+begin_src emacs-lisp
;; keybindings
(map! :leader
      :desc "Left workspace"                    "TAB ," #'+workspace/switch-left
      :desc "Right workspace"                   "TAB ." #'+workspace/switch-right
      :desc "Switch workspace"                  "TAB w" #'+workspace/switch-to)
#+end_src

|---------+-------------------------+--------------------|
| 快捷键  | 命令                    | 描述               |
|---------+-------------------------+--------------------|
| =TAB ,= | +workspace/switch-left  | 移动到上个 workspac |
| =TAB .= | +workspace/switch-right |                    |
| =TAB w= | +workspace/switch-to    |                    |
|---------+-------------------------+--------------------|

** ☯ DONE Ace-windows
用 ace-windows 来操作窗口
#+begin_src emacs-lisp
(use-package ace-window
  :config
  (setq aw-keys '(?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9))
  :init
  (map! :leader
        :prefix "w"
        :desc "ace-window-select" "a" #'ace-window))
#+end_src

|---------+-------------------+------|
| 快捷键  | 命令              | 描述 |
|---------+-------------------+------|
| Spc w a | ace-window-select | 测试 |
|---------+-------------------+------|


* ☯ DONE Chinese
** ☯ DONE Emacs-rime
:PROPERTIES:
:ID:       0d79d819-3848-4506-b2b5-5d3f55ee1721
:END:
   emacs-china 论坛推荐使用 emacs-rime 包进行中文输入。用后感觉：UI 现代，选词快速，好用。
#+begin_src emacs-lisp
(use-package rime
  :config
  (setq rime-user-data-dir "~/.local/share/fcitx5/rime/")
  (setq rime-posframe-properties
        (list :background-color "#333333"
              :foreground-color "#dcdccc"
              :internal-border-width 10))
  (setq rime-posframe-style 'vertical)
  (setq default-input-method "rime"
        rime-show-candidate 'posframe)
  (map! "<kp-1>" "1"
        "<kp-2>" "2"
        "<kp-3>" "3"
        "<kp-4>" "4"
        "<kp-5>" "5"
        "<kp-6>" "6"
        "<kp-7>" "7"
        "<kp-8>" "8"
        "<kp-9>" "9"
        "<kp-0>" "0")
  :bind
  (:map rime-active-mode-map
  ("<tab>" . 'rime-inline-ascii)
  :map rime-mode-map
  ("C-`" . 'rime-send-keybinding)    ;; <----
  ("M-j" . 'rime-force-enable)))
#+end_src
|--------+---------------------+--------------|
| 快捷键 | 命令                | 描述         |
|--------+---------------------+--------------|
| C-\    | toggle-input-method | 切换输入法   |
| C-:    | rime-inline-ascii   | 使用英文标点 |
|--------+---------------------+--------------|

** ☯ DONE Avy-pinyin
:PROPERTIES:
:ID:       fb83cec2-75f4-4164-a692-2b423736016c
:END:
   利用 ace-pinyin/evil-find-char-pinyin 来快速查找字符, 快速 vim 操作.
#+begin_src emacs-lisp
;; search
(use-package ace-pinyin
  :after evil
  :config
  ;; 允许avy跨窗口搜索
  (setq avy-all-windows t)
  ;; 全局使用ace搜索
  (ace-pinyin-global-mode t))

;; evil-find-char-pinyin
(use-package evil-find-char-pinyin
  :after evil
  :config
  ;;  允许avy跨窗口搜索
  (setq avy-all-windows t)
  ;; 全局使用ace搜索
  (evil-find-char-pinyin-mode t))
#+end_src

* 🎬 TODO Coding
** 🎬 TODO Latex
*** 🎬 TODO forward and inverse search
    向前向后搜索能大幅增加 $\LaTeX$ 的修改速度.
    在 Emacs 中的配置:
#+begin_src emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(setq TeX-view-program-selection '((output-pdf "Okular")))
(setq TeX-source-correlate-mode t)
(setq TeX-source-correlate-start-server t)
(setq TeX-PDF-mode t)
#+end_src

    在 Okular 中的配置:
    Settings:   Editor settings
                    Editor:  Emacs client
                    Command: emacsclient -a emacs --no-wait +%l %f
    使用方法:
    | .tex -> .pdf | 使用命令 TeX-preview (C-c C-v)            |
    | .pdf -> .tex | 在 okular borwser 模式下, Shift+Left Click |

*** 🎬 TODO set engine
    设置 xetex 为基本的 $\LaTeX$ 编译器.
#+begin_src emacs-lisp
(setq TeX-engine 'xetex)
#+end_src

*** CANCELED auto-activating-snippets
- State "CANCELED"   from              [2021-04-13 Tue 22:29] \\
  暂时先取消掉这个
    设置 $\LaTeX$ 的 yasnippet
#+begin_src emacs-lisp
;(use-package latex-auto-activating-snippets)
#+end_src

#+begin_src emacs-lisp
;(use-package auto-activating-snippets
;  :hook (latex-mode . latex-auto-activating-snippets-mode))
#+end_src

*** ☯ DONE cdlatex
    设置快速输入数学符号 cdlatex
#+begin_src emacs-lisp
(use-package cdlatex
  :hook ((LaTeX-mode . turn-on-cdlatex)
         (org-mode . turn-on-org-cdlatex))
  :config
  (setq cdlatex-math-modify-alist
        '(( ?s  "\\mathscr" nil t nil nil )
          ( ?b  nil         nil t nil nil )
          ( ?/  "\\slashed" nil t nil nil ))))
#+end_src

*** 🎬 TODO mathpix.el 发布前要隐藏id和key

#+begin_src emacs-lisp
(add-to-list 'load-path mathpix-dir)
(require 'mathpix)
(map! "C-x m" #'mathpix-screenshot)
#+end_src

#+begin_src emacs-lisp
(setq      mathpix-screenshot-method "scrot -s %s")
#+end_src
*** 🎬 TODO COMMENT awesome pair
不知道有啥用
#+begin_src emacs-lisp
(require 'awesome-pair)
(dolist (hook (list
               'c-mode-common-hook
               'c-mode-hook
               'c++-mode-hook
               'java-mode-hook
               'haskell-mode-hook
               'latex-mode-hook
               'emacs-lisp-mode-hook
               'lisp-interaction-mode-hook
               'lisp-mode-hook
               'maxima-mode-hook
               'ielm-mode-hook
               'sh-mode-hook
               'makefile-gmake-mode-hook
               'php-mode-hook
               'python-mode-hook
               'js-mode-hook
               'go-mode-hook
               'qml-mode-hook
               'jade-mode-hook
               'css-mode-hook
               'ruby-mode-hook
               'coffee-mode-hook
               'rust-mode-hook
               'qmake-mode-hook
               'lua-mode-hook
               'swift-mode-hook
               'minibuffer-inactive-mode-hook
               ))
  (add-hook hook '(lambda () (awesome-pair-mode 1))))

(define-key awesome-pair-mode-map (kbd "(") 'awesome-pair-open-round)
(define-key awesome-pair-mode-map (kbd "[") 'awesome-pair-open-bracket)
(define-key awesome-pair-mode-map (kbd "{") 'awesome-pair-open-curly)
(define-key awesome-pair-mode-map (kbd ")") 'awesome-pair-close-round)
(define-key awesome-pair-mode-map (kbd "]") 'awesome-pair-close-bracket)
(define-key awesome-pair-mode-map (kbd "}") 'awesome-pair-close-curly)
(define-key awesome-pair-mode-map (kbd "%") 'awesome-pair-match-paren)
(define-key awesome-pair-mode-map (kbd "\"") 'awesome-pair-double-quote)
(define-key awesome-pair-mode-map (kbd "M-o") 'awesome-pair-backward-delete)
(define-key awesome-pair-mode-map (kbd "C-k") 'awesome-pair-kill)
(define-key awesome-pair-mode-map (kbd "M-\"") 'awesome-pair-wrap-double-quote)
(define-key awesome-pair-mode-map (kbd "M-[") 'awesome-pair-wrap-bracket)
(define-key awesome-pair-mode-map (kbd "M-{") 'awesome-pair-wrap-curly)
(define-key awesome-pair-mode-map (kbd "M-(") 'awesome-pair-wrap-round)
(define-key awesome-pair-mode-map (kbd "M-)") 'awesome-pair-unwrap)
(define-key awesome-pair-mode-map (kbd "M-p") 'awesome-pair-jump-right)
(define-key awesome-pair-mode-map (kbd "M-n") 'awesome-pair-jump-left)
(define-key awesome-pair-mode-map (kbd "M-:") 'awesome-pair-jump-out-pair-and-newline)
#+end_src
** 🎬 TODO COMMENT maple-edit
不知道有啥用
#+begin_src emacs-lisp
(use-package maple-iedit
  :ensure nil
  :commands (maple-iedit-match-all maple-iedit-match-next maple-iedit-match-previous)
  :config
  (setq maple-iedit-ignore-case t)

  (defhydra maple/iedit ()
    ("n" maple-iedit-match-next "next")
    ("t" maple-iedit-skip-and-match-next "skip and next")
    ("T" maple-iedit-skip-and-match-previous "skip and previous")
    ("p" maple-iedit-match-previous "prev"))
  :bind (:map evil-visual-state-map
              ("n" . maple/iedit/body)
              ("C-n" . maple-iedit-match-next)
              ("C-p" . maple-iedit-match-previous)
              ("C-t" . maple-iedit-skip-and-match-next)))
#+end_src
** evil-visual-replace
#+begin_src emacs-lisp
(use-package! evil-visual-replace
  :init
  (evil-visual-replace-visual-bindings))
#+end_src

** 🎬 TODO Smartparens
   修改成 leader 键
#+begin_src emacs-lisp
;; smartparens
(use-package smartparens
  :init
  (map! :map smartparens-mode-map
        "C-M-f" #'sp-forward-sexp
        "C-M-b" #'sp-backward-sexp
        "C-M-u" #'sp-backward-up-sexp
        "C-M-d" #'sp-down-sexp
        "C-M-p" #'sp-backward-down-sexp
        "C-M-n" #'sp-up-sexp
        "C-M-s" #'sp-splice-sexp
        "C-)" #'sp-forward-slurp-sexp
        "C-}" #'sp-forward-barf-sexp
        "C-(" #'sp-backward-slurp-sexp
        "C-M-)" #'sp-backward-slurp-sexp
        "C-M-)" #'sp-backward-barf-sexp))
#+end_src

** 🎬 TODO COMMENT Poporg
   将文章里面的注释, 用 org-mode 的形式来修改.
#+begin_src emacs-lisp
(use-package poporg
  :bind (("C-c '" . poporg-dwim)))
#+end_src

|--------+-------------+------------|
| 快捷键 | 命令        | 描述       |
|--------+-------------+------------|
| C-c '  | poporg-dwim | 开启 poporg |
|--------+-------------+------------|

** 🎬 TODO Hl-todo
#+begin_src emacs-lisp
;; hl-todo-mode
(use-package hl-todo
  :init
  (setq hl-todo-keyword-faces
        '(("TODO"    . 'hl-todo-TODO)
          ("ADDCONT" . 'hl-todo-ADDCONT)
          ("REF"     . 'hl-todo-REF)
          ("MODCONT" . 'hl-todo-MODCONT)
          ("FIXME"   . 'hl-todo-FIXME)
          ("XXX"     . 'hl-todo-XXX)
          ("DONE"    . 'hl-todo-DONE)))
  (defface hl-todo-TODO    '((t :background "#00FF00"  :foreground "#FF0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-ADDCONT '((t :background "#00FF00"  :foreground "#FF0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-REF      '((t :background "#00FF00" :foreground "#ff0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-FIXME   '((t :background "#0000FF"  :foreground "#FF0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-MODCONT  '((t :background "#0000FF" :foreground "#FF0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-XXX      '((t :background "#000000" :foreground "#FFFFFF" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-DONE    '((t :background "#00FF00"  :foreground "#00FF00" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (map! :leader
        :prefix "c"
        :desc "show comment tags" "g" #'hl-todo-mode))
#+end_src

|---------+--------------|
| keyword |              |
|---------+--------------|
| TODO    | TODO         |
| ADDCONT | 增加表述     |
| REF     | 修改引用材料 |
| FIXME   | 修改本段代码 |
| MODCONT | 修改本段表述 |
| XXX     | 标明怪事     |
| DONE    | 完成         |
|---------+--------------|


|-----------+--------------+----------------|
| 快捷键    | 命令         | 描述           |
|-----------+--------------+----------------|
| =SPC c g= | hl-todo-mode | 开启 todo 特征 |
|-----------+--------------+----------------|


#+begin_src emacs-lisp
(map! :leader
      :desc "ivy magit todo"             "g i" #'ivy-magit-todos)
#+end_src

|------------+-----------------+----------------|
| 快捷键     | 命令            | 描述           |
|------------+-----------------+----------------|
| =SPC g i = | ivy-magit-todos | 展示每个关键词 |
|------------+-----------------+----------------|
** ☯ DONE Yasnippet
一些快速输入模板
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (add-to-list 'yas-snippet-dirs "~/.doom.d/snippets"))
#+end_src

#+begin_src emacs-lisp
(use-package yasnippet-snippets)
#+end_src

#+begin_src emacs-lisp
(use-package ivy-yasnippet)
#+end_src
** ☯ DONE Hungry delete
快速删除太多的空格/制表符
#+begin_src emacs-lisp
(use-package hungry-delete
  :config
  (add-hook 'after-init-hook #'global-hungry-delete-mode))
#+end_src

** ☯ DONE Company-poseframe
不知道有什么用, 拿来做company的显示?
#+begin_src emacs-lisp
(use-package company-posframe
  :hook (company-mode . company-posframe-mode))
#+end_src

** ☯ DONE So-long
把太长的行用 ... 来显示
#+begin_src emacs-lisp
(use-package so-long
  :config (global-so-long-mode 1))
#+end_src
** ☯ DONE Hide-show-mode
显示-隐藏 code blocks
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map  ("e" . "edit")
       (:prefix-map ("h" . "hide code")
        :desc "hide block"               "b" #'hs-hide-block
        :desc "hide level"               "l" #'hs-hide-level
        :desc "hide all"                 "a" #'hs-hide-all)
       (:prefix-map ("s" . "show code")
        :desc "show block"               "b" #'hs-show-block
        :desc "show level"               "l" #'hs-show-level
        :desc "show all"                 "a" #'hs-show-all )))
#+end_src

#+RESULTS:
: hs-show-all

** 🎬 TODO COMMENT Whitespace
不知道是啥
#+begin_src emacs-lisp
(use-package whitespace
  :hook ((prog-mode markdown-mode conf-mode latex-mode ) . whitespace-mode)
  :config
  (setq whitespace-style '(face trailing)))
#+end_src

** 🎬 TODO COMMENT Autorevert
不知道是啥
#+begin_src emacs-lisp
(use-package autorevert
  :hook (after-init . global-auto-revert-mode))
#+end_src
** ☯ DONE Commentaries
用来快速注释文本
#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-\\") (quote comment-line))
#+end_src
** 🎬 TODO COMMENT White-room
不知道是啥
#+begin_src emacs-lisp
(use-package writeroom-mode
  :hook
  (w3m-mode . writeroom-mode)
  :config
  (advice-add 'text-scale-adjust :after
              #'visual-fill-column-adjust)
  ;;https://github.com/joostkremers/writeroom-mode#fullscreen-effect
  (setq writeroom-fullscreen-effect 'maximized))
#+end_src
** ☯ DONE grugru
一个有趣的文本更换器 [[https://github.com/ROCKTAKEY/grugru][ROCKTAKEY/grugru]]
#+begin_src emacs-lisp
(use-package grugru
  :config (grugru-default-setup))
#+end_src

#+RESULTS:
** 🎬 TODO undo-fu
还不会用的, 类似undo-tree的东西, 而且有点复杂...
#+begin_src emacs-lisp
(use-package undo-fu
  :after-call doom-switch-buffer after-find-file
  :init
  (after! undo-tree
    (global-undo-tree-mode -1))
  :config
  ;; Store more undo history to prevent loss of data
  (setq undo-limit 400000
        undo-strong-limit 3000000
        undo-outer-limit 3000000)

  (define-minor-mode undo-fu-mode
    "Enables `undo-fu' for the current session."
    :keymap (let ((map (make-sparse-keymap)))
              (define-key map [remap undo] #'undo-fu-only-undo)
              (define-key map [remap redo] #'undo-fu-only-redo)
              (define-key map (kbd "C-_")     #'undo-fu-only-undo)
              (define-key map (kbd "M-_")     #'undo-fu-only-redo)
              (define-key map (kbd "C-M-_")   #'undo-fu-only-redo-all)
              (define-key map (kbd "C-x r u") #'undo-fu-session-save)
              (define-key map (kbd "C-x r U") #'undo-fu-session-recover)
              map)
    :init-value nil
    :global t)
  (undo-fu-mode +1))

(map! :leader
      (:prefix "e"
       :desc "undo-fu-only-undo"          "u"      #'undo-fu-only-undo
       :desc "undo-fu-only-redo"          "r"      #'undo-fu-only-redo
       :desc "undo-fu-only-redo-allow"    "a"      #'undo-fu-only-redo-all
       :desc "undo-fu-session-save"       "e"      #'undo-fu-session-save
       :desc "undo-fu-session-recover"    "d"      #'undo-fu-session-recover ))

(use-package undo-fu-session
  :hook (undo-fu-mode . global-undo-fu-session-mode)
  :preface
  (setq undo-fu-session-directory (concat doom-cache-dir "undo-fu-session/")
        undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))

  ;; HACK We avoid `:config' here because `use-package's `:after' complicates
  ;;      the load order of a package's `:config' block and makes it impossible
  ;;      for the user to override its settings with merely `after!' (or
  ;;      `eval-after-load'). See jwiegley/use-package#829.
  (after! undo-fu-session
    ;; HACK Use the faster zstd to compress undo files instead of gzip
    (when (executable-find "zstd")
      (defadvice! doom--undo-fu-session-use-zstd-a (filename)
        :filter-return #'undo-fu-session--make-file-name
        (if undo-fu-session-compression
            (concat (file-name-sans-extension filename) ".zst")
          filename)))))
#+end_src
** ☯ DONE which-key
展示使用的 key-bindings
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode))
#+end_src

* 🎬 TODO org-mode faces and operations
:PROPERTIES:
:ID:       c657f8f4-abbc-4d83-8198-822910968303
:END:
** ☯ DONE heading-level-face
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.1)))))
#+end_src
** ☯ DONE org-super-star

#+begin_src emacs-lisp
(use-package org-superstar
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (setq org-superstar-headline-bullets-list '("☰" "☷" "☵" "☲"  "☳" "☴"  "☶"  "☱" )))
#+end_src

** ☯ DONE ellipsis at the end of heading

#+begin_src emacs-lisp
(setq org-ellipsis " ··· ")
#+end_src
** ☯ DONE bold/delete/emph
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src
** 🎬 TODO COMMENT valign formate
#+begin_src emacs-lisp
(use-package valign
  :init
  (require 'valign)
  :hook
  ('org-mode . #'valign-mode))
#+end_src
** ☯ DONE org-heading and item
用来更改heading到标题
#+begin_src emacs-lisp
(map! :leader
      (:prefix "m"
       (:prefix-map ("m" . "modify")
        :desc "item or text"             "i" #'org-toggle-item
        :desc "heading or text"          "h" #'org-toggle-heading )))
#+end_src

** ☯ DONE evil org-mode
保证evil-mode 可以用在org-mode里面

#+begin_src emacs-lisp
(after! org
  (add-hook 'org-mode-hook (lambda () (evil-org-mode 1))))
#+end_src

** ☯ DONE org-download
Shamelessly copy [[https://github.com/jethrokuan/dots/edit/master/.doom.d/config.el][jethrokuan/dots/doom.d/config.el]]
#+begin_src emacs-lisp :tangle yes
(use-package! org-download
  :commands
  org-download-dnd
  org-download-yank
  org-download-screenshot
  org-download-dnd-base64
  :init
  (map! :map org-mode-map
        "s-Y" #'org-download-screenshot
        "s-y" #'org-download-yank)
  (pushnew! dnd-protocol-alist
            '("^\\(?:https?\\|ftp\\|file\\|nfs\\):" . org-download-dnd)
            '("^data:" . org-download-dnd-base64))
  (advice-add #'org-download-enable :override #'ignore)
  :config
  (defun +org/org-download-method (link)
    (let* ((filename
            (file-name-nondirectory
             (car (url-path-and-query
                   (url-generic-parse-url link)))))
           ;; Create folder name with current buffer name, and place in root dir
           (dirname (concat "./images/"
                            (replace-regexp-in-string " " "_"
                                                      (downcase (file-name-base buffer-file-name))))))
      (make-directory dirname t)
      (expand-file-name filename dirname)))
  :config
  (setq org-download-screenshot-method
        (cond (IS-MAC "screencapture -i %s")
              (IS-LINUX
               (cond ((executable-find "maim")  "maim -u -s %s")
                     ((executable-find "scrot") "scrot -s %s")))))
  (setq org-download-method '+org/org-download-method))
#+end_src

* 🎬 TODO org-mode and workflow
:PROPERTIES:
:ID:       63085241-dd26-4300-9f13-1ad3ae3bfe18
:END:
** 🎬 TODO files
jump o inbox/next quicker
#+begin_src emacs-lisp
(defun py/jump-to-inbox ()
  (interactive)
  (find-file py/inbox))
#+end_src

#+begin_src emacs-lisp
(defun py/jump-to-next()
  (interactive)
  (find-file py/next))
#+end_src

#+begin_src emacs-lisp
(map! :leader
      :desc "jump to inbox"             "n i" #'py/jump-to-inbox
      :desc "jump to next"              "n N" #'py/jump-to-next)
#+end_src

#+RESULTS:
: py/jump-to-inbox

** task managerment
Still wanna to use a collect and conquer (C&C) method to manage my tasks.
*Capture* my random idea into the =inbox.org= file;
*Refile* the captured idea to =project= =next.org= =things= =arts= =braindump= files or directories.
*** 🎬 TODO capture
:PROPERTIES:
:ID:       feb39079-1ca8-4f92-8809-9cc77574a64b
:END:
keymap

#+begin_src emacs-lisp
(after! org
  (map! :leader :desc "org-capture"           "x" #'org-capture))
#+end_src

doct
#+begin_src emacs-lisp
(use-package doct
  :ensure t
  ;;recommended: defer until calling doct
  :commands (doct))
#+end_src

#+begin_src emacs-lisp
(setq org-capture-templates
      (doct '(
              ;;Standard inbox inbox
              ("Inbox"
               :keys "i"
               :file py/inbox
               :template ("* %{todo-state} %?"
                          ":PROPERTIES:"
                          ":INIT:       %U"
                          ":END:")
               :todo-state "🎬 TODO"
               :create-id t)
              ;;Metacognition
              ("Metacog"
               :keys "m"
               :prepend t
               :template ("* %{todo-state} %?"
                          ":PROPERTIES:"
                          ":INIT:       %U"
                          ":END:")
               :children (("MetaNotes"
                           :keys "n"
                           :type entry
                           :todo-state "🎬 TODO"
                           :function (lambda () (jethro/olp-current-buffer "Metacog" "Notes")))
                          ("MetaQuestions"
                           :keys "q"
                           :type entry
                           :todo-state "🎬 TODO"
                           :function (lambda () (jethro/olp-current-buffer "Metacog" "Questions")))
                          ("MetaTodos"
                           :keys "t"
                           :type entry
                           :todo-state "🎬 TODO"
                           :function (lambda () (jethro/olp-current-buffer "Metacog" "Todos")))))
              ("Bipolar"
               :keys "b"
               :prepend t
               :children (("服药情况"
                           :keys "1"
                           :type table-line
                           :file py/bipolar
                           :headline "服药情况"
                           :table-line-pos "I-1"
                           :template ("| %t | %^{碳酸锂正常服用?} | %^{拉莫三嗪正常服用?} | %^{盐酸普拉克索正常服用?} | %^{唑吡坦正常服用？} |"))
                          ("睡眠情况"
                           :keys "2"
                           :type table-line
                           :file py/bipolar
                           :headline "睡眠情况"
                           :table-line-pos "I-1"
                           :template ("| %t | %^{晚上睡了多久?} | %^{中午睡了多久?} |"))
                          ("急躁&焦虑情况"
                           :keys "3"
                           :type table-line
                           :file py/bipolar
                           :headline "急躁&焦虑情况"
                           :table-line-pos "I-1"
                           :template ("| %t | %^{备注} | %^{急躁等级 (1-10)} | %^{急躁内容} | %^{焦虑等级} | %^{焦虑内容} |"))
                          ("工作内容记录"
                           :keys "4"
                           :type table-line
                           :file py/bipolar
                           :headline "工作内容记录"
                           :table-line-pos "I-1"
                           :template ("| %t | %^{工作内容1} | %^{时长} | %^{工作内容2} | %^{时长} | %^{工作内容3} | %^{时长} | %^{工作内容4} | %^{时长} | "))
                          ("抑郁&躁狂记录"
                           :keys "5"
                           :type table-line
                           :file py/bipolar
                           :headline "抑郁&躁狂记录"
                           :table-line-pos "I-1"
                           :template ("| %t | %^{抑郁程度} | %^{躁狂程度} |"))
                          ("精神状态&幻觉&怪诞想法记录"
                           :keys "6"
                           :type table-line
                           :file py/bipolar
                           :headline "精神状态 幻觉 怪诞想法记录"
                           :table-line-pos "I-1"
                           :template ("| %t | %^{精神状态(随便说说)} | %^{幻觉?} | %^{怪诞想法} |"))
                          ("快乐事件记录"
                           :keys "7"
                           :type table-line
                           :file py/bipolar
                           :headline "快乐事件记录"
                           :table-line-pos "I-1"
                           :template ("| %t | %^{内容1} | %^{内容2} | %^{内容3} |")))))))
#+end_src

Shameless copied functions
#+begin_src emacs-lisp
(defun jethro/find-or-create-olp (path &optional this-buffer)
  "Return a marker pointing to the entry at outline path OLP.
If anything goes wrong, throw an error, and if you need to do
something based on this error, you can catch it with
`condition-case'.
If THIS-BUFFER is set, the outline path does not contain a file,
only headings."
  (let* ((file (pop path))
         (level 1)
         (lmin 1)
         (lmax 1)
         (start (point-min))
         (end (point-max))
         found flevel)
    (unless (derived-mode-p 'org-mode)
      (error "Buffer %s needs to be in Org mode" buffer))
    (org-with-wide-buffer
     (goto-char start)
     (dolist (heading path)
       (let ((re (format org-complex-heading-regexp-format
                         (regexp-quote heading)))
             (cnt 0))
         (while (re-search-forward re end t)
           (setq level (- (match-end 1) (match-beginning 1)))
           (when (and (>= level lmin) (<= level lmax))
             (setq found (match-beginning 0) flevel level cnt (1+ cnt))))
         (when (> cnt 1)
           (error "Heading not unique on level %d: %s" lmax heading))
         (when (= cnt 0)
           ;; Create heading if it doesn't exist
           (goto-char end)
           (unless (bolp) (newline))
           (org-insert-heading nil nil t)
           (unless (= lmax 1) (org-do-demote))
           (insert heading)
           (setq end (point))
           (goto-char start)
           (while (re-search-forward re end t)
             (setq level (- (match-end 1) (match-beginning 1)))
             (when (and (>= level lmin) (<= level lmax))
               (setq found (match-beginning 0) flevel level cnt (1+ cnt))))))
       (goto-char found)
       (setq lmin (1+ flevel) lmax (+ lmin (if org-odd-levels-only 1 0)))
       (setq start found
             end (save-excursion (org-end-of-subtree t t))))
     (point-marker))))

(defun jethro/olp-current-buffer (&rest outline-path)
  "Find the OUTLINE-PATH of the current buffer."
  (let ((m (jethro/find-or-create-olp (cons (buffer-file-name) outline-path))))
    (set-buffer (marker-buffer m))
    (org-capture-put-target-region-and-position)
    (widen)
    (goto-char m)
    (set-marker m nil)))

#+end_src
*** 🎬 TODO refile
:PROPERTIES:
:ID:       dd1f4fcc-c04c-45c1-bc6c-7550ff84bba0
:END:
Inspried by [[https://emacs.stackexchange.com/questions/24976/org-mode-can-you-set-up-context-dependent-refile-targets][context-dependent org-refile]] I should imporve refile process.
**** initial
#+begin_src emacs-lisp
(setq org-refile-targets nil)
#+end_src

#+RESULTS:

**** internal
#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(nil :maxlevel . 9))
#+end_src

**** one-off
#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(py/next :maxlevel . 1))
#+end_src

**** arts
#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(py/arts :maxlevel . 1))
#+end_src
**** braindump
#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(py/braindump-inbox :maxlevel . 1))
#+end_src
**** project
#+begin_src emacs-lisp
(setq py/project-files
      (directory-files-recursively py/project-dir (rx ".org" eos)))
#+end_src

#+RESULTS:
| ~/Dropbox/.org/things/project/chemotaxis.org |

#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(py/project-files :maxlevel . 1))
#+end_src

**** thoughts
#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(py/thoughts :maxlevel . 1))
#+end_src

**** arts
#+begin_src emacs-lisp
(add-to-list 'org-refile-targets '(py/arts :maxlevel . 1))
#+end_src
** 🎬 TODO in-file structures
*** todo keyword
#+begin_src emacs-lisp
(setq org-todo-keywords
        '((sequence
           "🎬 TODO(t)"  ; A task that needs doing & is ready to do
           "🗡 INPROCESS(s)"  ; A task that is in progress
           "📌 WAITING(w)"  ; Something is holding up this task; or it is paused
           "⏰ LEAVETO(l)"  ; entry delivered to others
           "⤴ REFILE?(r)"   ;might
           "|"
           "💡 NEXT(n)"
           "☯ DONE(d)"  ; Task successfully completed
           "CANCELED(c@)") ; Task was cancelled, aborted or is no longer applicable
           )) ; Task was completed
#+end_src

*** todo keyword faces
:PROPERTIES:
:ID:       e5b8a7ba-e9f6-4f3f-99d7-1bdd289b1ae2
:INIT:     [2021-01-12 Tue 08:04]
:END:
#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      (quote (("🎬 TODO" :foreground "red" :weight bold)
              ("🗡 INPROCESS" :foreground "forest green" :weight bold)
              ("📌 WAITING" :foreground "orange" :weight bold)
              ("⏰ LEAVETO" :foreground "forest green" :weight bold)
              ("⤴ REFILE" :foreground "magenta" :weight bold)
              ("💡 NEXT" :foreground "blue" :weight bold)
              ("☯ DONE" :foreground "forest green" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              )))
#+end_src

#+RESULTS:
| 🎬 TODO     | :foreground | red          | :weight | bold |
| 🗡 INPROCESS | :foreground | forest green | :weight | bold |
| 📌 WAITING  | :foreground | orange       | :weight | bold |
| ⏰ LEAVETO  | :foreground | forest green | :weight | bold |
| ⤴ REFILE    | :foreground | magenta      | :weight | bold |
| 💡 NEXT     | :foreground | blue         | :weight | bold |
| ☯ DONE      | :foreground | forest green | :weight | bold |
| CANCELLED   | :foreground | forest green | :weight | bold |


#+caption:
| 🎬 TODO     | :foreground | red          | :weight | bold |
| 🗡 INPROCESS | :foreground | forest green | :weight | bold |
| 📌 WAITING  | :foreground | orange       | :weight | bold |
| ⏰ LEAVETO  | :foreground | forest green | :weight | bold |
| ⤴ REFILE    | :foreground | magenta      | :weight | bold |
| 💡 NEXT     | :foreground | blue         | :weight | bold |
| ☯ DONE      | :foreground | forest green | :weight | bold |
| CANCELLED   | :foreground | forest green | :weight | bold |

*** tags
keymap: =Spc m q= org-set-tag-command
#+begin_src emacs-lisp
(setq org-tag-alist
      '(("@errand" . ?e)
        ("@office" . ?o)
        ("@home" . ?h)))
#+end_src

*** properties
**** id
modify-id operation
notes-id operations
#+begin_src emacs-lisp
(map! :leader
      :prefix "n"
      (:prefix-map              ("I" . "id")
       :desc "id-goto"          "g" #'org-id-goto
       :desc "id-copy"          "c" #'org-id-copy))
#+end_src

**** initial-time
***** captgure: use the templates
***** normal:
:PROPERTIES:
:ID:       e37fa0af-d194-471d-9f67-1803f1e6be44
:INIT:     [2021-01-11 Mon 23:35]
:LOCATION: dod
:END:

keymaps:
#+begin_src emacs-lisp
(map! :leader
      :desc "set initial property" "mdi" #'org-set-property-initial-time
      :desc "set initial property" "mcs" #'org-set-property-initial-time)
#+end_src

****** works
:PROPERTIES:
:LOCATION: dod
:END:
Time formate
#+begin_src emacs-lisp
(defvar org-initial-current-time-format "[%Y-%m-%d %a %H:%M]"
  "Format of date to insert with `insert-current-date-time' func
See help of `format-time-string' for possible replacements")
#+end_src

#+RESULTS:
: org-initial-current-time-format

#+begin_src emacs-lisp
(defun org-set-property-initial-time ()
  "Set the initial time property of entries in orgmode as\n
:INIT:    [YEAR-MONTH-DAY WEEKDAY HOUR:MIN]\n
when you realize it IS initalized."
  (interactive)
  (if (member "INIT" (org-entry-properties nil 'standard))
      ()
   (org-set-property "INIT" (format-time-string org-initial-current-time-format (current-time)))
    ))
#+end_src

#+RESULTS:
: org-set-property-initial-time

**** schedual/deadline
org-schedual
org-deadline
**** effort
:LOGBOOK:
CLOCK: [2021-01-11 Mon 07:13]--[2021-01-11 Mon 07:14] =>  0:01
:END:
org-set-effort

#+begin_src emacs-lisp
(map! :leader
      (:prefix "m"
       (:prefix "c"
        :desc "set effort"    "e"     #'org-set-effort)))
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-global-properties
      '("Effort_ALL". "0:05 0:15 0:30 1:00 1:30 2:00 3:00 4:00"))
#+end_src

**** clock-sum
:LOGBOOK:
CLOCK: [2021-01-11 Mon 07:14]--[2021-01-11 Mon 07:14] =>  0:00
:END:
clock-in
clock-in-last-clock
clock-out
clock-time-report
**** pomodoro
use the basic org-pomodoro
** 🎬 TODO knowledge managerment
*** COMMENT notdeft -- file manager
:PROPERTIES:
:ID:       17320e65-cf37-4bfa-91ec-fea2af3308af
:END:
#+begin_src emacs-lisp
(use-package notdeft
  :config
  (setq notdeft-extension "org")
  (setq notdeft-directories '("~/Dropbox/.org/"))
  (setq notdeft-xapian-program "/home/py06/.local/share/notdeft-xapian")
  (map! :leader
        (:prefix "d"
         :desc   "notdeft"      "d" #'notdeft ))
  :bind (:map notdeft-mode-map
         ("C-q" . notdeft-quit)
         ("C-r" . notdeft-refresh)))
#+end_src

#+begin_src emacs-lisp
(setenv "XAPIAN_CJK_NGRAM" "1")
#+end_src

#+begin_src emacs-lisp
(map! :leader
      (:prefix "n"
       :desc "notdeft" "n" #'notdeft ))
#+end_src

#+RESULTS:
: notdeft
*** org-roam -- knowledge base
**** directories, files and other basic settings
#+begin_src emacs-lisp
(use-package org-roam
  :commands (org-roam-insert org-roam-find-file org-roam-switch-to-buffer org-roam)
  :hook
  (after-init . org-roam-mode))
#+end_src

#+begin_src emacs-lisp
(setq   org-roam-directory              py/braindump-dir
        org-roam-index-file             py/braindump-index
        org-roam-dailies-directory      "dailies/"
        org-roam-db-gc-threshold        most-positive-fixnum
        org-roam-graph-exclude-matcher  "private"
        org-roam-tag-sources            '(prop last-directory)
        org-id-link-to-org-use-id t)
#+end_src
**** keymaps
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("r" . "roam")
       :desc "Switch to buffer"              "b" #'org-roam-switch-to-buffer
       (:prefix ("d" . "by date")
        :desc "Arbitrary date" "d" #'org-roam-dailies-find-date
        :desc "Today"          "t" #'org-roam-dailies-find-today
        :desc "Tomorrow"       "m" #'org-roam-dailies-find-tomorrow
       :desc "Yesterday"       "y" #'org-roam-dailies-find-yesterday)
       :desc "Find file"                     "f" #'org-roam-find-file
       :desc "Show graph"                    "g" #'org-roam-graph
       :desc "Insert new text"               "i" #'org-roam-insert
       :desc "Insert selected text"          "I" #'org-roam-insert-immediate
       :desc "Jump to index"                 "j" #'org-roam-jump-to-index
       :desc "Roam buffer"                   "r" #'org-roam
       :desc "Org Roam Capture"              "x" #'org-roam-capture))
#+end_src

#+RESULTS:
: org-roam-capture

**** roam-capture
:PROPERTIES:
:ID:       9bc394e5-f10a-4e4a-8363-79389f81156a
:END:
***** roam-protocol
:PROPERTIES:
:ID:       423d963d-3149-4cb9-8386-ec2e61e16454
:END:
#+begin_src emacs-lisp
(use-package org-roam-protocol
  :after org-protocol)
#+end_src

***** roam-cpature template
#+begin_src emacs-lisp
(setq org-roam-capture-templates
             ;; literally
      '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           :head "#+title: ${title}\n"
           :unnarrowed t)))
;; org-roam-capture-immediate
(setq org-roam-capture-immediate-template
             ;; default
             '("d" "default" plain (function org-roam--capture-get-point)
               "%?"
               :file-name "${slug}"
               :head "#+title: ${title}\n"
               :unnarrowed t))
#+end_src
***** roam-capture-ref-templates
#+begin_src emacs-lisp
(setq org-roam-capture-ref-templates nil)
(add-to-list 'org-roam-capture-ref-templates
             '("r" "ref" plain (function org-roam-capture--get-point)
               ""
               :file-name "${slug}"
               :head "#+title: ${title}\n#+roam_key: ${ref}\n"
               :unnarrowed t))
(add-to-list 'org-roam-capture-ref-templates
             '("a" "Annotation" plain (function org-roam-capture--get-point)
               "%U \n${body}\n"
               :file-name "${slug}"
               :head "#+title: ${title}\n#+roam_key: ${ref}\n#+roam_alias:\n"
               :immediate-finish t
               :unnarrowed t))
#+end_src

#+RESULTS:
| a | Annotation | plain | #'org-roam-capture--get-point | %U |

**** roam-server
#+begin_src emacs-lisp
(use-package org-roam-server
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 9090
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src

** 🎬 TODO agenda customization
We discuss different agendas here
*** super-agenda
#+begin_src emacs-lisp
(use-package org-super-agenda
:config
(add-hook! 'after-init-hook 'org-super-agenda-mode)
(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-include-diary nil
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t)
(setq org-columns-default-format
      "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)"))
#+end_src

*** agenda

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      `(("b" "BrainDump"
         ((todo "🎬 TODO|🗡 INPROCESS"
                ((org-agenda-overriding-header "To Refile")
                 (org-agenda-files '(,(expand-file-name py/braindump-inbox)))))
          (todo "🎬 TODO|🗡 INPROCESS"
                ((org-agenda-overriding-header "To Detail")
                 (org-agenda-files (directory-files-recursively py/braindump-dir (rx ".org" eos)))))
          (todo "🎬 TODO|🗡 INPROCESS"
                ((org-agenda-overriding-header "Arts, To Refile")
                 (org-agenda-files '(,(expand-file-name py/arts)))))
          (todo "🎬 TODO|🗡 INPROCESS"
                ((org-agenda-overriding-header "Arts, To Detail")
                 (org-agenda-files (directory-files-recursively py/arts-dir (rx ".org" eos)))))))
        ("p" "Pei's Agenda"
         ((alltodo "" ((org-agenda-overriding-header "To Refile")
                       (org-agenda-files '(,(expand-file-name py/inbox)))))
          (alltodo "" ((org-agenda-overriding-header "One-off-task" )
                       (org-agenda-files '(,(expand-file-name py/next )))))
          (agenda "" ((org-agenda-span 3)
                      (org-agenda-start-day "-1d")
                      (org-agenda-files (directory-files-recursively py/project-dir (rx ".org" eos)))
                      (org-super-agenda-groups
                       '((:name "Schedual"
                                :time-grid t
                                :date today
                                :scheduled today
                                :order 1)
                         (:name "Deadline"
                                :time-grid t
                                :date today
                                :deadline today
                                :order 2)))))
          ))))
#+end_src

** COMMENT pdf annotation
*** org-noter
#+begin_src emacs-lisp
(use-package org-noter
  :config
  ;; Your org-noter config ........
  (require 'org-noter-pdftools))
#+end_src
*** org-pdftools
#+begin_src emacs-lisp
(use-package org-pdftools
  :hook (org-mode . org-pdftools-setup-link))
#+end_src
*** org-noter-pdf-tools
**** code
#+begin_src emacs-lisp
(use-package org-noter-pdftools
  :after org-noter
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive "P")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freestyle-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    "When opening a session with this document, go to the current location.
With a prefix ARG, remove start location."
    (interactive "P")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src
**** usage
- select a pdf file, use =org-noter= to open an related org-file
- use =org-ref-creat-skelonton= to import toc or outline
- use =org-noter-sync-*= to sync pdf-docview and org-mode
- use =org-noter-insert-note= to insert note while your org-noter-sync- is buffering
  + when the org-file is synced,

** COMMENT org-mode for bipolar log

*** 设置
:PROPERTIES:
:ID:       d356b6cd-7ab7-4698-aec5-5d48ca257bf5
:END:

#+begin_src emacs-lisp
(add-to-list 'org-capture-templates '("b" "Bipolar"))
#+end_src

*** 服药情况
:PROPERTIES:
:ID:       cc188716-00ee-4357-b38c-dd40f9e8cffa
:END:

| 记录日期 | 碳酸锂 | 拉莫三嗪 | 盐酸普拉克索 | 酒石酸唑吡坦 |

#+begin_src emacs-lisp
(add-to-list 'org-capture-templates
             '("b1"
               "服药情况"
               table-line
               (file+headline py/bipolar "服药情况")
               "| %t | %^{碳酸锂正常服用？} | %^{拉莫三嗪正常服用？} | %^{盐酸普拉克索正常服用？} | %^{唑吡坦正常服用？} |"))
#+end_src

*** 睡眠情况

| 记录日期 | 睡眠时长·夜 | 睡眠时长·午 |

#+begin_src emacs-lisp
(add-to-list 'org-capture-templates
             '("b2"
               "睡眠情况"
               table-line
               (file+headline py/bipolar "睡眠情况")
               "| %t | %^{晚上睡了多久？} | %^{中午睡了多久？} |"))
#+end_src

*** 急躁&焦虑情况

| 记录日期 | 心境表格备注 | 急躁等级 | 急躁内容 | 焦虑等级 | 焦虑内容 |

#+begin_src emacs-lisp
(add-to-list 'org-capture-templates
             '("b3"
               "急躁&焦虑情况"
               table-line
               (file+headline py/bipolar "急躁&焦虑情况")
               "| %t | %^{备注} | %^{急躁等级 (1-10)} | %^{及早内容} | %^{唑吡坦正常服用？} |"))
#+end_src

*** 工作内容记录

| 记录日期 | 工作内容1 | 时长 | 工作内容2 | 时长 | 工作内容3 | 时长 | 工作内容4 | 时长 |

#+begin_src emacs-lisp
(add-to-list 'org-capture-templates
             '("b4"
               "工作内容记录"
               table-line
               (file+headline py/bipolar "工作内容记录")
               "| %t | %^{备注} | %^{工作内容1} | %^{时长} | %^{工作内容2} | %^{时长} | %^{工作内容3} | %^{时长} | %^{工作内容4} | %^{时长} | "))
#+end_src

*** 抑郁&躁狂记录
:PROPERTIES:
:ID:       2a89219b-5fec-477e-be97-57beff1580ff
:END:

| 记录日期 | 抑郁程度 | 躁狂程度 |


#+begin_src emacs-lisp
(add-to-list 'org-capture-templates
             '("b5"
               "抑郁&躁狂记录"
               table-line
               (file+headline py/bipolar "抑郁&躁狂记录")
               "| %t | %^{抑郁程度} | %^{躁狂程度} |"))
#+end_src

*** 精神状态 幻觉 怪诞想法记录

| 记录日期 | 精神状态 | 幻觉 | 怪诞想法 |

#+begin_src emacs-lisp
(add-to-list 'org-capture-templates
             '("b6"
               "精神状态 幻觉 怪诞想法记录"
               table-line
               (file+headline py/bipolar "精神状态 幻觉 怪诞想法记录")
               "| %t | %^{精神状态（随便说说）} | %^{幻觉？} | %^{怪诞想法} |"))
#+end_src

*** 快乐事件记录

| 记录日期 | 内容1 | 时长 | 内容2   | 时长 | 内容3   | 时长 | 内容4   | 时长 |

#+begin_src emacs-lisp
(add-to-list 'org-capture-templates
             '("b7"
               "快乐事件记录"
               table-line
               (file+headline py/bipolar "快乐事件记录")
               "| %t | %^{内容1} | %^{时长} | %^{内容2} | %^{时长} | %^{内容3} | %^{时长} | %^{内容4}| %^{时长} |"))
#+end_src

* Metacog

** Notes
*** 🎬 TODO
:PROPERTIES:
:INIT:       [2021-04-13 Tue 18:53]
:END:
