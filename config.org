#+TITLE: Config

* basic

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!

Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src emacs-lisp
(setq user-full-name "Pei Yu"
      user-mail-address "yp9106@outlook.com")
#+END_SRC

disable theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-flatwhite)
#+end_src

set fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Source Code Pro" :size 16 :weight 'semi-light)
        doom-variable-pitch-font (font-spec :family "Libre Baskerville") ; inherits `doom-font''s :size
        doom-unicode-font (font-spec :family "Sarasa Mono SC")
        ;; doom-big-font (font-spec :family "Fira Mono" :size 19)
        )
(set-fontset-font t 'unicode "Symbola" nil 'prepend)
#+end_src

and editor basic views
#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src


* private setting in use
** smartparens
#+begin_src emacs-lisp
;; smartparens
(use-package! smartparens
  :init
  (map! :map smartparens-mode-map
        "C-M-f" #'sp-forward-sexp
        "C-M-b" #'sp-backward-sexp
        "C-M-u" #'sp-backward-up-sexp
        "C-M-d" #'sp-down-sexp
        "C-M-p" #'sp-backward-down-sexp
        "C-M-n" #'sp-up-sexp
         "C-M-s" #'sp-splice-sexp
        "C-)" #'sp-forward-slurp-sexp
        "C-}" #'sp-forward-barf-sexp
        "C-(" #'sp-backward-slurp-sexp
        "C-M-)" #'sp-backward-slurp-sexp
        "C-M-)" #'sp-backward-barf-sexp))
#+end_src

** chinese

cnfonts settings
#+begin_src emacs-lisp
<<<<<<< HEAD

=======
(cnfonts-enable)
;; Auto generated by cnfonts
;; <https://github.com/tumashu/cnfonts>
;; (set-face-attribute
;;  'default nil
;;  :font (font-spec :name "-ADBO-Source Code Pro-ultrabold-italic-normal-*-*-*-*-*-m-0-iso10646-1"
;;                   :weight 'normal
;;                   :slant 'normal
;;                   :size 12.5))
;; (dolist (charset '(kana han symbol cjk-misc bopomofo))
;;   (set-fontset-font
;;    (frame-parameter nil 'font)
;;    charset
;;    (font-spec :name "-WQYF-WenQuanYi Micro Hei Mono-normal-normal-normal-*-*-*-*-*-*-0-iso10646-1"
;;               :weight 'normal
;;               :slant 'normal
;;               :size 15.0)))
>>>>>>> 4c3c0efafa60ad06a60ab22a9b985513d901b4ca
#+end_src

#+RESULTS:
| doom-modeline-refresh-font-width-cache | cnfonts-set-font-first-time | doom-init-ui-h | doom-display-benchmark-h | doom-init-tty-h |

ace pinyin
#+begin_src emacs-lisp
;; search
(use-package! ace-pinyin
  :after evil
  :config
  (setq avy-all-windows t)
  (ace-pinyin-global-mode t))

;; evil-find-char-pinyin
(use-package! evil-find-char-pinyin
  :after evil
  :config
  (setq avy-all-windows t)
  (evil-find-char-pinyin-mode t))


;; input method
(use-package! pyim
  :demand t
  :config
  ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
  ;; (use-package pyim-basedict
  ;;   :config (pyim-basedict-enable))
  ;; 设置zh－wiki词库和zh－moegirl词库
  (setq pyim-dicts
        '((:name "zh-tsinghua"          :file "/home/py06/.doom.d/pyim_dicts/zh-tsinghua.pyim")
          (:name "zh-wiki"              :file "/home/py06/.doom.d/pyim_dicts/zh-wiki.pyim")
          (:name "zh-math"              :file "/home/py06/.doom.d/pyim_dicts/zh-math.pyim")
          (:name "zh-moegirl"           :file "/home/py06/.doom.d/pyim_dicts/zh-moegirl.pyim")))
  (setq default-input-method "pyim")
  ;; 我使用全拼
  (setq pyim-default-scheme 'quanpin)
  ;; 开启拼音搜索功能
  (pyim-isearch-mode 1)
  ;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置
  ;; 为'posframe, 速度很快并且菜单不会变形，不过需要用户
  ;; 手动安装 posframe 包。
  (setq pyim-page-tooltip 'posframe)
  ;; 选词框显示 9 个候选词
  (setq pyim-page-length 9)
  ;; 半角标点
  (setq pyim-punctuation-dict nil)
  :bind
  (("M-j" . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合
   ("C-;" . pyim-delete-word-from-personal-buffer)
   ("C-c M-c C-w" . pyim-forward-word)
   ("C-c M-c C-b" . pyim-backward-word)))
#+end_src
测试, 哈哈哈
** hl-todo
#+begin_src emacs-lisp
;; hl-todo-mode
(use-package! hl-todo
  :init
  (setq hl-todo-keyword-faces
        '(("TODO"    . 'hl-todo-TODO)
          ("ADDCONT" . 'hl-todo-ADDCONT)
          ("REF"     . 'hl-todo-REF)
          ("MODCONT" . 'hl-todo-MODCONT)
          ("FIXME"   . 'hl-todo-FIXME)
          ("XXX"     . 'hl-todo-XXX)
          ("DONE"    . 'hl-todo-DONE)))
  (defface hl-todo-TODO    '((t :background "#00FF00"  :foreground "#FF0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-ADDCONT '((t :background "#00FF00"  :foreground "#FF0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-REF      '((t :background "#00FF00" :foreground "#ff0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-FIXME   '((t :background "#0000FF"  :foreground "#FF0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-MODCONT  '((t :background "#0000FF" :foreground "#FF0000" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-XXX      '((t :background "#000000" :foreground "#FFFFFF" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (defface hl-todo-DONE    '((t :background "#00FF00"  :foreground "#00FF00" :inherit (hl-todo)))
    "Face for highlighting the HOLD keyword.")
  (map! :leader
        :prefix "c"
        :desc "show comment tags" "g" #'hl-todo-mode))
#+end_src
and related magit todo
#+begin_src emacs-lisp
(map! :leader
      :desc "ivy magit todo"             "g i" #'ivy-magit-todos)
#+end_src
** org-settings

#+begin_src emacs-lisp
;; basic org settings
(require 'find-lisp)
(setq org-directory "~/Dropbox/.org"
      org-ellipsis " ▼ "
      org-adapt-indentation nil)
(setq org-id-link-to-org-use-id t)
#+end_src

*** bullet
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))
#+end_src
*** quick-movement

#+begin_src emacs-lisp
;; org-outline quick movement
(after! org
  (map! :map org-mode-map
        "M-n" #'outline-next-visible-heading
        "M-p" #'outline-previous-visible-heading)
  (add-hook 'org-capture-mode-hook #'org-id-get-create))
#+end_src

*** org-roam
:PROPERTIES:
:ID:       998f257b-ca50-4ca8-b709-12a7cffe674a
:END:
#+begin_src emacs-lisp
;; org-roam
(use-package! org-roam
  :commands (org-roam-insert org-roam-find-file org-roam-switch-to-buffer org-roam)
  :hook
  (after-init . org-roam-mode)
  :init
  (map! :leader
       (:prefix ("r" . "roam")
                :desc "Switch to buffer"              "b" #'org-roam-switch-to-buffer
                :desc "Org Roam Capture"              "c" #'org-roam-capture
                :desc "Find file"                     "f" #'org-roam-find-file
                :desc "Show graph"                    "g" #'org-roam-graph
                :desc "Insert"                        "i" #'org-roam-insert
                :desc "Insert (skipping org-capture)" "I" #'org-roam-insert-immediate
                :desc "Org Roam"                      "r" #'org-roam
                (:prefix ("d" . "by date")
                      :desc "Arbitrary date" "d" #'org-roam-dailies-date
                      :desc "Today"          "t" #'org-roam-dailies-today
                      :desc "Tomorrow"       "m" #'org-roam-dailies-tomorrow
                      :desc "Yesterday"      "y" #'org-roam-dailies-yesterday)))
  (setq org-roam-directory (file-truename "~/Dropbox/.org/roams/")
        org-roam-index-file "~/Dropbox/.org/roams/index.org"
        org-roam-db-gc-threshold most-positive-fixnum
        org-roam-graph-exclude-matcher "private"
        org-roam-tag-sources '(prop last-directory)
        org-id-link-to-org-use-id t)
  :config
  ;; org-roam-capture
  (setq org-roam-capture-templates
               ;; literally
        '(("l" "lit" plain (function org-roam--capture-get-point)
             "%?"
             :file-name "lit/${slug}"
             :head "#+title: ${title}\n"
             :unnarrowed t)
          ("c" "concept" plain (function org-roam--capture-get-point)
             "%?"
             :file-name "concepts/${slug}"
             :head "#+title: ${title}\n"
             :unnarrowed t)
          ("d" "default" plain (function org-roam--capture-get-point)
             "%?"
             :file-name "${slug}"
             :head "#+title: ${title}\n"
             :unnarrowed t)))
  ;; org-roam-capture-immediate
  (setq org-roam-capture-immediate-template
               ;; default
               '("d" "default" plain (function org-roam--capture-get-point)
                 "%?"
                 :file-name "${slug}"
                 :head "#+title: ${title}\n"
                 :unnarrowed t)))

(use-package! org-roam-protocol
  :after org-protocol)

(use-package! org-roam-server
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 9090
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
(unless (server-running-p)
  (org-roam-server-mode))
#+end_src

*** save all buffers

#+begin_src emacs-lisp
(map! :leader
      :desc "save org buffers"           "f o" #'org-save-all-org-buffers)
#+end_src

*** deft

#+begin_src emacs-lisp
;; deft
(use-package deft
  :after org
  :bind ("<f9>" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "~/Dropbox/.org/"))
#+end_src

** latex

*** forward and inverse search

#+begin_src emacs-lisp
;; tex-live
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(setq TeX-view-program-selection '((output-pdf "Okular")))
;; (setq TeX-view-program-selection
;;    (quote
;;     (((output-dvi has-no-display-manager)
;;       "dvi2tty")
;;      ((output-dvi style-pstricks)
;;       "dvips and gv")
;;      (output-dvi "xdvi")
;;      (output-pdf "Okular")
;;      (output-html "xdg-open"))))
(setq TeX-source-correlate-mode t)
(setq TeX-source-correlate-start-server t)
(setq TeX-PDF-mode t)
#+end_src

*** set path

#+begin_src emacs-lisp
(setq TeX-engine 'xetex)
#+end_src

** ace-windows
#+begin_src emacs-lisp
;; window
;; window swap - ace-window
(use-package! ace-window
  :config
  (setq aw-keys '(?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9))
  :init
  (map! :leader
        :prefix "w"
        :desc "ace-window-select" "a" #'ace-window))
#+end_src

** COMMENT eaf

#+begin_src emacs-lisp
;; eaf
(use-package eaf
  :custom
  (eaf-find-alternate-file-in-dired t)
  :config
  (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding))
#+end_src

** telega

#+begin_src emacs-lisp
;; telega
(setq telega-proxies
      (list
       '(:server "127.0.0.1" :port 1080 :enable t
                 :type (:@type "proxyTypeSocks5"
                               :username "" :password ""))))
#+end_src

** poporg

edit comment in org-mode
#+begin_src emacs-lisp
(use-package! poporg
  :bind (("C-c '" . poporg-dwim)))
#+end_src

** baidu-translate

#+begin_src emacs-lisp
;; Baidu translate
(use-package! baidu-translate
  :init
  (global-set-key (kbd "C-c m") 'baidu-translate-zh-mark)
  (global-set-key (kbd "C-c M") 'baidu-translate-zh-whole-buffer)
  ;;设置你的百度翻译 APPID
  (setq baidu-translate-appid "20200510000447604")
  ;;设置你的秘钥
  (setq baidu-translate-security "Z5Ga8KOYLjto3H3VN8Pi")
  (map! :leader
        :desc "EN->ZH marks"            "a z" #'baidu-translate-zh-mark
        :desc "EN->ZH buffer"           "a Z" #'baidu-translate-zh-whole-buffer
        :desc "ZH->EN marks"            "a e" #'baidu-translate-en-mark
        :desc "ZH->EN buffer"           "a E" #'baidu-translate-en-whole-buffer))
#+end_src

** COMMENT buildin modes
*** hide-show-mode

#+begin_src emacs-lisp
;; block
(map! :leader
      :prefix "c"
      (:prefix-map ("H" . "hide code")
       :desc "hide block"               "b" #'hs-hide-block
       :desc "hide level"               "l" #'hs-hide-level
       :desc "hide all"                 "a" #'hs-hide-all)
      (:prefix-map ("S" . "show code")
       :desc "show block"               "b" #'hs-show-block
       :desc "show level"               "l" #'hs-show-level
       :desc "show all"                 "a" #'hs-show-all))
#+end_src

*** winner-mode

#+begin_src emacs-lisp
(use-package winner-mode
  :ensure t
  :hook (after-init . winner-mode))
#+end_src

*** ediff

#+begin_src emacs-lisp
(use-package ediff
  :ensure nil
  :hook (ediff-quit . winner-undo)
#+end_src

*** savespace

#+begin_src emacs-lisp
(use-package saveplace
  :ensure nil
  :hook (after-init . save-place-mode))
#+end_src

*** whitespace

#+begin_src emacs-lisp
(use-package whitespace
  :ensure nil
  :hook ((prog-mode markdown-mode conf-mode latex-mode ) . whitespace-mode)
  :config
  (setq whitespace-style '(face trailing)))
#+end_src

*** so-long

#+begin_src emacs-lisp
(use-package so-long
  :ensure nil
  :config (global-so-long-mode 1))
#+end_src

*** autorevert

#+begin_src emacs-lisp
(use-package autorevert
  :ensure nil
  :hook (after-init . global-auto-revert-mode))
#+end_src

** functions

*** time-insert

#+begin_src emacs-lisp
;; feature-functions
(defun insert-time ()
  "Insert a timestamp according to locale's date and time format."
  (interactive)
  (insert (format-time-string "%c" (current-time))))
;; key-bindings
(map! :leader
      :desc "insert time"                "i t" #'insert-time)

#+end_src

** key maps

*** scratch

#+begin_src emacs-lisp
(map! :leader :desc"doom/scratch"            "X" #'doom/open-scratch-buffer)
#+end_src

*** org-mode

**** org-capture

#+begin_src emacs-lisp
(after! org
  (map! :leader :desc "org-capture"           "x" #'org-capture))
#+end_src

*** comment lines

#+begin_src emacs-lisp
;; comment
(global-set-key (kbd "C-c C-\\") (quote comment-line))
#+end_src

*** workspaces

#+begin_src emacs-lisp
;; keybindings
(map! :leader
      :desc "Left workspace"                    "TAB ," #'+workspace/switch-left
      :desc "Right workspace"                   "TAB ." #'+workspace/switch-right
      :desc "Switch workspace"                  "TAB w" #'+workspace/switch-to)
#+end_src
*** frame
:PROPERTIES:
:ID:       b1a3d052-4069-4580-834f-65d84eb657d9
:END:
<<<<<<< HEAD
=======

#+begin_src emacs-lisp
(map! :leader
      :desc "Other frame"                       "o o" #'other-frame)
#+end_src

*** applications
>>>>>>> 4c3c0efafa60ad06a60ab22a9b985513d901b4ca

#+begin_src emacs-lisp
(map! :leader
      :desc "Other frame"                       "o o" #'other-frame)
#+end_src


<<<<<<< HEAD
* test area

** study of
*** COMMENT TODOkeywords
*** COMMENT todo keywords and faces
#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING" "BREAK"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold)
              ("BREAK" :foreground "forest green" :weight bold))))
#+end_src
=======
>>>>>>> 4c3c0efafa60ad06a60ab22a9b985513d901b4ca

*** COMMENT todo keyworkd change wth S-left and S-right
#+begin_src emacs-lisp
(setq org-treat-S-cursor-todo-selection-as-state-change nil) ;
#+end_src

*** COMMENT todo keyword triggers filter task in agenda view
#+begin_src emacs-lisp
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+end_src

<<<<<<< HEAD
*** COMMENT org-directory and default file
#+begin_src emacs-lisp
;(setq org-directory "~/git/org")
;(setq org-default-notes-file "~/git/org/refile.org")

;; I use C-c c to start capture mode
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

*** COMMENT capture templates
#+begin_src emacs-lisp
;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/org/refile.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/org/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "~/org/refile.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/org/diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "~/org/refile.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "~/org/refile.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "~/org/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("b" "Break" entry (file "~/org/refile.org")
               "* BREAK %? :BREAK:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/org/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+end_src
*** COMMENT refile files
*** COMMENT agenda file
#+begin_src emacs-lisp
(setq org-agenda-files (quote ("~/git/test.org")))
#+end_src

*** COMMENT refile target
#+begin_src emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
#+end_src


** COMMENT gtd way to go

*** COMMENT todo keyword

#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING" "BREAK"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold)
              ("BREAK" :foreground "forest green" :weight bold))))
#+end_src

#+begin_src emacs-lisp
(setq org-treat-S-cursor-todo-selection-as-state-change nil) ;
#+end_src

*** COMMENT Capture

#+begin_src emacs-lisp
(after! org
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/Dropbox/.org/inbox.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t))))
#+end_src


#+begin_src emacs-lisp
(setq org-refile-targets ())
#+end_src

*** COMMENT agenda

#+begin_src emacs-lisp
(setq org-agenda-files (quote ("~/Dropbox/.org/inbox.org"
                               "~/Dropbox/.org/todolist.org")))
(setq org-agenda-bin (quote ("~/Dropbox/.org/bin.org")))
#+end_src



#+begin_src emacs-lisp

(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9)
                                 (org-agenda-bin :maxlevel . 1))))
#+end_src

** minimum gtd

*** descrption
**** capture roaming with TODO keyword into inbox
**** check the inbox
1. cancel it?
   a. if yes
      a. change its keyword to canceled
      b. refile it to canceled.org
   b. if no, next process
2. can indendified now?
   a. if yes
      a. change its keyword to future
      b. refile it to future.org
   b. if no, next process
3. add details
   a. content and description
   b. set tags if needed
   c. deadline & schedual a must

4. refile to todolist
**** proceed in todolist
life of a todo item
TODO ----> STUCKED ----> DONE/CANCELED
***** Basic change of states is ok
***** IF DONE archive it to archive.org
***** IF CANCELED move it to canceled.org
**** agenda
****** moniating inbox.org todolist.org future.org
****** show items in todolist.org in scheduals
****** show stucked items in command of STUCKED
****** show To Refile items in inbox.org and future.org
****** show Maybe_somedayitems
*** 实现


=======

* test area

** study of
*** COMMENT TODOkeywords
*** COMMENT todo keywords and faces
>>>>>>> 4c3c0efafa60ad06a60ab22a9b985513d901b4ca
#+begin_src emacs-lisp
(after! org
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/Dropbox/.org/inbox.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)))))
#+end_src

**** 1 TODOkeywords

#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "MAYBE_SOMEDAY(m@/!)" "STUCKED(s@/!)" "|" "CANCELLED(c@/!)")))))
(after! org
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("MAYBE_SOMEDAY" :foreground "orange" :weight bold)
              ("STUCKED" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "grey" :weight bold)))))
#+end_src
**** 2 tag-alist

#+begin_src emacs-lisp
(after! org
  (setq org-tag-alist (quote ((:startgroup)
                              ("@errand" . ?e)
                              ("@office" . ?o)
                              ("@home" . ?H)
                              (:endgroup)
                              ("HOLD" . ?h)
                              ("PERSONAL" . ?P)
                              ("crypt" . ?E)
                              ("NOTE" . ?n)
                              ("CANCELLED" . ?c)
                              ("FLAGGED" . ??)))))
#+end_src
**** 3 change keyword and refile
1 refile targets

#+begin_src emacs-lisp
(setq org-agenda-directory "~/Dropbox/.org/")
(setq org-agenda-files (quote ("~/Dropbox/.org/inbox.org"
                               "~/Dropbox/.org/repeater.org"
                               "~/Dropbox/.org/todolist.org"
                               "~/Dropbox/.org/future.org")))
#+end_src


#+begin_src emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
#+end_src

**** 4 agenda view
:PROPERTIES:
:ID:       8b938d41-f51f-416a-8deb-b574280cadac
:END:

<<<<<<< HEAD
#+begin_src emacs-lisp
(setq org-columns-default-format "%40ITEM(Task) %PRIORITY(P) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline) 30%TAGS")
(setq org-agenda-custom-commands `((" " "Agenda"
                                      ((agenda ""
                                            ((org-agenda-span 'week)
                                             (org-deadline-warning-days 365)))
                                       (todo "STUCKED"
                                             ((org-agenda-overriding-header "STUCKED")
                                              (org-agenda-files '(,(expand-file-name "todolist.org" org-agenda-directory)))))
                                       (todo "TODO"
                                             ((org-agenda-overriding-header "TO REFILE")
                                              (org-agenda-files '(,(expand-file-name "inbox.org" org-agenda-directory)))))
                                       (todo "MAYBE_SOMEDAY"
                                             ((org-agenda-overriding-header "")
                                              (org-agenda-files '(,(expand-file-name "future.org" org-agenda-directory)))))))))
=======
*** COMMENT capture templates
#+begin_src emacs-lisp
;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/org/refile.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/org/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "~/org/refile.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/org/diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "~/org/refile.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "~/org/refile.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "~/org/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("b" "Break" entry (file "~/org/refile.org")
               "* BREAK %? :BREAK:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/org/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+end_src
*** COMMENT refile files
*** COMMENT agenda file
#+begin_src emacs-lisp
(setq org-agenda-files (quote ("~/git/test.org")))
>>>>>>> 4c3c0efafa60ad06a60ab22a9b985513d901b4ca
#+end_src

**** 5 key map

#+begin_src emacs-lisp
(use-package! org-agenda
  :after org
  :init
  (map! "<f8>" #'pei/switch-to-agenda)
  (setq org-agenda-block-separator nil
        org-agenda-start-with-log-mode t)
  (defun pei/switch-to-agenda ()
    (interactive)
    (org-agenda nil " ")))
#+end_src


** COMMENT gtd way to go

*** COMMENT todo keyword

#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING" "BREAK"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold)
              ("BREAK" :foreground "forest green" :weight bold))))
#+end_src

#+begin_src emacs-lisp
(setq org-treat-S-cursor-todo-selection-as-state-change nil) ;
#+end_src

*** COMMENT Capture

#+begin_src emacs-lisp
(after! org
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/Dropbox/.org/inbox.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t))))
#+end_src


#+begin_src emacs-lisp
(setq org-refile-targets ())
#+end_src

*** COMMENT agenda

#+begin_src emacs-lisp
(setq org-agenda-files (quote ("~/Dropbox/.org/inbox.org"
                               "~/Dropbox/.org/todolist.org")))
(setq org-agenda-bin (quote ("~/Dropbox/.org/bin.org")))
#+end_src



#+begin_src emacs-lisp

(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9)
                                 (org-agenda-bin :maxlevel . 1))))
#+end_src

** minimum gtd

*** descrption
**** capture roaming with TODO keyword into inbox
**** check the inbox
1. cancel it?
   a. if yes
      a. change its keyword to canceled
      b. refile it to canceled.org
   b. if no, next process
2. can indendified now?
   a. if yes
      a. change its keyword to future
      b. refile it to future.org
   b. if no, next process
3. add details
   a. content and description
   b. set tags if needed
   c. deadline & schedual a must

4. refile to todolist
**** proceed in todolist
life of a todo item
TODO ----> STUCKED ----> DONE/CANCELED
***** Basic change of states is ok
***** IF DONE archive it to archive.org
***** IF CANCELED move it to canceled.org
**** agenda
****** moniating inbox.org todolist.org future.org
****** show items in todolist.org in scheduals
****** show stucked items in command of STUCKED
****** show To Refile items in inbox.org and future.org
****** show Maybe_somedayitems
*** 实现


#+begin_src emacs-lisp
(after! org
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/Dropbox/.org/inbox.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)))))
#+end_src

**** 1 TODOkeywords

#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "MAYBE_SOMEDAY(m@/!)" "STUCKED(s@/!)" "|" "CANCELLED(c@/!)")))))
(after! org
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("MAYBE_SOMEDAY" :foreground "orange" :weight bold)
              ("STUCKED" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "grey" :weight bold)))))
#+end_src
**** 2 tag-alist

#+begin_src emacs-lisp
(after! org
  (setq org-tag-alist (quote ((:startgroup)
                              ("@errand" . ?e)
                              ("@office" . ?o)
                              ("@home" . ?H)
                              (:endgroup)
                              ("HOLD" . ?h)
                              ("PERSONAL" . ?P)
                              ("crypt" . ?E)
                              ("NOTE" . ?n)
                              ("CANCELLED" . ?c)
                              ("FLAGGED" . ??)))))
#+end_src
**** 3 change keyword and refile
1 refile targets

#+begin_src emacs-lisp
(setq org-agenda-directory "~/Dropbox/.org/")
(setq org-agenda-files (quote ("~/Dropbox/.org/inbox.org"
                               "~/Dropbox/.org/todolist.org"
                               "~/Dropbox/.org/future.org")))
#+end_src

#+begin_src emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
#+end_src

**** 4 agenda view
:PROPERTIES:
:ID:       8b938d41-f51f-416a-8deb-b574280cadac
:END:

#+begin_src emacs-lisp
(setq org-columns-default-format "%40ITEM(Task) %PRIORITY(P) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline) 30%TAGS")
(setq org-agenda-custom-commands `((" " "Agenda"
                                      ((agenda ""
                                            ((org-agenda-span 'week)
                                             (org-deadline-warning-days 365)))
                                       (todo "STUCKED"
                                             ((org-agenda-overriding-header "STUCKED")
                                              (org-agenda-files '(,(expand-file-name "todolist.org" org-agenda-directory)))))
                                       (todo "TODO"
                                             ((org-agenda-overriding-header "TO REFILE")
                                              (org-agenda-files '(,(expand-file-name "inbox.org" org-agenda-directory)))))
                                       (todo "MAYBE_SOMEDAY"
                                             ((org-agenda-overriding-header "")
                                              (org-agenda-files '(,(expand-file-name "future.org" org-agenda-directory)))))))))
#+end_src

**** 5 key map

#+begin_src emacs-lisp
(use-package! org-agenda
  :after org
  :init
  (map! "<f8>" #'pei/switch-to-agenda)
  (setq org-agenda-block-separator nil
        org-agenda-start-with-log-mode t)
  (defun pei/switch-to-agenda ()
    (interactive)
    (org-agenda nil " ")))
#+end_src
