<div>
<h2>&#30446;&#24405;</h2>
<div>
<ul>
<li><a href="http://www.zmonster.me#orgheadline1" rel="noopener noreferrer" target="_blank">string.h</a></li>
<li><a href="http://www.zmonster.me#orgheadline2" rel="noopener noreferrer" target="_blank">&#23383;&#31526;&#20018;&#25335;&#36125;(strcpy, strncpy)</a>
<ul>
<li><a href="http://www.zmonster.me#orgheadline3" rel="noopener noreferrer" target="_blank">strcpy</a></li>
<li><a href="http://www.zmonster.me#orgheadline4" rel="noopener noreferrer" target="_blank">strncpy</a></li>
</ul>
</li>
<li><a href="http://www.zmonster.me#orgheadline5" rel="noopener noreferrer" target="_blank">&#23383;&#31526;&#20018;&#27604;&#36739;(strcmp, strncmp, strcasecmp, strncasecmp)</a>
<ul>
<li><a href="http://www.zmonster.me#orgheadline6" rel="noopener noreferrer" target="_blank">strcmp</a></li>
<li><a href="http://www.zmonster.me#orgheadline7" rel="noopener noreferrer" target="_blank">strncmp</a></li>
<li><a href="http://www.zmonster.me#orgheadline8" rel="noopener noreferrer" target="_blank">strcasecmp</a></li>
<li><a href="http://www.zmonster.me#orgheadline9" rel="noopener noreferrer" target="_blank">strncasecmp</a></li>
</ul>
</li>
<li><a href="http://www.zmonster.me#orgheadline10" rel="noopener noreferrer" target="_blank">&#23383;&#31526;&#20018;&#36830;&#25509;(strcat, strncat)</a>
<ul>
<li><a href="http://www.zmonster.me#orgheadline11" rel="noopener noreferrer" target="_blank">strcat</a></li>
<li><a href="http://www.zmonster.me#orgheadline12" rel="noopener noreferrer" target="_blank">strncat</a></li>
</ul>
</li>
<li><a href="http://www.zmonster.me#orgheadline13" rel="noopener noreferrer" target="_blank">&#23383;&#31526;&#26597;&#25214;(strchr, strrchr, strchrnul, strpbrk)</a>
<ul>
<li><a href="http://www.zmonster.me#orgheadline14" rel="noopener noreferrer" target="_blank">strchr</a></li>
<li><a href="http://www.zmonster.me#orgheadline15" rel="noopener noreferrer" target="_blank">strrchr</a></li>
<li><a href="http://www.zmonster.me#orgheadline16" rel="noopener noreferrer" target="_blank">strchrnul</a></li>
<li><a href="http://www.zmonster.me#orgheadline17" rel="noopener noreferrer" target="_blank">strpbrk</a></li>
</ul>
</li>
<li><a href="http://www.zmonster.me#orgheadline18" rel="noopener noreferrer" target="_blank">&#23383;&#31526;&#20018;&#20998;&#21106;(strtok, strtok_r, strsep)</a>
<ul>
<li><a href="http://www.zmonster.me#orgheadline19" rel="noopener noreferrer" target="_blank">strtok</a></li>
<li><a href="http://www.zmonster.me#orgheadline20" rel="noopener noreferrer" target="_blank">strtok_r</a></li>
<li><a href="http://www.zmonster.me#orgheadline21" rel="noopener noreferrer" target="_blank">strsep</a></li>
</ul>
</li>
<li><a href="http://www.zmonster.me#orgheadline22" rel="noopener noreferrer" target="_blank">&#23383;&#31526;&#20018;&#21305;&#37197;(strstr)</a></li>
<li><a href="http://www.zmonster.me#orgheadline23" rel="noopener noreferrer" target="_blank">&#23383;&#31526;&#20018;&#21103;&#26412;&#21019;&#24314;(strdup, strndup, strdupa, strndupa)</a>
<ul>
<li><a href="http://www.zmonster.me#orgheadline24" rel="noopener noreferrer" target="_blank">strdup</a></li>
<li><a href="http://www.zmonster.me#orgheadline25" rel="noopener noreferrer" target="_blank">strndup</a></li>
<li><a href="http://www.zmonster.me#orgheadline26" rel="noopener noreferrer" target="_blank">strdupa</a></li>
<li><a href="http://www.zmonster.me#orgheadline27" rel="noopener noreferrer" target="_blank">strndupa</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div>
<h2>string.h</h2>
<div>
<p>
&#20854;&#23454;&#22312;C&#35821;&#35328;&#30340;&#26631;&#20934;&#24211;&#20013;&#65292;&#20063;&#26377;&#38750;&#24120;&#20016;&#23500;&#30340;&#23383;&#31526;&#20018;&#25805;&#20316;&#20989;&#25968;&#12290;&#24403;&#28982;&#20102;&#65292;&#30001;&#20110;C&#35821;&#35328;&#20013; <b>&#23383;&#31526;&#20018;</b> &#24182;&#19981;&#26159;&#22522;&#26412;&#25968;&#25454;&#31867;&#22411;&#65292;&#20063;&#27809;&#26377; <b>&#31867;</b> &#36825;&#20010;&#27010;&#24565;&#65292;&#30456;&#23545;&#26469;&#35828;&#25805;&#20316;&#19978;&#21487;&#33021;&#27809;&#26377;Python/Java&#20043;&#31867;&#30340;&#35821;&#35328;&#26041;&#20415;&#12290;&#19981;&#36807;&#20102;&#35299;&#19968;&#19979;C&#35821;&#35328;&#20013;&#30340;&#23383;&#31526;&#20018;&#25805;&#20316;&#36824;&#26159;&#26377;&#24847;&#20041;&#30340;&#12290;
</p>

<p>
C&#35821;&#35328;&#20013;&#30340;&#23383;&#31526;&#20018;&#25805;&#20316;&#20989;&#25968;&#22312; <b>string.h</b> &#20013;&#65292;&#19981;&#36807;&#35201;&#20102;&#35299;&#37117;&#26377;&#20160;&#20040;&#20989;&#25968;&#65292;&#38405;&#35835;string.h&#24182;&#19981;&#26159;&#20160;&#20040;&#22909;&#30340;&#26041;&#24335;&#12290;&#22914;&#26524;&#26159;&#22312;Unix/Linux&#31995;&#32479;&#19979;&#65292;&#21482;&#35201;&#25191;&#34892;&#65306;
</p>
<div>

<pre>man string
</pre>
</div>
<p>
&#23601;&#21487;&#20197;&#20102;&#35299;&#37117;&#26377;&#21738;&#20123;&#23383;&#31526;&#20018;&#25805;&#20316;&#20989;&#25968;&#20102;&#65292;&#22914;&#19979;&#22270;&#25152;&#31034;&#65306;
</p>


<div>
<p><img src="http://www.zmonster.me/assets/img/string_manual.png" alt="string_manual.png" referrerpolicy="no-referrer" loading="lazy">
</p>
</div>

<p>
&#20854;&#20013;&#19968;&#20123;&#24120;&#29992;&#30340;&#20989;&#25968;&#21450;&#20854;&#22823;&#33268;&#21151;&#33021;&#22914;&#19979;(&#20855;&#20307;&#32454;&#33410;&#21518;&#38754;&#20877;&#32454;&#35828;)&#65306;
</p>
<ul>
<li><p>
&#23383;&#31526;&#20018;&#25335;&#36125;
</p>

<p>
stcpy, strncpy
</p></li>
<li><p>
&#23383;&#31526;&#20018;&#27604;&#36739;
</p>

<p>
strcmp, strncmp, strcasecmp, strncasecmp
</p></li>
<li><p>
&#23383;&#31526;&#20018;&#36830;&#25509;
</p>

<p>
strcat, strncat
</p></li>
<li><p>
&#23383;&#31526;&#26597;&#25214;
</p>

<p>
strchr, strrchr, strchrnul, strpbrk
</p></li>
<li><p>
&#24314;&#31435;&#23383;&#31526;&#20018;&#21103;&#26412;
</p>

<p>
strdup, strndup, strdupa, strndupa
</p></li>
<li><p>
&#23383;&#31526;&#20018;&#20998;&#21106;
</p>

<p>
strsep, strtok, strtok_r
</p></li>
<li><p>
&#23383;&#31526;&#20018;&#21305;&#37197;
</p>

<p>
strstr
</p></li>
</ul>


<p>
&#19979;&#38754;&#26681;&#25454;&#21151;&#33021;&#30340;&#19981;&#21516;&#26469;&#23637;&#31034;&#21508;&#20010;&#20989;&#25968;&#30340;&#29992;&#27861;&#12290;&#36825;&#37324;&#25105;&#20250;&#29992;&#19968;&#20123;&#23454;&#20363;&#26469;&#36827;&#34892;&#31034;&#33539;&#65292;&#21516;&#26102;&#65292;&#20854;&#32467;&#26524;&#30001;org-babel&#23545;&#20195;&#30721;&#22359;&#27714;&#20540;&#24471;&#21040;&#12290;
</p>
</div>
</div>
<div>
<h2>&#23383;&#31526;&#20018;&#25335;&#36125;(strcpy, strncpy)</h2>
<div>
</div><div>
<h3>strcpy</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strcpy</span>(<span>char</span> *<span>dest</span>, <span>const</span> <span>char</span> *<span>src</span>);
</pre>
</div>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> <span>dest</span>[1024] = {0};
    <span>char</span> *<span>src</span> = <span>"abcde"</span>;

    strcpy(dest, src);

    printf(<span>"%s\n"</span>, dest);
    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
abcde
</pre>

<p>
strcpy()&#20989;&#25968;&#20250;&#23558;&#28304;&#23383;&#31526;&#20018;&#20013;&#30340;&#32467;&#26463;&#31526;('\0')&#20063;&#25335;&#36125;&#21040;&#30446;&#30340;&#23383;&#31526;&#20018;&#20013;&#12290;
</p>

<p>
&#27880;&#24847;&#65292;strcpy()&#21487;&#33021;&#20250;&#23548;&#33268;&#28322;&#20986;&#12290;
</p>
</div>
</div>
<div>
<h3>strncpy</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strncpy</span>(<span>char</span> *<span>dest</span>, <span>const</span> <span>char</span> *<span>src</span>, <span>size_t</span> <span>n</span>);
</pre>
</div>

<p>
&#35813;&#20989;&#25968;&#20174;&#28304;&#23383;&#31526;&#20018;&#20013;&#25335;&#36125;n&#20010;&#23383;&#31526;&#21040;&#30446;&#30340;&#23383;&#31526;&#20018;&#65307;&#22914;&#26524;&#28304;&#23383;&#31526;&#20018;&#38271;&#24230;&#19981;&#36275;&#65292;&#21017;&#29992; <b>NULL</b> &#22635;&#20805;&#65292;&#20197;&#20445;&#35777;&#23558;n&#20010;&#23383;&#31526;&#20889;&#20837;&#30446;&#30340;&#23383;&#31526;&#20018;&#20013;&#65307;&#22914;&#26524;&#28304;&#23383;&#31526;&#20018;&#20013;&#21069;n&#20010;&#23383;&#31526;&#19981;&#21253;&#21547;&#23383;&#31526;&#20018;&#32467;&#26463;&#31526;&#65292;&#20989;&#25968;&#19981;&#20250;&#20026;&#30446;&#30340;&#23383;&#31526;&#20018;&#28155;&#21152;&#19978;&#32467;&#26463;&#31526;&#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> <span>dest</span>[7] = {0};
    <span>char</span> *<span>src</span> = <span>"abcde"</span>;

    dest[5] = <span>'A'</span>;
    strncpy(dest, src, 5);

    printf(<span>"%s\n"</span>, dest);
    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
abcdeA
</pre>

<p>
&#25152;&#20197;&#22914;&#26524;&#26377;&#38656;&#35201;&#65292;&#24212;&#35813;&#22312;&#25335;&#36125;&#21518;&#33258;&#24049;&#22312;&#30446;&#30340;&#23383;&#31526;&#20018;&#23614;&#37096;&#28155;&#21152;&#32467;&#26463;&#31526;&#12290;
</p>
</div>
</div>
</div>

<div>
<h2>&#23383;&#31526;&#20018;&#27604;&#36739;(strcmp, strncmp, strcasecmp, strncasecmp)</h2>
<div>
</div><div>
<h3>strcmp</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>int</span> <span>strcmp</span>(<span>const</span> <span>char</span> *<span>s1</span>, <span>const</span> <span>char</span> *<span>s2</span>);
</pre>
</div>
<p>
&#22914;&#26524;s1&#23567;&#20110;s2&#65292;&#20989;&#25968;&#36820;&#22238;&#19968;&#20010;&#36127;&#25968;&#65307;&#22914;&#26524;s1&#31561;&#20110;s2&#65292;&#20989;&#25968;&#36820;&#22238;0&#65307;&#21542;&#21017;&#36820;&#22238;&#19968;&#20010;&#27491;&#25968;&#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> *<span>s1</span> = <span>"abcde"</span>;
    <span>char</span> *<span>s2</span> = <span>"abcef"</span>;
    <span>char</span> *<span>s3</span> = <span>"ad"</span>;

    printf(<span>"compare(%s, %s) -&gt; %d\n"</span>, s1, s2, strcmp(s1, s2));
    printf(<span>"compare(%s, %s) -&gt; %d\n"</span>, s1, s3, strcmp(s1, s3));
    printf(<span>"compare(%s, %s) -&gt; %d\n"</span>, s2, s3, strcmp(s2, s3));

    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
compare(abcde, abcef) -&gt; -1
compare(abcde, ad) -&gt; -2
compare(abcef, ad) -&gt; -2
</pre>

<p>
&#20174;&#36825;&#20010;&#32467;&#26524;&#21487;&#20197;&#21457;&#29616;&#65292;strcmp()&#26159;&#26681;&#25454;&#23383;&#20856;&#24207;&#26469;&#23545;&#23383;&#31526;&#20018;&#36827;&#34892;&#27604;&#36739;&#30340;&#12290;&#36827;&#19968;&#27493;&#30340;&#65292;&#36824;&#21487;&#20197;&#21457;&#29616;strcmp()&#30340;&#36820;&#22238;&#20540;&#26159;&#27604;&#36739;&#36807;&#31243;&#20013;&#26368;&#21518;&#19968;&#27425;&#27604;&#36739;&#26102;&#20004;&#20010;&#23383;&#31526;&#30340;&#20540;&#30340;&#24046;&#65292;&#22914;&#27604;&#36739;"abcde"&#21644;"abcef"&#65292;&#26377;&#65306;
</p>
<pre>
a - a = 0
b - b = 0
c - c = 0
d - e = -1 #&#25353;&#23383;&#20856;&#24207;&#65292;&#22823;&#23567;&#24050;&#20998;&#65292;&#19981;&#20877;&#27604;&#36739;
</pre>
</div>
</div>

<div>
<h3>strncmp</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>int</span> <span>strncmp</span>(<span>const</span> <span>char</span> *<span>s1</span>, <span>const</span> <span>char</span> *<span>s2</span>, <span>size_t</span> <span>n</span>);
</pre>
</div>

<p>
&#21644;strcmp()&#30340;&#21306;&#21035;&#26159;&#65292;strncmp()&#21482;&#23545;s1&#21644;s2&#30340;&#21069;n&#20010;&#23383;&#33410;&#36827;&#34892;&#27604;&#36739;&#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> *<span>s1</span> = <span>"abcde"</span>;
    <span>char</span> *<span>s2</span> = <span>"abcfg"</span>;
    <span>char</span> *<span>s3</span> = <span>"abd"</span>;

    printf(<span>"compare(%s, %s, 4) -&gt; %d\n"</span>, s1, s2, strncmp(s1, s2, 4));
    printf(<span>"compare(%s, %s, 2) -&gt; %d\n"</span>, s1, s3, strncmp(s1, s3, 2));
    printf(<span>"compare(%s, %s, 3) -&gt; %d\n"</span>, s2, s3, strncmp(s2, s3, 3));

    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
compare(abcde, abcfg, 4) -&gt; -2
compare(abcde, abd, 2) -&gt; 0
compare(abcfg, abd, 3) -&gt; -1
</pre>
</div>
</div>

<div>
<h3>strcasecmp</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>int</span> <span>strcasecmp</span>(<span>const</span> <span>char</span> *<span>s1</span>, <span>const</span> <span>char</span> *<span>s2</span>);
</pre>
</div>

<p>
strcasecmp()&#20063;&#26159;&#29992;&#26469;&#27604;&#36739;&#23383;&#31526;&#20018;&#30340;&#65292;&#21644;strcmp()&#26377;&#20004;&#28857;&#21306;&#21035;&#65306;
</p>
<ol>
<li>&#20351;&#29992;strcasecmp()&#24212;&#35813;&#21253;&#21547; <b>strings.h</b> &#32780;&#19981;&#26159; <b>string.h</b></li>
<li>strcasecmp()&#22312;&#27604;&#36739;&#26102;&#19981;&#21306;&#20998;&#22823;&#23567;&#20889;</li>
</ol>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>
<span>#include</span> <span>&lt;strings.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> *<span>s1</span> = <span>"AbcdE"</span>;
    <span>char</span> *<span>s2</span> = <span>"abcdE"</span>;

    printf(<span>"compare(%s, %s) with case -&gt; %d\n"</span>, s1, s2, strcmp(s1, s2));
    printf(<span>"compare(%s, %s) ignore case -&gt; %d\n"</span>, s1, s2, strcasecmp(s1, s2));

    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
compare(AbcdE, abcdE) with case -&gt; -32
compare(AbcdE, abcdE) ignore case -&gt; 0
</pre>
</div>
</div>

<div>
<h3>strncasecmp</h3>
<div>
<p>
strncasecmp()&#20043;&#20110;strcasecmp()&#23601;&#22914;strncmp()&#20043;&#20110;strcmp()&#65292;&#19981;&#20877;&#36184;&#36848;&#12290;
</p>
</div>
</div>
</div>
<div>
<h2>&#23383;&#31526;&#20018;&#36830;&#25509;(strcat, strncat)</h2>
<div>
</div><div>
<h3>strcat</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strcat</span>(<span>char</span> *<span>dest</span>, <span>const</span> <span>char</span> *<span>src</span>);
</pre>
</div>

<p>
strcat()&#39318;&#20808;&#20250;&#35206;&#30422;&#25481;&#30446;&#30340;&#23383;&#31526;&#20018;&#30340;&#32467;&#26463;&#31526;&#65292;&#28982;&#21518;&#25226;&#28304;&#23383;&#31526;&#20018;&#30340;&#20869;&#23481;&#36861;&#21152;&#21040;&#21518;&#38754;&#65292;&#24182;&#22312;&#26368;&#21518;&#28155;&#21152;&#32467;&#26463;&#31526;&#12290;&#22914;&#26524;&#30446;&#30340;&#23383;&#31526;&#20018;&#32531;&#20914;&#21306;&#38271;&#24230;&#19981;&#22815;&#65292;&#23558;&#23548;&#33268;&#28322;&#20986;&#12290;
</p>

<p>
strcat()&#22312;&#25805;&#20316;&#23436;&#25104;&#21518;&#65292;&#36820;&#22238;&#30446;&#30340;&#23383;&#31526;&#20018;&#30340;&#39318;&#22320;&#22336;&#65292;&#36825;&#26679;&#21487;&#20197;&#26041;&#20415;&#22320;&#36827;&#34892;&#38142;&#24335;&#25805;&#20316;&#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> <span>dest</span>[1024] = <span>"hello "</span>;
    <span>char</span> *<span>src</span> = <span>"world!"</span>;

    printf(<span>"%s\n"</span>, strcat(dest, src));

    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
hello world!
</pre>
</div>
</div>

<div>
<h3>strncat</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strncat</span>(<span>char</span> *<span>dest</span>, <span>const</span> <span>char</span> *<span>src</span>, <span>size_t</span> <span>n</span>);
</pre>
</div>

<p>
strncat()&#23558;&#26368;&#22810;n&#20010;&#23383;&#33410;&#30340;&#20869;&#23481;&#36861;&#21152;&#21040;&#30446;&#30340;&#23383;&#31526;&#20018;&#23614;&#37096;&#65292;&#24182;&#19988;&#20250;&#22312;&#36861;&#21152;&#21518;&#28155;&#21152;&#32456;&#27490;&#31526;&#21495;&#12290;
</p>

<p>
&#21516;strcat()&#19968;&#26679;&#65292;&#23427;&#36820;&#22238;&#30446;&#30340;&#23383;&#31526;&#20018;&#30340;&#39318;&#22320;&#22336;&#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> <span>dest</span>[1024] = <span>"hello "</span>;
    <span>char</span> *<span>src</span> = <span>"world!lkjsdljsd"</span>;

    printf(<span>"%s\n"</span>, strncat(dest, src, 6));

    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
hello world!
</pre>
</div>
</div>
</div>

<div>
<h2>&#23383;&#31526;&#26597;&#25214;(strchr, strrchr, strchrnul, strpbrk)</h2>
<div>
</div><div>
<h3>strchr</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strchr</span>(<span>const</span> <span>char</span> *<span>s</span>, <span>int</span> <span>c</span>);
</pre>
</div>

<p>
strchr()&#36820;&#22238;&#19968;&#20010;&#23383;&#31526;&#25351;&#38024;&#65292;&#25351;&#21521;&#25351;&#23450;&#23383;&#31526;&#22312;&#25351;&#23450;&#23383;&#31526;&#20018;&#20013;&#31532;&#19968;&#27425;&#20986;&#29616;&#30340;&#20301;&#32622;&#12290;&#22914;&#26524;&#22312;&#25351;&#23450;&#23383;&#31526;&#20018;&#20013;&#27809;&#26377;&#25214;&#21040;&#25351;&#23450;&#23383;&#31526;&#65292;&#21017;&#36820;&#22238; <b>NULL</b> &#12290;&#35813;&#20989;&#25968;&#30340;&#31532;&#20108;&#20010;&#21442;&#25968;&#25353;&#29702;&#26469;&#35828;&#24212;&#24403;&#26159;&#19968;&#20010;&#23383;&#31526;&#65292;&#19981;&#36807;&#26631;&#20934;&#24211;&#20013;&#30830;&#23454;&#26159;int&#31867;&#22411;&#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> *<span>s</span> = <span>"hello world!"</span>;
    <span>char</span> <span>c</span> = <span>'l'</span>;

    printf(<span>"%s\n"</span>, strchr(s, c));

    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
llo world!
</pre>
</div>
</div>
<div>
<h3>strrchr</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strrchr</span>(<span>const</span> <span>char</span> *<span>s</span>, <span>int</span> <span>c</span>);
</pre>
</div>

<p>
strrchr()&#21644;strchr()&#31867;&#20284;&#65292;&#20294;&#23427;&#36820;&#22238;&#30340;&#26159;&#25351;&#23450;&#23383;&#31526;&#22312;&#25351;&#23450;&#23383;&#31526;&#20018;&#20013;&#26368;&#21518;&#19968;&#27425;&#20986;&#29616;&#30340;&#20301;&#32622;&#12290;&#22914;&#26524;&#26410;&#25214;&#21040;&#65292;&#21516;&#26679;&#36820;&#22238; <b>NULL</b> &#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> *<span>s</span> = <span>"hello world!"</span>;
    <span>char</span> <span>c</span> = <span>'l'</span>;

    printf(<span>"%s\n"</span>, strrchr(s, c));

    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
ld!
</pre>
</div>
</div>
<div>
<h3>strchrnul</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strchrnul</span>(<span>const</span> <span>char</span> *<span>s</span>, <span>int</span> <span>c</span>);
</pre>
</div>

<p>
strchrnul()&#30340;&#21151;&#33021;&#21644;strchr()&#21482;&#26377;&#32454;&#24494;&#30340;&#21306;&#21035;&#65292;&#37027;&#23601;&#26159;&#65292;&#24403;&#27809;&#26377;&#25214;&#21040;&#25351;&#23450;&#23383;&#31526;&#26102;&#65292;strchrnul()&#19981;&#36820;&#22238; <b>NULL</b> &#65292;&#32780;&#26159;&#36820;&#22238;&#23383;&#31526;&#20018;&#32467;&#26463;&#31526;&#30340;&#20301;&#32622;&#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> *<span>s</span> = <span>"abcde"</span>;
    <span>char</span> <span>c</span> = <span>'m'</span>;

    printf(<span>"%p, %p\n"</span>, s, strchrnul(s, c));

    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;
</p>
<pre>
0x40065c, 0x400661
</pre>

<p>
&#36825;&#37324;&#30001;&#20110;strchrnul()&#30340;&#29305;&#24615;&#65292;&#27809;&#21150;&#27861;&#36890;&#36807;&#25171;&#21360;&#23383;&#31526;&#20018;&#26469;&#20102;&#35299;strchrnul()&#30340;&#25805;&#20316;&#65292;&#19981;&#36807;&#35266;&#23519;&#36825;&#20004;&#20010;&#25351;&#38024;&#30340;&#20540;&#65292;&#20250;&#21457;&#29616;&#65306;
</p>
<pre>
0x400661 - 0x40065c = 0x5
</pre>
<p>
&#32780;&#23383;&#31526;&#20018;s&#30340;&#31532;&#20845;&#20010;&#20803;&#32032;(&#20174;0&#24320;&#22987;&#65292;5&#21363;&#31532;&#20845;&#20010;)&#65292;&#27491;&#22909;&#26159;&#32467;&#26463;&#31526;&#12290;
</p>
</div>
</div>
<div>
<h3>strpbrk</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strpbrk</span>(<span>const</span> <span>char</span> *<span>s</span>, <span>const</span> <span>char</span> *<span>accept</span>);
</pre>
</div>

<p>
strpbrk()&#21644;strchr()&#30340;&#21306;&#21035;&#22312;&#20110;&#65292;strchr()&#26159;&#20174;&#23383;&#31526;&#20018;&#37324;&#25628;&#32034; <b>&#19968;&#20010;&#23383;&#31526;</b> &#65292;&#32780;strpbrk()&#21017;&#26159;&#22312;&#23383;&#31526;&#20018;&#37324;&#25628;&#32034; <b>&#19968;&#20010;&#23383;&#31526;&#38598;&#20013;&#30340;&#23383;&#31526;</b> &#65292;&#30475;&#31532;&#20108;&#20010;&#21442;&#25968;&#23601;&#26126;&#30333;&#20102;&#12290;strpbrk()&#36941;&#21382;&#23383;&#31526;&#20018;&#65292;&#22914;&#26524;&#21457;&#29616;&#26576;&#20010;&#23383;&#31526;&#22312;&#25351;&#23450;&#30340; <b>&#23383;&#31526;&#38598;</b> &#20013;&#65292;&#21017;&#31435;&#21363;&#36820;&#22238;&#25351;&#21521;&#35813;&#23383;&#31526;&#30340;&#25351;&#38024;&#12290;&#22914;&#26524;&#26368;&#21518;&#27809;&#26377;&#25214;&#21040;&#20219;&#20309;&#22312;&#25351;&#23450;&#23383;&#31526;&#38598;&#20013;&#30340;&#23383;&#31526;&#65292;&#21017;&#36820;&#22238; <b>NULL</b> &#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> *<span>s</span> = <span>"Hello World!"</span>;
    <span>char</span> *<span>accept</span> = <span>"Wo"</span>;

    printf(<span>"%s\n"</span>, strpbrk(s, accept));

    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
o World!
</pre>
</div>
</div>
</div>
<div>
<h2>&#23383;&#31526;&#20018;&#20998;&#21106;(strtok, strtok_r, strsep)</h2>
<div>
</div><div>
<h3>strtok</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strtok</span>(<span>char</span> *<span>str</span>, <span>const</span> <span>char</span> *<span>delim</span>);
</pre>
</div>

<p>
strtok()&#26681;&#25454;&#31532;&#20108;&#20010;&#21442;&#25968;&#25351;&#23450;&#30340;&#20998;&#38548;&#31526;(&#21487;&#33021;&#23384;&#22312;&#22810;&#20010;&#19981;&#21516;&#30340;&#20998;&#38548;&#31526;)&#23558;&#25351;&#23450;&#23383;&#31526;&#20018;&#20998;&#21106;&#25104;&#22810;&#20010;&#23376;&#20018;&#12290;&#36890;&#36807;&#22810;&#27425;&#35843;&#29992;strtok()&#65292;&#21487;&#20197;&#20381;&#27425;&#33719;&#24471;&#23383;&#31526;&#20018;&#30340;&#22810;&#20010;&#23376;&#20018;&#30340;&#39318;&#22320;&#22336;&#12290;&#35201;&#27880;&#24847;&#30340;&#26159;&#65292;&#38500;&#20102;&#31532;&#19968;&#27425;&#35843;&#29992;&#26102;&#23558;&#24453;&#20998;&#21106;&#23383;&#31526;&#20018;&#20316;&#20026;&#31532;&#19968;&#20010;&#21442;&#25968;&#65292;&#21518;&#32493;&#30340;&#35843;&#29992;&#35201;&#23558;&#31532;&#19968;&#20010;&#21442;&#25968;&#32622;&#20026; <b>NULL</b> &#12290;&#24403;&#23383;&#31526;&#20018;&#24050;&#32463;&#26080;&#27861;&#20877;&#20998;&#21106;&#26102;&#65292;strtok()&#36820;&#22238; <b>NULL</b> &#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> <span>s</span>[1024] = <span>"abc;lsdk:lskdj,;slsj"</span>;
    <span>char</span> *<span>delm</span> = <span>";:,"</span>;
    <span>char</span> *<span>result</span> = <span>NULL</span>;
    <span>int</span> <span>len</span> = strlen(s);
    <span>int</span> <span>i</span> = 0;

    result = strtok(s, delm);
    <span>while</span> (result != <span>NULL</span>) {
        printf(<span>"Source:%s, Sub:%s\n"</span>, s, result);
        result = strtok(<span>NULL</span>, delm);
    }

    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
Source:abc Sub:abc
Source:abc Sub:lsdk
Source:abc Sub:lskdj
Source:abc Sub:slsj
</pre>

<p>
&#38500;&#20102;&#19978;&#38754;&#35828;&#36807;&#30340;strtok()&#30340;&#29992;&#27861;&#22806;&#65292;&#36824;&#35201;&#27880;&#24847;&#30340;&#26159;&#65292;&#20316;&#20026;&#24453;&#20998;&#21106;&#30340;&#23383;&#31526;&#20018;&#65292;&#23427;&#24517;&#39035;&#26159; <b>&#21487;&#26356;&#25913;&#30340;</b> &#12290;&#21542;&#21017;&#34429;&#28982;&#21487;&#20197;&#36890;&#36807;&#32534;&#35793;&#65292;&#20294;&#36816;&#34892;&#20250;&#20986;&#38169;&#12290;&#35201;&#29702;&#35299;&#36825;&#20010;&#29616;&#35937;&#65292;&#39318;&#20808;&#35201;&#20102;&#35299;strtok()&#30340;&#20869;&#37096;&#26426;&#21046;&#12290;
</p>

<p>
&#20102;&#35299;&#20854;&#26426;&#21046;&#65292;&#27809;&#24517;&#35201;&#21435;&#23547;&#25214;&#20854;&#23454;&#29616;&#28304;&#20195;&#30721;&#65292;&#21482;&#35201;&#23545;&#23427;&#30340;&#25805;&#20316;&#36807;&#31243;&#36827;&#34892;&#21078;&#26512;&#23601;&#30693;&#36947;&#20102;&#12290;&#20808;&#30475;&#19979;&#38754;&#30340;&#20195;&#30721;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>


<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> <span>s</span>[64] = <span>"To be or not to be"</span>;
    <span>char</span> *<span>delm</span> = <span>" ,."</span>;         <span>/* </span><span>&#20998;&#38548;&#31526;&#65306;&#31354;&#26684; </span><span>*/</span>
    <span>char</span> *<span>result</span> = <span>NULL</span>;
    <span>int</span> <span>i</span> = 0, <span>len</span> = strlen(s);

    <span>for</span> (i = 0; i &lt; len; ++i) { <span>/* </span><span>&#36880;&#20010;&#25171;&#21360;s&#20013;&#30340;&#23383;&#31526; </span><span>*/</span>
        printf(<span>"%c "</span>, s[i]);
    }
    printf(<span>"\n"</span>);


    <span>for</span> (i = 0; i &lt; len; ++i) { <span>/* </span><span>&#36880;&#20010;&#25171;&#21360;s&#20013;&#23383;&#31526;&#30340;&#25968;&#20540; </span><span>*/</span>
        printf(<span>"%d "</span>, (<span>int</span>)s[i]);
    }
    printf(<span>"\n"</span>);

    result = strtok(s, delm);
    <span>while</span> (result != <span>NULL</span>) {    <span>/* </span><span>&#35266;&#23519;s&#20013;&#23383;&#31526;&#25968;&#20540;&#30340;&#21464;&#21270; </span><span>*/</span>

        <span>for</span> (i = 0; i &lt; len; ++i) {
            printf(<span>"%d "</span>, (<span>int</span>)s[i]);
        }
        printf(<span>"\n"</span>);

        result = strtok(<span>NULL</span>, delm);
    }
    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col>

<col>

<col>

<col>

<col>

<col>

<col>

<col>

<col>

<col>

<col>

<col>

<col>

<col>

<col>

<col>

<col>

<col>
</colgroup>
<tbody>
<tr>
<td>T</td>
<td>o</td>
<td>&nbsp;</td>
<td>b</td>
<td>e</td>
<td>&nbsp;</td>
<td>o</td>
<td>r</td>
<td>&nbsp;</td>
<td>n</td>
<td>o</td>
<td>t</td>
<td>&nbsp;</td>
<td>t</td>
<td>o</td>
<td>&nbsp;</td>
<td>b</td>
<td>e</td>
</tr>

<tr>
<td>84</td>
<td>111</td>
<td>32</td>
<td>98</td>
<td>101</td>
<td>32</td>
<td>111</td>
<td>114</td>
<td>32</td>
<td>110</td>
<td>111</td>
<td>116</td>
<td>32</td>
<td>116</td>
<td>111</td>
<td>32</td>
<td>98</td>
<td>101</td>
</tr>

<tr>
<td>84</td>
<td>111</td>
<td>0</td>
<td>98</td>
<td>101</td>
<td>32</td>
<td>111</td>
<td>114</td>
<td>32</td>
<td>110</td>
<td>111</td>
<td>116</td>
<td>32</td>
<td>116</td>
<td>111</td>
<td>32</td>
<td>98</td>
<td>101</td>
</tr>

<tr>
<td>84</td>
<td>111</td>
<td>0</td>
<td>98</td>
<td>101</td>
<td>0</td>
<td>111</td>
<td>114</td>
<td>32</td>
<td>110</td>
<td>111</td>
<td>116</td>
<td>32</td>
<td>116</td>
<td>111</td>
<td>32</td>
<td>98</td>
<td>101</td>
</tr>

<tr>
<td>84</td>
<td>111</td>
<td>0</td>
<td>98</td>
<td>101</td>
<td>0</td>
<td>111</td>
<td>114</td>
<td>0</td>
<td>110</td>
<td>111</td>
<td>116</td>
<td>32</td>
<td>116</td>
<td>111</td>
<td>32</td>
<td>98</td>
<td>101</td>
</tr>

<tr>
<td>84</td>
<td>111</td>
<td>0</td>
<td>98</td>
<td>101</td>
<td>0</td>
<td>111</td>
<td>114</td>
<td>0</td>
<td>110</td>
<td>111</td>
<td>116</td>
<td>0</td>
<td>116</td>
<td>111</td>
<td>32</td>
<td>98</td>
<td>101</td>
</tr>

<tr>
<td>84</td>
<td>111</td>
<td>0</td>
<td>98</td>
<td>101</td>
<td>0</td>
<td>111</td>
<td>114</td>
<td>0</td>
<td>110</td>
<td>111</td>
<td>116</td>
<td>0</td>
<td>116</td>
<td>111</td>
<td>0</td>
<td>98</td>
<td>101</td>
</tr>

<tr>
<td>84</td>
<td>111</td>
<td>0</td>
<td>98</td>
<td>101</td>
<td>0</td>
<td>111</td>
<td>114</td>
<td>0</td>
<td>110</td>
<td>111</td>
<td>116</td>
<td>0</td>
<td>116</td>
<td>111</td>
<td>0</td>
<td>98</td>
<td>101</td>
</tr>
</tbody>
</table>
<p>
&#21487;&#20197;&#30475;&#21040;&#65292;s&#20013;&#30340;&#20998;&#38548;&#31526;&#65292;&#36880;&#27425;&#22320;&#34987;&#32622;&#20026;'\0'&#21363;&#23383;&#31526;&#20018;&#32467;&#26463;&#31526;&#12290;&#36825;&#23601;&#26159;strtok()&#20998;&#21106;&#23383;&#31526;&#20018;&#30340;&#20869;&#37096;&#21407;&#29702;&#20102;&#12290;&#32780;strtok()&#36820;&#22238;&#30340;&#25351;&#38024;&#65292;&#20854;&#23454;&#23601;&#26159;s&#20013;&#21508;&#20010;&#23376;&#20018;&#30340;&#36215;&#22987;&#20301;&#32622;&#20102;&#12290;&#22914;&#26524;s&#25351;&#21521;&#30340;&#20869;&#23481;&#26159;&#26080;&#27861;&#34987;&#20462;&#25913;&#30340;&#65292;&#37027;&#20040;strtok()&#33258;&#28982;&#20063;&#23601;&#26080;&#27861;&#23558;&#21407;&#20808;&#30340;&#20998;&#38548;&#31526;&#32622;&#20026;&#23383;&#31526;&#32467;&#26463;&#31526;&#20102;&#12290;
</p>

<p>
&#24403;&#28982;&#20102;&#65292;&#30001;&#20110;&#28304;&#23383;&#31526;&#20018;&#20250;&#34987;&#20462;&#25913;&#65292;&#22312;&#23454;&#38469;&#20013;&#65292;&#22914;&#26524;&#38656;&#35201;&#65292;&#21487;&#20197;&#29992;strdup()&#26469;&#24314;&#31435;&#19968;&#20010;&#28304;&#23383;&#31526;&#20018;&#30340;&#21103;&#26412;&#12290;
</p>
</div>
</div>
<div>
<h3>strtok_r</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strtok_r</span>(<span>char</span> *<span>str</span>, <span>const</span> <span>char</span> *<span>delim</span>, <span>char</span> **<span>saveptr</span>);
</pre>
</div>

<p>
strtok_r()&#26159;Linux&#19979;&#30340;strtok()&#30340;&#21487;&#37325;&#20837;&#29256;&#26412;(&#32447;&#31243;&#23433;&#20840;&#29256;&#26412;)&#65292;&#23427;&#27604;strtok()&#22810;&#20102;&#19968;&#20010;&#21442;&#25968; <b>saveptr</b> &#65292;&#36825;&#20010;&#21442;&#25968;&#29992;&#20110;&#22312;&#20998;&#21106;&#23383;&#31526;&#20018;&#26102;&#20445;&#23384;&#19978;&#19979;&#25991;&#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> <span>s</span>[64] = <span>"Hello world"</span>;
    <span>char</span> *<span>delm</span> = <span>" "</span>;
    <span>char</span> *<span>result</span> = <span>NULL</span>, *<span>ptr</span> = <span>NULL</span>;

    printf(<span>"Source:%p\n"</span>, s);
    result = strtok_r(s, delm, &amp;ptr);
    <span>while</span> (result != <span>NULL</span>) {
        printf(<span>"Result:%p\t"</span>, result);
        printf(<span>"Saveptr:%p\n"</span>, ptr);
        printf(<span>"---%s\t"</span>, result);
        printf(<span>"---%s\n"</span>, ptr);

        result = strtok_r(<span>NULL</span>, delm, &amp;ptr);
    }
    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
Source:0x7fff180f3de0
Result:0x7fff180f3de0 Saveptr:0x7fff180f3de6
---Hello              ---world
Result:0x7fff180f3de6 Saveptr:0x7fff180f3deb
---world              ---
</pre>
<p>
&#21487;&#20197;&#30475;&#21040;&#65292;saveptr&#36825;&#20010;&#25351;&#38024;&#22312;&#27599;&#27425;&#35843;&#29992;strtok_r()&#21518;&#23601;&#25351;&#21521;&#20102;&#26410;&#20998;&#21106;&#30340;&#37096;&#20998;&#30340;&#39318;&#22320;&#22336;&#12290;&#30456;&#23545;&#22320;&#65292;strtok()&#21017;&#26159;&#22312;&#20869;&#37096;&#26377;&#19968;&#20010;&#38745;&#24577;&#32531;&#20914;&#21306;&#65292;&#36890;&#36807;&#36825;&#20010;&#38745;&#24577;&#32531;&#20914;&#21306;&#26469;&#35760;&#24405;&#26410;&#22788;&#29702;&#30340;&#36215;&#22987;&#20301;&#32622;&#65292;&#25152;&#20197;strtok()&#19981;&#26159;&#32447;&#31243;&#23433;&#20840;&#30340;&#12290;
</p>
</div>
</div>

<div>
<h3>strsep</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strsep</span>(<span>char</span> **<span>stringp</span>, <span>const</span> <span>char</span> *<span>delim</span>);
</pre>
</div>

<p>
strsep()&#21516;&#26679;&#26159;&#23383;&#31526;&#20018;&#20998;&#21106;&#20989;&#25968;&#65292;&#23427;&#21644;strtok()&#30340;&#19981;&#21516;&#20043;&#22788;&#22312;&#20110;&#65292;&#23427;&#20250;&#30452;&#25509;&#20462;&#25913;&#24453;&#20998;&#21106;&#30340;&#25351;&#38024;&#30340;&#20540;&#65292;&#35753;&#23427;&#22987;&#32456;&#25351;&#21521;&#26410;&#22788;&#29702;&#37096;&#20998;&#30340;&#36215;&#22987;&#20301;&#32622;&#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> <span>s</span>[64] = <span>"To be or not to be"</span>;
    <span>char</span> *<span>source</span> = s;
    <span>char</span> *<span>delm</span> = <span>" "</span>;
    <span>char</span> *<span>result</span> = <span>NULL</span>;

    <span>while</span> (source != <span>NULL</span>) {
        printf(<span>"Source:%s | "</span>, source);
        result = strsep(&amp;source, delm);
        printf(<span>"result:%s\n"</span>, result);
    }
    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;
</p>
<pre>
Source:To be or not to be | result:To
Source:be or not to be | result:be
Source:or not to be | result: or
Source:not to be | result: not
Source:to be | result: to
Source:be | result: be
</pre>

<p>
&#22240;&#20026;&#21644;strtok()&#30340;&#36825;&#20010;&#19981;&#21516;&#20043;&#22788;&#65292;strsep&#19981;&#38656;&#35201;&#21306;&#20998;&#31532;&#19968;&#27425;&#35843;&#29992;&#21518;&#21518;&#32493;&#30340;&#36830;&#32493;&#35843;&#29992;&#65292;&#21487;&#20197;&#29992;&#32479;&#19968;&#30340;&#25805;&#20316;&#26469;&#23545;&#23383;&#31526;&#20018;&#36827;&#34892;&#20998;&#21106;&#12290;
</p>
</div>
</div>
</div>
<div>
<h2>&#23383;&#31526;&#20018;&#21305;&#37197;(strstr)</h2>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strstr</span>(<span>const</span> <span>char</span> *<span>haystack</span>, <span>const</span> <span>char</span> *<span>needle</span>);
</pre>
</div>

<p>
strstr()&#36820;&#22238;&#23383;&#31526;&#20018;needle&#22312;&#23383;&#31526;&#20018;haystack&#20013;&#31532;&#19968;&#27425;&#20986;&#29616;&#30340;&#20301;&#32622;&#65307;&#22914;&#26524;&#27809;&#26377;&#21305;&#37197;&#65292;&#21017;&#36820;&#22238; <b>NULL</b> &#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> *<span>s</span> = <span>"To be or not to be."</span>;
    <span>char</span> *<span>p</span> = <span>"be"</span>;

    printf(<span>"%s\n"</span>, strstr(s, p));
    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
be or not to be.
</pre>
</div>
</div>

<div>
<h2>&#23383;&#31526;&#20018;&#21103;&#26412;&#21019;&#24314;(strdup, strndup, strdupa, strndupa)</h2>
<div>
</div><div>
<h3>strdup</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strdup</span>(<span>const</span> <span>char</span> *<span>s</span>);
</pre>
</div>

<p>
strdup()&#35843;&#29992;malloc()&#20998;&#37197;&#19968;&#22359;&#20869;&#23384;&#24182;&#23558;&#23383;&#31526;&#20018;s&#30340;&#20869;&#23481;&#25335;&#36125;&#36827;&#21435;&#65292;&#20135;&#29983;s&#30340;&#21103;&#26412;&#12290;&#35201;&#27880;&#24847;&#30340;&#26159;&#65292;&#22312;&#26368;&#21518;&#24212;&#35813;&#35843;&#29992;free()&#26469;&#37322;&#25918;&#21103;&#26412;&#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> *<span>s</span> = <span>"abcde"</span>;
    <span>char</span> *<span>dup</span> = strdup(s);
    printf(<span>"%s\n"</span>, dup);
    free(dup);
    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
abcde
</pre>
</div>
</div>
<div>
<h3>strndup</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strndup</span>(<span>const</span> <span>char</span> *<span>s</span>, <span>size_t</span> <span>n</span>);
</pre>
</div>

<p>
strndup()&#21644;strdup()&#31867;&#20284;&#65292;&#20294;&#26368;&#22810;&#21482;&#25335;&#36125;s&#30340;&#21069;n&#20010;&#23383;&#33410;&#12290;&#22914;&#26524;s&#30340;&#38271;&#24230;&#22823;&#20110;n&#65292;&#36824;&#20250;&#22312;&#21103;&#26412;&#21518;&#28155;&#21152;&#32456;&#27490;&#31526;&#12290;
</p>

<p>
&#31034;&#20363;&#65306;
</p>
<div>

<pre><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span>#include</span> <span>&lt;string.h&gt;</span>

<span>int</span> <span>main</span>(<span>int</span> <span>argc</span>, <span>char</span> *<span>argv</span>[])
{
    <span>char</span> *<span>s</span> = <span>"abcde"</span>;
    <span>char</span> *<span>dup</span> = strndup(s, 4);

    printf(<span>"%s\n"</span>, dup);

    free(dup);
    <span>return</span> 0;
}
</pre>
</div>

<p>
&#32467;&#26524;&#65306;
</p>
<pre>
abcd
</pre>
</div>
</div>
<div>
<h3>strdupa</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strdupa</span>(<span>const</span> <span>char</span> *<span>s</span>);
</pre>
</div>

<p>
strdupa()&#21644;strdup()&#31867;&#20284;&#65292;&#20294;&#22312;&#20998;&#37197;&#20869;&#23384;&#26102;&#65292;&#23427;&#20351;&#29992;alloca()&#32780;&#19981;&#26159;malloc()&#12290;
</p>
</div>
</div>
<div>
<h3>strndupa</h3>
<div>
<p>
&#20989;&#25968;&#21407;&#22411;&#65306;
</p>
<div>

<pre><span>char</span> *<span>strndupa</span>(<span>const</span> <span>char</span> *<span>s</span>, <span>size_t</span> <span>n</span>);
</pre>
</div>

<p>
strndupa()&#20043;&#20110;strdupa()&#23601;&#22914;strndup()&#20043;&#20110;strdup()&#65292;&#19981;&#20877;&#36184;&#36848;&#12290;
</p>
</div>
</div>
</div>