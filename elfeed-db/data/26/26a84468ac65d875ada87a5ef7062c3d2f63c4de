<p>
STRING &#31867;&#26159; Tesseract &#20013;&#33258;&#23450;&#20041;&#30340;&#23383;&#31526;&#20018;&#31867;&#65292;&#23553;&#35013;&#20102;&#19968;&#20123;&#23383;&#31526;&#20018;&#25805;&#20316;&#65292;&#35813;&#31867;&#23450;&#20041;&#20110; ccutil/strngs.h &#20013;&#65292;&#21516;&#26679;&#30340;&#65292;&#19981;&#30693;&#36947;&#20986;&#20110;&#20160;&#20040;&#30446;&#30340;&#65292;&#20854;&#35774;&#35745;&#35753;&#20154;&#19968;&#24320;&#22987;&#25720;&#19981;&#30528;&#22836;&#33041;&#12290;
</p>

<p>
&#25353;&#29702;&#26469;&#35828;&#65292;&#22914;&#26524;&#35201;&#23454;&#29616;&#19968;&#20010;&#23383;&#31526;&#20018;&#31867;&#65292;&#37027;&#20040;&#20854;&#20869;&#37096;&#24212;&#35813;&#35201;&#26377;&#19968;&#20010;&#20445;&#23384;&#23383;&#31526;&#20018;&#20869;&#23481;&#30340;&#25968;&#25454;&#25104;&#21592;&#65292;&#36825;&#20010; STRING &#31867;&#30830;&#23454;&#26377;&#25968;&#25454;&#25104;&#21592;&#65292;&#19981;&#36807;&#20854;&#31867;&#22411;&#26159;&#20869;&#37096;&#23450;&#20041;&#30340;&#19968;&#20010;&#32467;&#26500; STRING_HEADER:
</p>

<div>

<pre><span>class</span> <span>TESS_API</span> <span>STRING</span> {
<span>public</span>:
    <span>// </span><span>....</span>

<span>private</span>:
    <span>typedef</span> <span>struct</span> <span>STRING_HEADER</span> {
        <span>int</span> <span>capacity_</span>;

        <span>// </span><span>used_ is how much of the capacity is currently being used,</span>
        <span>// </span><span>including a '\0' terminator.</span>
        <span>// </span><span>if used_ is 0 then string is NULL(not even the '\0')</span>
        <span>// </span><span>else if used_ &gt; 0 then it is strlen() + 1 (because it includes '\0')</span>
        <span>mutable</span> <span>int</span> <span>used_</span>;
    } <span>STRING_HEADER</span>;

    <span>STRING_HEADER</span> *<span>data_</span>;

    <span>// </span><span>....</span>
};
</pre>
</div>

<p>
&#21487;&#20197;&#30475;&#21040;&#36825;&#20010;&#25968;&#25454;&#25104;&#21592;&#20013;&#24182;&#27809;&#26377;&#20445;&#23384;&#23383;&#31526;&#20018;&#20869;&#23481;&#30340;&#37096;&#20998;&#12290;
</p>

<p>
STRING &#31867;&#20013;&#26377;&#20004;&#20010;&#26041;&#27861;&#65292;&#36820;&#22238;&#30340;&#26159;&#19968;&#20010; <b>const char *</b> &#31867;&#22411;&#30340;&#20540;&#65292;&#36825;&#20004;&#20010;&#26041;&#27861;&#30340;&#21517;&#31216;&#20026; <b>string()</b> &#21644; <b>c_str()</b> &#65292;&#20174;&#36825;&#20004;&#28857;&#19978;&#26469;&#30475;&#65292;&#21487;&#20197;&#35748;&#20026;&#36825;&#20004;&#20010;&#26041;&#27861;&#26159;&#23558; STRING &#31867;&#20869;&#37096;&#23384;&#20648;&#30340;&#23383;&#31526;&#20018;&#20869;&#23481;&#36716;&#25442;&#20026; <b>const char *</b> &#31867;&#22411;&#36820;&#22238;&#20102;&#20986;&#26469;&#65292;&#37027;&#20040;&#21487;&#20197;&#20174;&#36825;&#20004;&#20010;&#26041;&#27861;&#21435;&#20837;&#25163;&#26469;&#21457;&#25496;&#36825;&#20010;&#31867;&#30340;&#31192;&#23494;&#12290;
</p>

<p>
&#36825;&#20004;&#20010;&#26041;&#27861;&#30340;&#23454;&#29616;&#37117;&#24456;&#31616;&#21333;:
</p>
<ul>
<li><p>
string() &#26041;&#27861;
</p>

<div>

<pre><span>const</span> <span>char</span>* <span>STRING</span>::<span>string</span>() <span>const</span> {
    <span>const</span> <span>STRING_HEADER</span>* <span>header</span> = GetHeader();
    <span>if</span> (header-&gt;used_ == 0)
        <span>return</span> <span>NULL</span>;

    <span>// </span><span>mark header length unreliable because tesseract might</span>
    <span>// </span><span>cast away the const and mutate the string directly.</span>
    header-&gt;used_ = -1;
    <span>return</span> GetCStr();
}
</pre>
</div></li>

<li><p>
c_str()
</p>

<div>

<pre><span>const</span> <span>char</span>* <span>STRING</span>::<span>c_str</span>() <span>const</span> {
    <span>return</span> string();
}
</pre>
</div></li>
</ul>


<p>
c_str() &#26041;&#27861;&#26159; string() &#26041;&#27861;&#30340;&#21035;&#21517;&#65292;&#32780; string() &#26041;&#27861;&#20013;&#36820;&#22238;&#30340;&#32467;&#26524;&#26159; GetCStr() &#36825;&#20010;&#26041;&#27861;&#30340;&#32467;&#26524;&#65292;&#39034;&#34276;&#25720;&#29916;&#25214;&#21040;&#36825;&#20010;&#26041;&#27861;&#65292;&#21457;&#29616;&#23427;&#30340;&#23454;&#29616;&#22914;&#19979;:
</p>
<div>

<pre><span>inline</span> <span>const</span> <span>char</span>* <span>GetCStr</span>() <span>const</span> {
    <span>return</span> ((<span>const</span> <span>char</span> *)data_) + <span>sizeof</span>(STRING_HEADER);
};
</pre>
</div>

<p>
&#20063;&#23601;&#26159;&#35828;&#65292;STRING &#31867;&#25226;&#23383;&#31526;&#20018;&#20869;&#23481;&#25918;&#22312;&#20102; data_ &#21518;&#38754;&#30340;&#37027;&#20010;&#22320;&#22336;&#31354;&#38388;&#19978;&#65292;&#19981;&#36807;&#36825;&#27573;&#31354;&#38388;&#26159;&#21311;&#21517;&#30340;&#65292;&#21482;&#33021;&#36890;&#36807;&#19978;&#38754;&#36825;&#26679;&#30340;&#26041;&#24335;&#36827;&#34892;&#35775;&#38382;&#12290;
</p>

<p>
&#21040;&#24213;&#26159;&#20986;&#20110;&#20309;&#31181;&#32771;&#34385;&#36827;&#34892;&#36825;&#26679;&#30340;&#35774;&#35745;&#65292;&#25105;&#20063;&#26080;&#20174;&#24471;&#20043;&#65292;&#20294;&#25105;&#20010;&#20154;&#26159;&#23545;&#36825;&#20010;&#35774;&#35745;&#19981;&#22826;&#36190;&#21516;&#30340;&#12290;&#35201;&#35828;&#26377;&#20160;&#20040;&#20248;&#28857;&#65292;&#23601;&#26159;&#22312;&#36827;&#34892;&#20869;&#23384;&#20998;&#37197;&#26102;&#23569;&#20102;&#19968;&#27493;&#25805;&#20316; &mdash;&mdash; &#22312; STRING::AllocData &#20013;&#26159;&#36825;&#26679;&#36827;&#34892;&#20869;&#23384;&#20998;&#37197;&#30340;:
</p>
<div>

<pre><span>char</span> *<span>STRING</span>::<span>AllocData</span>(<span>int</span> <span>used</span>, <span>int</span> <span>capacity</span>) {
    data_ = (<span>STRING_HEADER</span> *)alloc_string(capacity + <span>sizeof</span>(STRING_HEADER));

    <span>STRING_HEADER</span> *<span>header</span> = GetHeader();
    header-&gt;capacity_ = capacity;
    header-&gt;used_ = used;

    <span>return</span> GetCStr();
}
</pre>
</div>

<p>
&#21478;&#22806;&#65292;&#19978;&#38754;&#36825;&#20010;&#26041;&#27861;&#37324;&#30340; GetHeader() &#26041;&#27861;&#36820;&#22238;&#30340;&#23601;&#26159; data_ &#65292;&#30452;&#25509;&#36825;&#26679;&#25105;&#24819;&#20063;&#26159;&#21487;&#20197;&#30340;:
</p>
<div>

<pre>data_ = (<span>STRING_HEADER</span> *)alloc_string(capacity + <span>sizeof</span>(STRING_HEADER));

data_-&gt;capacity_ = capacity;
data_-&gt;used_ = used;

<span>return</span> GetCStr();
</pre>
</div>

<p>
&#22312; STRING &#31867;&#23553;&#35013;&#30340;&#26041;&#27861;&#37324;&#65292;&#22823;&#37096;&#20998;&#22312; C/C++ &#20013;&#24050;&#26377;&#23545;&#24212;&#30340;&#23383;&#31526;&#20018;&#25805;&#20316;&#12290;
</p>