<div>
<h2>&#30446;&#24405;</h2>
<div>
<ul>
<li><a href="http://www.zmonster.me#orgheadline1" rel="noopener noreferrer" target="_blank">&#24402;&#24182;&#25490;&#24207;</a></li>
<li><a href="http://www.zmonster.me#orgheadline2" rel="noopener noreferrer" target="_blank">&#31639;&#27861;&#24605;&#24819;</a></li>
<li><a href="http://www.zmonster.me#orgheadline3" rel="noopener noreferrer" target="_blank">&#23436;&#25972;&#23454;&#29616;</a></li>
<li><a href="http://www.zmonster.me#orgheadline4" rel="noopener noreferrer" target="_blank">&#21457;&#25955;&#65306;&#22806;&#25490;&#24207;&#24212;&#29992;</a></li>
<li><a href="http://www.zmonster.me#orgheadline5" rel="noopener noreferrer" target="_blank">References</a></li>
</ul>
</div>
</div>

<div>
<h2>&#24402;&#24182;&#25490;&#24207;</h2>
<div>
<p>
&#24402;&#24182;&#25490;&#24207;&#20063;&#26159;&#19968;&#31181;&#20351;&#29992;&#20998;&#27835;&#27861;&#26469;&#23454;&#29616;&#30340;&#26377;&#25928;&#25490;&#24207;&#31639;&#27861;&#65292;&#23427;&#26159;&#29616;&#20195;&#35745;&#31639;&#26426;&#21019;&#22987;&#20154;John von Neumann&#20110;1945&#24180;&#21457;&#26126;&#30340;&#12290;
</p>

<p>
&#24402;&#24182;&#25490;&#24207;&#22312;&#20247;&#22810;&#25490;&#24207;&#31639;&#27861;&#20013;&#26082;&#26159;&#31283;&#23450;&#25490;&#24207;&#65292;&#21448;&#26377;&#19981;&#38169;&#30340;&#25928;&#29575;&#65292;&#21516;&#26102;&#65292;&#24402;&#24182;&#25490;&#24207;&#19981;&#20165;&#21487;&#20197;&#29992;&#20110;&#20869;&#25490;&#24207;&#65292;&#36824;&#21487;&#20197;&#29992;&#20110;&#22806;&#25490;&#24207;&#12290;&#25152;&#20197;&#35828;&#24402;&#24182;&#25490;&#24207;&#26159;&#38750;&#24120;&#20540;&#24471;&#23398;&#20064;&#30340;&#12290;
</p>

<p>
&#26412;&#25991;&#23558;&#23545;&#24402;&#24182;&#25490;&#24207;&#30340;&#24605;&#24819;&#36827;&#34892;&#38416;&#37322;&#65292;&#24182;&#32473;&#20986;&#23436;&#25972;&#30340;&#23454;&#29616;&#65292;&#28982;&#21518;&#23545;&#22806;&#25490;&#24207;&#36827;&#34892;&#25506;&#35752;&#12290;
</p>
</div>
</div>

<div>
<h2>&#31639;&#27861;&#24605;&#24819;</h2>
<div>
<p>
&#24402;&#24182;&#25490;&#24207;&#30340;&#24605;&#36335;&#22914;&#19979;(&#20197;&#20108;&#36335;&#24402;&#24182;&#20026;&#20363;)&#65306;
</p>
<ol>
<li>&#23558;&#25968;&#32452;&#21010;&#22343;&#20998;&#20026;&#20004;&#20010;&#23376;&#25968;&#32452;&#65307;</li>
<li>&#23545;&#20004;&#20010;&#23383;&#25968;&#32452;&#36827;&#34892;&#25490;&#24207;&#65307;</li>
<li>&#23558;&#25490;&#24207;&#22909;&#30340;&#20004;&#20010;&#23383;&#25968;&#32452;&#24402;&#24182;&#12290;</li>
</ol>


<p>
&#25152;&#35859; <b>N&#36335;&#24402;&#24182;</b> &#26159;&#25351;&#23558;&#25968;&#32452;&#22343;&#20998;&#20026;N&#20010;&#23376;&#25968;&#32452;&#65292;&#23558;&#23383;&#25968;&#32452;&#25490;&#24207;&#21518;&#20877;&#24402;&#24182;&#12290;&#22240;&#27492;&#20108;&#36335;&#24402;&#24182;&#26159;&#24402;&#24182;&#25490;&#24207;&#30340;&#26368;&#19968;&#33324;&#30340;&#24773;&#20917;&#12290;
</p>

<p>
&#36825;&#37324;&#26159;&#20108;&#36335;&#24402;&#24182;&#25490;&#24207;&#30340;&#19968;&#20010;&#22270;&#31034;&#65306;
<img src="http://www.zmonster.me/assets/img/merge-sort.png" alt="merge-sort.png" referrerpolicy="no-referrer" loading="lazy">
</p>

<p>
&#20108;&#36335;&#24402;&#24182;&#25490;&#24207;&#29992;python&#25551;&#36848;&#22914;&#19979;&#65306;
</p>
<div>

<pre><span>1: </span><span>def</span> <span>msort</span>(array):
<span>2: </span>    <span>length</span> = <span>len</span>(array)
<span>3: </span>    <span>if</span> length == 1:
<span>4: </span>        <span>return</span> array
<span>5: </span>    <span>else</span>:
<span>6: </span>        <span>mid</span> = length / 2
<span>7: </span>        <span>left</span> = msort(array[0: mid])
<span>8: </span>        <span>right</span> = msort(array[mid: length])
<span>9: </span>        <span>return</span> merge(left, right)
</pre>
</div>
<p>
&#24403;&#28982;&#65292;&#36825;&#37324;&#25551;&#36848;&#30340;&#26159;&#36882;&#24402;&#29256;&#26412;&#30340;&#31639;&#27861;&#65292;&#23454;&#38469;&#24773;&#20917;&#20013;&#26377;&#26102;&#20505;&#20063;&#20250;&#20026;&#20102;&#25928;&#29575;&#32780;&#20351;&#29992;&#24490;&#29615;&#32780;&#19981;&#26159;&#36882;&#24402;&#26469;&#23454;&#29616;&#24402;&#24182;&#25490;&#24207;&#12290;&#19979;&#38754;&#26159;&#20351;&#29992;&#24490;&#29615;&#30340;&#31639;&#27861;&#25551;&#36848;&#65306;
</p>
<div>

<pre><span> 1: </span><span>def</span> <span>msort</span>(array):
<span> 2: </span>    <span>length</span> = <span>len</span>(array)
<span> 3: </span>    <span>step</span> = 1
<span> 4: </span>    <span>while</span> step &lt; length:
<span> 5: </span>        <span>for</span> left <span>in</span> <span>range</span>(0, length - step, 2 * step):
<span> 6: </span>            <span>result</span> = merge(array[left:left + step],
<span> 7: </span>                           array[left + step: <span>min</span>(left + 2 * step,
<span> 8: </span>                                                  length)])
<span> 9: </span>            <span>array</span> = array[0:left] + result + array[<span>min</span>(left + 2 *
<span>10: </span>                                                       step, length)]
<span>11: </span>        <span>step</span> = step * 2
<span>12: </span>    <span>return</span> array
</pre>
</div>

<p>
msort&#20013;&#30340;&#24402;&#24182;&#37096;&#20998;(merge)&#30340;&#24605;&#24819;&#26159;&#65306;&#20998;&#21035;&#21462;&#20986;&#23383;&#25968;&#32452;&#20013;&#26368;&#23567;&#30340;&#20803;&#32032;&#65292;&#21462;&#23427;&#20204;&#20013;&#36739;&#23567;&#30340;&#25918;&#20837;&#21407;&#25968;&#32452;&#20013;&#65292;&#28982;&#21518;&#37325;&#22797;&#36825;&#20010;&#36807;&#31243;&#12290;&#12298;&#31639;&#27861;&#23548;&#35770;&#12299;&#20013;&#23558;&#36825;&#20010;&#36807;&#31243;&#31867;&#27604;&#20026;&#25972;&#29702;&#25169;&#20811;&#29260;&#30340;&#36807;&#31243;&#65292;&#38750;&#24120;&#24418;&#35937;&#12290;&#24819;&#35937;&#19968;&#19979;&#65292;&#26700;&#38754;&#19978;&#26377;&#20004;&#22534;&#25169;&#20811;&#65292;&#23427;&#20204;&#37117;&#26397;&#19979;&#25187;&#30528;&#65292;&#24182;&#19988;&#25353;&#29031;&#29260;&#38754;&#28857;&#25968;&#20174;&#23567;&#21040;&#22823;&#25918;&#32622;&#65292;&#25105;&#20204;&#35201;&#30340;&#26159;&#25226;&#36825;&#20004;&#22534;&#25169;&#20811;&#37117;&#25343;&#21040;&#25163;&#37324;&#65292;&#24182;&#19988;&#25353;&#29031;&#20174;&#23567;&#21040;&#22823;&#30340;&#39034;&#24207;&#25490;&#22909;&#24207;&#65292;&#36825;&#20010;&#26102;&#20505;&#35201;&#24590;&#20040;&#20570;&#65311;
</p>

<p>
&#24402;&#24182;&#30340;&#24605;&#24819;&#21487;&#20197;&#29992;python&#25551;&#36848;&#22914;&#19979;&#65306;
</p>
<div>

<pre><span> 1: </span><span>def</span> <span>merge</span>(left, right):
<span> 2: </span>    <span>llen</span> = <span>len</span>(left)
<span> 3: </span>    <span>lcur</span> = 0
<span> 4: </span>    <span>rlen</span> = <span>len</span>(right)
<span> 5: </span>    <span>rcur</span> = 0
<span> 6: </span>    <span>result</span> = []
<span> 7: </span>    <span>while</span> lcur &lt; llen <span>and</span> rcur &lt; rlen:
<span> 8: </span>        <span>lone</span> = left[lcur]
<span> 9: </span>        <span>rone</span> = right[rcur]
<span>10: </span>        result.append(<span>min</span>(lone, rone))
<span>11: </span>        <span>if</span> lone &lt; rone:
<span>12: </span>            <span>lcur</span> += 1
<span>13: </span>        <span>else</span>:
<span>14: </span>            <span>rcur</span> += 1
<span>15: </span>    <span>result</span> += left[lcur:]
<span>16: </span>    <span>result</span> += right[rcur:]
<span>17: </span>    <span>return</span> result
</pre>
</div>
</div>
</div>
<div>
<h2>&#23436;&#25972;&#23454;&#29616;</h2>
<div>
<p>
&#19979;&#38754;&#26159;&#32508;&#21512;&#20102;&#38750;&#36882;&#24402;&#19982;&#36882;&#24402;&#29256;&#26412;&#30340;&#20108;&#36335;&#24402;&#24182;&#25490;&#24207;&#30340;&#23436;&#25972;&#23454;&#29616;&#65292;&#32467;&#26524;&#30001;org-babel&#23545;&#20195;&#30721;&#22359;&#27714;&#20540;&#24471;&#21040;&#12290;
</p>
<div>

<pre><span> 1: </span><span># </span><span>-*- coding: utf-8 -*-</span>
<span> 2: </span><span>def</span> <span>merge</span>(left, right):
<span> 3: </span>    <span>llen</span> = <span>len</span>(left)
<span> 4: </span>    <span>lcur</span> = 0
<span> 5: </span>    <span>rlen</span> = <span>len</span>(right)
<span> 6: </span>    <span>rcur</span> = 0
<span> 7: </span>    <span>result</span> = []
<span> 8: </span>    <span>while</span> lcur &lt; llen <span>and</span> rcur &lt; rlen:
<span> 9: </span>        <span>lone</span> = left[lcur]
<span>10: </span>        <span>rone</span> = right[rcur]
<span>11: </span>        result.append(<span>min</span>(lone, rone))
<span>12: </span>        <span>if</span> lone &lt; rone:
<span>13: </span>            <span>lcur</span> += 1
<span>14: </span>        <span>else</span>:
<span>15: </span>            <span>rcur</span> += 1
<span>16: </span>    <span>result</span> += left[lcur:]
<span>17: </span>    <span>result</span> += right[rcur:]
<span>18: </span>    <span>return</span> result
<span>19: </span>
<span>20: </span><span>def</span> <span>msort_rec</span>(array):
<span>21: </span>    <span>length</span> = <span>len</span>(array)
<span>22: </span>    <span>if</span> length == 1:
<span>23: </span>        <span>return</span> array
<span>24: </span>    <span>else</span>:
<span>25: </span>        <span>mid</span> = length / 2
<span>26: </span>        <span>left</span> = msort_rec(array[0: mid])
<span>27: </span>        <span>right</span> = msort_rec(array[mid: length])
<span>28: </span>        <span>return</span> merge(left, right)
<span>29: </span>
<span>30: </span><span>def</span> <span>msort_iter</span>(array):
<span>31: </span>    <span>length</span> = <span>len</span>(array)
<span>32: </span>    <span>step</span> = 1
<span>33: </span>    <span>while</span> step &lt; length:
<span>34: </span>        <span>for</span> left <span>in</span> <span>range</span>(0, length - step, 2 * step):
<span>35: </span>            <span>result</span> = merge(array[left:left + step],
<span>36: </span>                           array[left + step: <span>min</span>(left + 2 * step,
<span>37: </span>                                                  length)])
<span>38: </span>            <span>array</span> = array[0:left] + result + array[<span>min</span>(left + 2 *
<span>39: </span>                                                       step, length):]
<span>40: </span>        <span>step</span> = step * 2
<span>41: </span>    <span>return</span> array
<span>42: </span>
<span>43: </span><span>if</span> <span>__name__</span> == <span>'__main__'</span>:
<span>44: </span>    <span>L</span> = [1, 4, 2, 6, 3, 5, 8, 7]
<span>45: </span>    <span>print</span> <span>"&#25490;&#24207;&#21069;: %r"</span> %(L)
<span>46: </span>    <span>R</span> = msort_rec(L)
<span>47: </span>    <span>print</span> <span>"&#25490;&#24207;&#21518;(&#36882;&#24402;): %r"</span> %(R)
<span>48: </span>    <span>I</span> = msort_iter(L)
<span>49: </span>    <span>print</span> <span>"&#25490;&#24207;&#21518;(&#38750;&#36882;&#24402;): %r"</span> %(I)
</pre>
</div>

<p>
&#32467;&#26524;
</p>
<pre>
&#25490;&#24207;&#21069;: [1, 4, 2, 6, 3, 5, 8, 7]
&#25490;&#24207;&#21518;(&#36882;&#24402;): [1, 2, 3, 4, 5, 6, 7, 8]
&#25490;&#24207;&#21518;(&#38750;&#36882;&#24402;): [1, 2, 3, 4, 5, 6, 7, 8]
</pre>
</div>
</div>

<div>
<h2>&#21457;&#25955;&#65306;&#22806;&#25490;&#24207;&#24212;&#29992;</h2>
<div>
<p>
&#24402;&#24182;&#25490;&#24207;&#30340;&#24605;&#24819;&#21487;&#20197;&#29992;&#20110;&#22806;&#25490;&#24207;&#12290;&#22806;&#25490;&#24207;&#26159;&#30456;&#23545;&#20869;&#25490;&#24207;&#32780;&#35328;&#30340;&#12290;&#22312;&#24120;&#35268;&#30340;&#23567;&#35268;&#27169;&#25490;&#24207;&#36807;&#31243;&#20013;&#65292;&#37117;&#26159;&#30452;&#25509;&#22312;&#20869;&#23384;&#20013;&#23545;&#25968;&#25454;&#36827;&#34892;&#25490;&#24207;&#22788;&#29702;&#30340;&#65292;&#32780;&#23545;&#20110;&#25968;&#25454;&#37327;&#26497;&#22823;&#30340;&#25490;&#24207;&#38382;&#39064;&#65292;&#36825;&#31181;&#26041;&#24335;&#26159;&#19981;&#29616;&#23454;&#30340;&#12290;&#36825;&#20010;&#26102;&#20505;&#23601;&#35201;&#36890;&#36807;&#22806;&#25490;&#24207;&#26469;&#36827;&#34892;&#65292;&#20808;&#23558;&#25968;&#25454;&#21010;&#20998;&#25104;&#22810;&#20010;&#35268;&#27169;&#33021;&#22312;&#20869;&#23384;&#20013;&#22788;&#29702;&#30340;&#23376;&#38598;&#65292;&#23545;&#21508;&#20010;&#23376;&#38598;&#25490;&#24207;&#21518;&#23384;&#25918;&#22312;&#20020;&#26102;&#30340;&#30913;&#30424;&#25991;&#20214;&#19978;&#65292;&#28982;&#21518;&#20877;&#23558;&#36825;&#20123;&#23376;&#38598;&#24402;&#24182;&#21040;&#36755;&#20986;&#25991;&#20214;&#20013;&#12290;&#36825;&#20010;&#36807;&#31243;&#35201;&#20351;&#29992;&#21040;&#22810;&#36335;&#24402;&#24182;&#65292;&#22914;&#19979;&#22270;&#25152;&#31034;&#65306;
</p>


<div>
<p><img src="http://www.zmonster.me/assets/img/external-sort.png" alt="external-sort.png" referrerpolicy="no-referrer" loading="lazy">
</p>
</div>

<p>
&#27880;&#65306;&#35813;&#22270;&#26469;&#33258; <a href="http://www.zmonster.me#orgheadline5" rel="noopener noreferrer" target="_blank">References</a> &#20013;&#31532;&#19968;&#31687;&#25991;&#31456;&#12290;
</p>

<p>
&#37027;&#20040;&#26469;&#23454;&#29616;&#19968;&#19979;&#21543;&#12290;
</p>

<p>
&#39318;&#20808;&#35201;&#21019;&#24314;&#19968;&#20010;&#22823;&#25991;&#20214;&#65292;&#24448;&#37324;&#38754;&#20889;&#20837;&#22823;&#37327;&#30340;&#25968;&#25454;&#65292;&#35813;&#20989;&#25968;&#23454;&#29616;&#22914;&#19979;(&#22240;&#20026;python&#19981;&#26041;&#20415;&#35835;&#21462;&#21333;&#20010;&#25968;&#23383;&#65292;&#19979;&#38754;&#30340;&#19996;&#35199;&#37117;&#26159;&#29992;C&#20889;&#30340;):
</p>
<div>

<pre><span> 1: </span><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span> 2: </span><span>#include</span> <span>&lt;stdlib.h&gt;</span>
<span> 3: </span><span>#include</span> <span>&lt;time.h&gt;</span>
<span> 4: </span>
<span> 5: </span><span>int</span> <span>rand_file</span>(<span>char</span> *<span>file</span>, <span>int</span> <span>num</span>)
<span> 6: </span>{
<span> 7: </span>    <span>int</span> <span>i</span> = 0;
<span> 8: </span>    <span>int</span> <span>now</span>;
<span> 9: </span>    <span>FILE</span> *<span>f</span> = fopen(file, <span>"w"</span>);
<span>10: </span>
<span>11: </span>    <span>if</span> (f == <span>NULL</span>) {
<span>12: </span>        perror(<span>"fopen"</span>);
<span>13: </span>        <span>return</span> 0;
<span>14: </span>    }
<span>15: </span>
<span>16: </span>    <span>for</span> (; i &lt; num; ++i) {
<span>17: </span>        srand((<span>int</span>)time(0));
<span>18: </span>        now = rand();
<span>19: </span>        fprintf(f, <span>"%d "</span>, now);
<span>20: </span>    }
<span>21: </span>
<span>22: </span>    fclose(f);
<span>23: </span>    <span>return</span> num;
<span>24: </span>}
</pre>
</div>

<p>
&#28982;&#21518;&#65292;&#25105;&#20204;&#38656;&#35201;&#19968;&#20010;&#23558;&#25991;&#20214;&#35835;&#20837;&#25968;&#32452;&#30340;&#20989;&#25968;&#21644;&#19968;&#20010;&#23558;&#25968;&#32452;&#20869;&#23481;&#20889;&#20837;&#25991;&#20214;&#30340;&#20989;&#25968;&#65292;&#23454;&#29616;&#22914;&#19979;&#65306;
</p>
<div>

<pre><span> 1: </span><span>#include</span> <span>&lt;stdio.h&gt;</span>
<span> 2: </span><span>#include</span> <span>&lt;stdlib.h&gt;</span>
<span> 3: </span>
<span> 4: </span><span>int</span> <span>read_to_mem</span>(<span>FILE</span> *<span>file</span>, <span>int</span> *<span>arr</span>, <span>int</span> <span>len</span>)
<span> 5: </span>{
<span> 6: </span>    <span>int</span> <span>i</span> = 0;
<span> 7: </span>    <span>if</span> (file != <span>NULL</span>) {
<span> 8: </span>        <span>for</span> (; !feof(file) &amp;&amp; i &lt; len; ++i) {
<span> 9: </span>            fscanf(file, <span>"%d"</span>, arr + i);
<span>10: </span>        }
<span>11: </span>        <span>return</span> i;
<span>12: </span>    }
<span>13: </span>    <span>else</span>
<span>14: </span>        <span>return</span> 0;
<span>15: </span>}
<span>16: </span>
<span>17: </span><span>int</span> <span>write_from_mem</span>(<span>FILE</span> *<span>file</span>, <span>int</span> *<span>arr</span>, <span>int</span> <span>len</span>)
<span>18: </span>{
<span>19: </span>    <span>int</span> <span>i</span> = 0;
<span>20: </span>    <span>if</span> (file != <span>NULL</span>) {
<span>21: </span>        <span>for</span> ( ; i &lt; len; ++i) {
<span>22: </span>            fprintf(file, <span>"%d "</span>, arr[i]);
<span>23: </span>        }
<span>24: </span>
<span>25: </span>        <span>return</span> i;
<span>26: </span>    }
<span>27: </span>
<span>28: </span>    <span>else</span>
<span>29: </span>        <span>return</span> 0;
<span>30: </span>}
</pre>
</div>

<p>
&#23436;&#25104;&#36825;&#20123;&#20934;&#22791;&#24037;&#20316;&#21518;&#65292;&#23601;&#21487;&#20197;&#24320;&#22987;&#23454;&#29616;&#22806;&#25490;&#24207;&#20102;&#12290;&#24490;&#29615;&#23558;&#22823;&#25991;&#20214;&#35835;&#20837;&#19968;&#37096;&#20998;&#21040;&#20869;&#23384;&#65292;&#28982;&#21518;&#23545;&#36825;&#19968;&#37096;&#20998;&#36827;&#34892;&#25490;&#24207;&mdash;&mdash;&#27492;&#26102;&#30340;&#25490;&#24207;&#21487;&#20197;&#20351;&#29992;&#24555;&#36895;&#25490;&#24207;&#12289;&#24402;&#24182;&#25490;&#24207;&#31561;&#21508;&#31181;&#25490;&#24207;&#31639;&#27861;&#65292;&#24182;&#26080;&#38480;&#21046;&#12290;
</p>

<p>
&#23558;&#21508;&#37096;&#20998;&#37117;&#25490;&#22909;&#24207;&#24182;&#20445;&#23384;&#20026;&#20020;&#26102;&#25991;&#20214;&#21518;&#30340;&#24402;&#24182;&#27493;&#39588;&#26159;&#22806;&#25490;&#24207;&#30340;&#26680;&#24515;&#25152;&#22312;&#12290;&#22810;&#36335;&#24402;&#24182;&#30340;&#24605;&#36335;&#21644;&#20108;&#36335;&#24402;&#24182;&#26159;&#31867;&#20284;&#30340;&#12290;&#21487;&#20197;&#23558;&#24402;&#24182;&#27169;&#22359;&#23454;&#29616;&#20026;&#65306;
</p>
<div>

<pre><span> 1: </span><span>#include</span> <span>&lt;stdlib.h&gt;</span>
<span> 2: </span>
<span> 3: </span><span>void</span> <span>merge</span>(<span>File</span> *<span>out</span>, <span>File</span> **<span>flist</span>, <span>int</span> <span>fnum</span>)
<span> 4: </span>{
<span> 5: </span>    <span>int</span> <span>i</span> = 0;
<span> 6: </span>    <span>int</span> <span>now</span> = 0;                <span>/* </span><span>&#29992;&#20110;&#20445;&#23384;&#24403;&#21069;&#26368;&#23567;&#30340;&#20540; </span><span>*/</span>
<span> 7: </span>    <span>int</span> *<span>fstaus</span> = (<span>int</span> *)calloc(fnum, <span>sizeof</span>(<span>int</span>)); <span>/* </span><span>&#35760;&#24405;&#25991;&#20214;&#29366;&#24577; </span><span>*/</span>
<span> 8: </span>    <span>int</span> *<span>farr</span> =(<span>int</span> *)calloc(fnum, <span>sizeof</span>(<span>int</span>));    <span>/* </span><span>&#35760;&#24405;&#20174;&#21508;&#20010;&#25991;&#20214;&#20013;&#21462;&#20986;&#30340;&#25968; </span><span>*/</span>
<span> 9: </span>    <span>int</span> <span>min</span> = 0;                <span>/* </span><span>&#35760;&#24405;&#24403;&#21069;&#20540;&#26368;&#23567;&#30340;&#25991;&#20214;&#32034;&#24341; </span><span>*/</span>
<span>10: </span>
<span>11: </span>    <span>for</span> (; i &lt; fnum; ++i) {     <span>/* </span><span>&#26816;&#26597;&#21508;&#20010;&#25991;&#20214;&#25351;&#38024;&#30340;&#29366;&#24577; </span><span>*/</span>
<span>12: </span>        <span>if</span> (feof(fscanf(flist[i], <span>"%d"</span>, farr + i))) {
<span>13: </span>            fstatus[i] = 0;
<span>14: </span>        }
<span>15: </span>        <span>else</span> {
<span>16: </span>            fstatus[i] = 1;
<span>17: </span>        }
<span>18: </span>    }
<span>19: </span>
<span>20: </span>    <span>while</span> (1) {
<span>21: </span>        now = 0;
<span>22: </span>        <span>for</span> (i = 0; i &lt; fnum &amp;&amp; !fstatus[i]; ++i) {}
<span>23: </span>        <span>if</span> (i &gt;= fnum) {     <span>/* </span><span>&#22914;&#26080;&#21487;&#29992;&#25991;&#20214;&#65292;&#21017;&#36864;&#20986; </span><span>*/</span>
<span>24: </span>            <span>break</span>;
<span>25: </span>        }
<span>26: </span>
<span>27: </span>        <span>for</span> (; i &lt; fnum; ++i) { <span>/* </span><span>&#20174;&#31532;&#19968;&#20010;&#21487;&#29992;&#30340;&#25991;&#20214;&#24320;&#22987;&#35835; </span><span>*/</span>
<span>28: </span>            <span>if</span> (fstatus[i] &amp;&amp; farr[i] &lt; now) {
<span>29: </span>                now = farr[i];
<span>30: </span>                min = i;
<span>31: </span>            }
<span>32: </span>        }
<span>33: </span>
<span>34: </span>        fprintf(out, <span>"%d "</span>, now); <span>/* </span><span>&#23558;&#26368;&#23567;&#20540;&#20889;&#20837;&#36755;&#20986;&#25991;&#20214; </span><span>*/</span>
<span>35: </span>
<span>36: </span>        <span>/* </span><span>&#35835;&#21462;&#35813;&#25991;&#20214;&#19979;&#19968;&#20010;&#25968;&#65292;&#24182;&#26816;&#26597;&#26159;&#21542;&#35835;&#23436; </span><span>*/</span>
<span>37: </span>        <span>if</span> (feof(fscanf(flist[min], <span>"%d"</span>, farr + min))) {
<span>38: </span>            fstatus[min] = 0;
<span>39: </span>        }
<span>40: </span>    }
<span>41: </span>
<span>42: </span>    free(farr);                 <span>/* </span><span>&#37322;&#25918;&#20869;&#23384; </span><span>*/</span>
<span>43: </span>    free(fstatus);
<span>44: </span>}
</pre>
</div>

<p>
&#23436;&#25972;&#30340;&#23454;&#29616;&#25105;&#23601;&#19981;&#20889;&#20102;&#65292;&#22826;&#32047;&hellip;&hellip;&#20889;&#36825;&#31687;&#25991;&#31456;&#23601;&#29992;&#20102;&#19968;&#25972;&#22825;&#12290;
</p>

<p>
&#21999;&#65292;&#22823;&#27010;&#23601;&#26159;&#36825;&#20010;&#26679;&#23376;&#12290;
</p>
</div>
</div>
<div>
<h2>References</h2>
<div>
<ol>
<li><a href="http://www.cnblogs.com/daoluanxiaozi/archive/2012/03/29/2423087.html" rel="noopener noreferrer" target="_blank">&#12298;&#32534;&#31243;&#29664;&#29585;&#65292;&#23383;&#23383;&#29664;&#29585;&#12299;1234&#35835;&#20070;&#31508;&#35760;&mdash;&mdash;&#22810;&#36335;&#24402;&#24182;&#25490;&#24207;</a></li>
<li><a href="http://diducoder.com/mass-data-topic-9-external-sort.html" rel="noopener noreferrer" target="_blank">&#28023;&#37327;&#25968;&#25454;&#22788;&#29702;&#19987;&#39064;&#65288;&#20061;&#65289;&mdash;&mdash;&#22806;&#25490;&#24207;</a></li>
<li><a href="http://www.cnblogs.com/huangxincheng/archive/2012/12/19/2824943.html" rel="noopener noreferrer" target="_blank">&#32463;&#20856;&#31639;&#27861;&#39064;&#27599;&#26085;&#28436;&#32451;&mdash;&mdash;&#31532;&#21313;&#20843;&#39064; &#22806;&#25490;&#24207;</a></li>
<li><a href="http://blog.csdn.net/v_JULY_v/article/details/6451990" rel="noopener noreferrer" target="_blank">&#31243;&#24207;&#21592;&#32534;&#31243;&#33402;&#26415;&#65306;&#31532;&#21313;&#31456;&#12289;&#22914;&#20309;&#32473;10^7&#20010;&#25968;&#25454;&#37327;&#30340;&#30913;&#30424;&#25991;&#20214;&#25490;&#24207;</a></li>
</ol>
</div>
</div>