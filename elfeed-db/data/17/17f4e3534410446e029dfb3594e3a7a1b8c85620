<p>Ever since I worked out <a href="/blog/2017/11/03/">how to render video from scratch</a> some
years ago, it’s been an indispensable tool in my software development
toolbelt. It’s the first place I reach when I need to display some
graphics, even if it means having to do the rendering myself. I’ve used
it often in throwaway projects in a disposable sort of way. More
recently, though, I’ve kept better track of these animations since some
of them <em>are</em> pretty cool, and I’d like to look a them again. This post
is a showcase of some of these projects.</p>

<p>Each project is in a ready-to-run state of compile, then run with the
output piped into a media player or video encoding. The header includes
the exactly commands you need. Since that’s probably inconvenient for
most readers, I’ve included a pre-recorded sample of each. Though in a
few cases, especially those displaying random data, video encoding
really takes something away from the final result, and it may be worth
running yourself.</p>

<p>The projects are not in any particular order.</p>

<h3 id="randu">RANDU</h3>

<p><a href="https://nullprogram.com/video/?v=randu"><img src="/img/showcase/randu.jpg" alt="" /></a><br />
<strong>Source</strong>:  <a href="https://gist.github.com/skeeto/05c1dce49140fc4ca709f5e887ddb527">randu.c</a></p>

<p>This is a little demonstration of the poor quality of the <a href="https://en.wikipedia.org/wiki/RANDU">RANDU
pseudorandom number generator</a>. Note how the source embeds a
monospace font so that it can render the text in the corner. For the 3D
effect, it includes an orthographic projection function. This function
will appear again later since I tend to cannibalize my own projects.</p>

<h3 id="color-sorting">Color sorting</h3>

<p><a href="https://nullprogram.com/video/?v=colors-odd-even"><img src="/img/showcase/colorsort.jpg" alt="" /></a><br />
<strong>Source</strong>:  <a href="https://gist.github.com/skeeto/a58bb8c5eb5b9124435bc1fd41ced891">colorsort.c</a></p>

<p>The original idea came from <a href="https://old.reddit.com/r/woahdude/comments/73oz1x/from_chaos_to_order/">an old reddit post</a>.</p>

<h3 id="kruskal-maze-generator">Kruskal maze generator</h3>

<p><a href="https://nullprogram.com/video/?v=kruskal"><img src="/img/showcase/animaze.jpg" alt="" /></a><br />
<strong>Source</strong>:  <a href="https://gist.github.com/skeeto/8b5c8c3475f4a02fb0c0eab1fe018e9b">animaze.c</a></p>

<p>This effect was invented by my current <a href="/blog/2016/09/02/">mentee student</a> while
working on maze / dungeon generation late last year. This particular
animation is my own implementation. It outputs Netpbm by default, but,
for both fun and practice, also includes an entire implementation <a href="/blog/2015/06/06/">in
OpenGL</a>. It’s enabled at compile time with <code class="language-plaintext highlighter-rouge">-DENABLE_GL</code> so long
as you have GLFW and GLEW (even on Windows!).</p>

<h3 id="sliding-rooks-puzzle">Sliding rooks puzzle</h3>

<p><a href="https://nullprogram.com/video/?v=rooks"><img src="/img/showcase/rooks.jpg" alt="" /></a><br />
<strong>Source</strong>:  <a href="https://gist.github.com/skeeto/ea9afb36629d89eccd638ad1da870cfc">rooks.c</a></p>

<p>I wanted to watch an animated solution to <a href="https://possiblywrong.wordpress.com/2020/05/20/sliding-rooks-and-queens/">the sliding rooks
puzzle</a>. This program solves the puzzle using a bitboard, then
animates the solution. The rook images are embedded in the program,
compressed using a custom run-length encoding (RLE) scheme with a tiny
palette.</p>

<h3 id="glaubers-dynamics">Glauber’s dynamics</h3>

<p><a href="https://nullprogram.com/video/?v=magnet"><img src="/img/showcase/magnet.jpg" alt="" /></a><br />
<strong>Source</strong>:  <a href="https://gist.github.com/skeeto/132437a454242ff1eb988655361a390a">magnet.c</a></p>

<p>My own animation of <a href="http://bit-player.org/2019/glaubers-dynamics">Glauber’s dynamics</a> using a totally
unoriginal color palette.</p>

<h3 id="fire">Fire</h3>

<p><a href="https://nullprogram.com/video/?v=fire"><img src="/img/showcase/fire.jpg" alt="" /></a><br />
<strong>Source</strong>:  <a href="https://gist.github.com/skeeto/871f6b56684608ab64131afe8e7c7280">fire.c</a></p>

<p>This is the <a href="https://fabiensanglard.net/doom_fire_psx/">classic Doom fire animation</a>. I later <a href="/blog/2020/04/30/">implemented it
in WebGL</a> with a modified algorithm.</p>

<h3 id="mersenne-twister">Mersenne Twister</h3>

<p><a href="https://nullprogram.com/video/?v=mt19937-shuffle"><img src="/img/showcase/mt.jpg" alt="" /></a><br />
<strong>Source</strong>:  <a href="https://gist.github.com/skeeto/7f582c44add49edd23afd03e2d4bd304">mtvisualize.c</a></p>

<p>A visualization of the Mersenne Twister pseudorandom number generator.
Not terribly interesting, so I almost didn’t include it.</p>

<h3 id="pixel-sorting">Pixel sorting</h3>

<p><a href="https://nullprogram.com/video/?v=pixelsort"><img src="/img/showcase/pixelsort.jpg" alt="" /></a><br />
<strong>Source</strong>:  <a href="https://gist.github.com/skeeto/29ce8af8c911033bd8c5a2bb3dd591f6">pixelsort.c</a></p>

<p>Another animation <a href="https://old.reddit.com/r/generative/comments/9o1plu/generative_pixel_sorting_variant/">inspired by a reddit post</a>. Starting from
the top-left corner, swap the current pixel to the one most like its
neighbors.</p>

<h3 id="random-walk-2d">Random walk (2D)</h3>

<p><a href="https://nullprogram.com/video/?v=walk2d"><img src="/img/showcase/walkers.jpg" alt="" /></a><br />
<strong>Source</strong>:  <a href="https://gist.github.com/skeeto/c0262de33f7222f85a19144c8be2a725">walkers.c</a></p>

<p>Another reproduction of <a href="https://old.reddit.com/r/proceduralgeneration/comments/g49qwk/random_walkers_abstract_art/">a reddit post</a>. This is recent enough
that I’m using a <a href="/blog/2019/11/19/">disposable LCG</a>.</p>

<h3 id="manhattan-distance-voronoi-diagram">Manhattan distance Voronoi diagram</h3>

<p><a href="https://nullprogram.com/video/?v=voronoi"><img src="/img/showcase/voronoi.jpg" alt="" /></a><br />
<strong>Source</strong>:  <a href="https://gist.github.com/skeeto/871ff25a9c3c92c335a31a4f87f5c4d8">voronoi.c</a></p>

<p>Another <a href="https://old.reddit.com/r/proceduralgeneration/comments/fuy6tk/voronoi_with_manhattan_distance_in_c/">reddit post</a>, though I think my version looks a lot
nicer. I like to play this one over and over on repeat with different
seeds.</p>

<h3 id="random-walk-3d">Random walk (3D)</h3>

<p><a href="https://nullprogram.com/video/?v=walk3d"><img src="/img/showcase/walk3d.jpg" alt="" /></a><br />
<strong>Source</strong>:  <a href="https://gist.github.com/skeeto/550fb3171bd24019567702cd0c513b3d">walk3d.c</a></p>

<p>Another <del>stolen idea</del> personal take <a href="https://old.reddit.com/r/proceduralgeneration/comments/geka1q/random_walking_in_3d/">on a reddit post</a>. This
features the orthographic projection function from the RANDU animation.
Video encoding makes a real mess of this one, and I couldn’t work out
encoding options to make it look nice, so this one looks a lot better
“in person.”</p>

<h3 id="lorenz-system">Lorenz system</h3>

<p><a href="https://nullprogram.com/video/?v=lorenz"><img src="/img/showcase/lorenz.jpg" alt="" /></a><br />
<strong>Source</strong>:  <a href="https://gist.github.com/skeeto/19918b561f66ee0065f9e49cc4380d4a">lorenz.c</a></p>

<p>A 3D animation I adapted from the 3D random walk above, meaning it uses
the same orthographic projection. I have <a href="/blog/2018/02/15/">a WebGL version of this
one</a>, but I like that I could do this in such a small
amount of code and without an existing rendering engine. Like before,
this is really damaged by video encoding and is best seen live.</p>

<p>Bonus: I made <a href="https://gist.github.com/skeeto/45d825c01b00c10452634933d03e766d">an obfuscated version</a> just to show how
small this can get!</p>


    